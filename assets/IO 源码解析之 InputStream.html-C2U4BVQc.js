import{_ as n,c as a,f as l,o as p}from"./app-BHJLlGQI.js";const e={};function o(t,s){return p(),a("div",null,s[0]||(s[0]=[l(`<blockquote><p>本文主要从<strong>JDK 11 源码</strong>角度分析InputStream。</p></blockquote><ul><li>IO 源码解析之 InputStream <ul><li><a href="#inputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB">InputStream 类实现关系</a></li><li><a href="#inputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB">InputStream 抽象类</a></li><li>源码实现 <ul><li><a href="#inputstream">InputStream</a></li><li><a href="#filterinputstream">FilterInputStream</a></li><li><a href="#bytearrayinputstream">ByteArrayInputStream</a></li><li><a href="#bufferedinputstream">BufferedInputStream</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="inputstream-类实现关系" tabindex="-1"><a class="header-anchor" href="#inputstream-类实现关系"><span><a href="#inputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB">#</a> InputStream 类实现关系</span></a></h2><blockquote><p>InputStream是输入字节流，具体的实现类层次结构如下：</p></blockquote><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/io-inputstream-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="inputstream-抽象类" tabindex="-1"><a class="header-anchor" href="#inputstream-抽象类"><span><a href="#inputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB">#</a> InputStream 抽象类</span></a></h2><p>InputStream 类重要方法设计如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 读取下一个字节，如果没有则返回-1</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> abstract</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read</span><span style="color:#E06C75;">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将读取到的数据放在 byte 数组中，该方法实际上调用read(byte b[], int off, int len)方法</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;"> b[]) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 从第 off 位置读取&lt;b&gt;最多(实际可能小于)&lt;/b&gt; len 长度字节的数据放到 byte 数组中，流是以 -1 来判断是否读取结束的; 此方法会一直阻止，直到输入数据可用、检测到stream结尾或引发异常为止。</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;"> b[]</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> off</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> len) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// JDK9新增：读取 InputStream 中的所有剩余字节，调用readNBytes(Integer.MAX_VALUE)方法</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;">[] </span><span style="color:#61AFEF;">readAllBytes</span><span style="color:#E06C75;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// JDK11更新：读取 InputStream 中的剩余字节的指定上限大小的字节内容；此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;">[] </span><span style="color:#61AFEF;">readNBytes</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> len)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// JDK9新增：从输入流读取请求的字节数并保存在byte数组中； 此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> readNBytes</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;">[] b</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> off</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> len)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 跳过指定个数的字节不读取</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> skip</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> n) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回可读的字节数量</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> available</span><span style="color:#E06C75;">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 读取完，关闭流，释放资源</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> close</span><span style="color:#E06C75;">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 标记读取位置，下次还可以从这里开始读取，使用前要看当前流是否支持，可以使用 markSupport() 方法判断</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> mark</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> readlimit) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 重置读取位置为上次 mark 标记的位置</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> reset</span><span style="color:#E06C75;">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 判断当前流是否支持标记流，和上面两个方法配套使用</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> markSupported</span><span style="color:#E06C75;">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// JDK9新增：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> transferTo</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">OutputStream</span><span style="color:#E06C75;"> out)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码实现" tabindex="-1"><a class="header-anchor" href="#源码实现"><span><a href="#%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0">#</a> 源码实现</span></a></h2><blockquote><p>梳理部分InputStream及其实现类的源码分析。</p></blockquote><h3 id="inputstream" tabindex="-1"><a class="header-anchor" href="#inputstream"><span><a href="#inputstream">#</a> InputStream</span></a></h3><p>InputStream抽象类源码如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> abstract</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> InputStream</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Closeable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 当使用skip方法时，最大的buffer size大小</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> MAX_SKIP_BUFFER_SIZE </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 2048</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 默认的buffer size</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> DEFAULT_BUFFER_SIZE </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 8192</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // JDK11中增加了一个nullInputStream，即空模式实现，以便可以直接调用而不用判空（可以看如下的补充说明）</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> InputStream</span><span style="color:#61AFEF;"> nullInputStream</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InputStream</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">            private</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> closed</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">            private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> ensureOpen</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (closed) {</span></span>
<span class="line"><span style="color:#C678DD;">                    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IOException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Stream closed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> available</span><span style="color:#ABB2BF;"> ()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">                ensureOpen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">                ensureOpen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> off</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                Objects</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkFromIndexSize</span><span style="color:#ABB2BF;">(off, len, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (len </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#61AFEF;">                ensureOpen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> byte</span><span style="color:#61AFEF;">[] readAllBytes</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">                ensureOpen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> readNBytes</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> off</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">                throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                Objects</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkFromIndexSize</span><span style="color:#ABB2BF;">(off, len, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">                ensureOpen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> byte</span><span style="color:#61AFEF;">[] readNBytes</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (len </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalArgumentException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;len &lt; 0&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#61AFEF;">                ensureOpen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> skip</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;font-style:italic;"> n</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">                ensureOpen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#D19A66;"> 0L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> transferTo</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">OutputStream</span><span style="color:#E06C75;font-style:italic;"> out</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                Objects</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">requireNonNull</span><span style="color:#ABB2BF;">(out);</span></span>
<span class="line"><span style="color:#61AFEF;">                ensureOpen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#D19A66;"> 0L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> close</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                closed </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        };</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 读取下一个字节的数据，如果没有则返回-1</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> abstract</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 将读取到的数据放在 byte 数组中，该方法实际上调用read(byte b[], int off, int len)方法</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">[])</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">(b, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 从第 off 位置读取&lt;b&gt;最多(实际可能小于)&lt;/b&gt; len 长度字节的数据放到 byte 数组中，流是以 -1 来判断是否读取结束的; 此方法会一直阻止，直到输入数据可用、检测到stream结尾或引发异常为止。</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">[], </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> off</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 检查边界</span></span>
<span class="line"><span style="color:#E5C07B;">        Objects</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkFromIndexSize</span><span style="color:#ABB2BF;">(off, len, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (len </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 读取下一个字节</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (c </span><span style="color:#56B6C2;">==</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">// 读到stream末尾，则返回读取的字节数量为-1</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        b[off] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">byte</span><span style="color:#ABB2BF;">)c;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // i用来记录取了多少个字节</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 循环读取</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;"> (; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> len ; i++) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                c </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (c </span><span style="color:#56B6C2;">==</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span><span style="color:#7F848E;font-style:italic;">// 读到stream末尾，则break</span></span>
<span class="line"><span style="color:#C678DD;">                    break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">                b[off </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> i] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">byte</span><span style="color:#ABB2BF;">)c;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">IOException</span><span style="color:#E06C75;font-style:italic;"> ee</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 返回读取到的字节个数</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> i;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 分配的最大数组大小。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 由于一些VM在数组中保留一些头字，所以尝试分配较大的阵列可能会导致OutOfMemoryError（请求的阵列大小超过VM限制）</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> MAX_BUFFER_SIZE </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // JDK9新增：读取 InputStream 中的所有剩余字节，调用readNBytes(Integer.MAX_VALUE)方法</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> byte</span><span style="color:#61AFEF;">[] readAllBytes</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> readNBytes</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // JDK11更新：读取 InputStream 中的剩余字节的指定上限大小的字节内容；此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> byte</span><span style="color:#61AFEF;">[] readNBytes</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 边界检查</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (len </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalArgumentException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;len &lt; 0&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">byte</span><span style="color:#ABB2BF;">[]&gt; </span><span style="color:#E06C75;">bufs</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 缓存每次读取到的内容放到bufs，最后组装成result</span></span>
<span class="line"><span style="color:#C678DD;">        byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">result</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 最后读取到的内容</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> total</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> remaining</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> len; </span><span style="color:#7F848E;font-style:italic;">// 剩余字节长度</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        do</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">buf</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">(remaining, DEFAULT_BUFFER_SIZE)];</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> nread</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 读取到结束为止，读取大小n可能大于或小于缓冲区大小</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> ((n </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">(buf, nread,</span></span>
<span class="line"><span style="color:#E5C07B;">                    Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">buf</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#ABB2BF;"> nread, remaining))) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                nread </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> n; </span></span>
<span class="line"><span style="color:#ABB2BF;">                remaining </span><span style="color:#56B6C2;">-=</span><span style="color:#ABB2BF;"> n;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (nread </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (MAX_BUFFER_SIZE </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> total </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> nread) {</span></span>
<span class="line"><span style="color:#C678DD;">                    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> OutOfMemoryError</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Required array size too large&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">                total </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> nread;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (result </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    result </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> buf;</span></span>
<span class="line"><span style="color:#ABB2BF;">                } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                    if</span><span style="color:#ABB2BF;"> (bufs </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                        bufs </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ArrayList</span><span style="color:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#E5C07B;">                        bufs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(result);</span></span>
<span class="line"><span style="color:#ABB2BF;">                    }</span></span>
<span class="line"><span style="color:#E5C07B;">                    bufs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(buf);</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 如果读不到内容（返回-1）或者没有剩余的字节，则跳出循环</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (n </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#ABB2BF;"> remaining </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (bufs </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (result </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E5C07B;"> result</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;"> ==</span><span style="color:#ABB2BF;"> total </span><span style="color:#C678DD;">?</span></span>
<span class="line"><span style="color:#ABB2BF;">                result </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">copyOf</span><span style="color:#ABB2BF;">(result, total);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 组装最后的result</span></span>
<span class="line"><span style="color:#ABB2BF;">        result </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[total];</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> offset</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        remaining </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> total;</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">b</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> bufs) {</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">, remaining);</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arraycopy</span><span style="color:#ABB2BF;">(b, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, result, offset, count);</span></span>
<span class="line"><span style="color:#ABB2BF;">            offset </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> count;</span></span>
<span class="line"><span style="color:#ABB2BF;">            remaining </span><span style="color:#56B6C2;">-=</span><span style="color:#ABB2BF;"> count;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> result;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // JDK9新增：从输入流读取请求的字节数并保存在byte数组中； 此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> readNBytes</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> off</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Objects</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkFromIndexSize</span><span style="color:#ABB2BF;">(off, len, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (n </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> len) {</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">(b, off </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> n, len </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> n);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (count </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            n </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> count;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> n;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 跳过指定个数的字节不读取</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> skip</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;font-style:italic;"> n</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> remaining</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> n;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> nr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (n </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> size</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">(MAX_SKIP_BUFFER_SIZE, remaining);</span></span>
<span class="line"><span style="color:#C678DD;">        byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">skipBuffer</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[size];</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (remaining </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            nr </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">(skipBuffer, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">(size, remaining));</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (nr </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">            remaining </span><span style="color:#56B6C2;">-=</span><span style="color:#ABB2BF;"> nr;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> n </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> remaining;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 返回可读的字节数量</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> available</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 读取完，关闭流，释放资源</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> close</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 标记读取位置，下次还可以从这里开始读取，使用前要看当前流是否支持，可以使用 markSupport() 方法判断</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> mark</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> readlimit</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 重置读取位置为上次 mark 标记的位置</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> reset</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IOException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mark/reset not supported&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 判断当前流是否支持标记流，和上面两个方法配套使用。默认是false，由子类方法重写</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> markSupported</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // JDK9新增：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> transferTo</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">OutputStream</span><span style="color:#E06C75;font-style:italic;"> out</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Objects</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">requireNonNull</span><span style="color:#ABB2BF;">(out, </span><span style="color:#98C379;">&quot;out&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> transferred</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">buffer</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[DEFAULT_BUFFER_SIZE];</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> read</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> ((read </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(buffer, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, DEFAULT_BUFFER_SIZE)) </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(buffer, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, read);</span></span>
<span class="line"><span style="color:#ABB2BF;">            transferred </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> read;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> transferred;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>总结下JDK9的更新点</p></blockquote><p>类 java.io.InputStream 中增加了新的方法来读取和复制 InputStream 中包含的数据。</p><ul><li><code>readAllBytes</code>：读取 InputStream 中的所有剩余字节。</li><li><code>readNBytes</code>： 从 InputStream 中读取指定数量的字节到数组中。</li><li><code>transferTo</code>：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中 。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> TestInputStream</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> InputStream</span><span style="color:#E06C75;"> inputStream</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> CONTENT </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;Hello World&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Before</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> setUp</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">inputStream</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">            TestInputStream</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getResourceAsStream</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/input.txt&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> testReadAllBytes</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> content</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">inputStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readAllBytes</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#61AFEF;">        assertEquals</span><span style="color:#ABB2BF;">(CONTENT, content);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> testReadNBytes</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">data</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">inputStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readNBytes</span><span style="color:#ABB2BF;">(data, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">        assertEquals</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(data));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> testTransferTo</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> ByteArrayOutputStream</span><span style="color:#E06C75;"> outputStream</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ByteArrayOutputStream</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">inputStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transferTo</span><span style="color:#ABB2BF;">(outputStream);</span></span>
<span class="line"><span style="color:#61AFEF;">        assertEquals</span><span style="color:#ABB2BF;">(CONTENT, </span><span style="color:#E5C07B;">outputStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>read(byte[], int, int)</code> 和 <code>readNBytes(byte[], int, int)</code>看似是实现的相同功能，为何会设计readNBytes方法呢</strong>？</li></ul><p>这个问题可以参看<a href="https://stackoverflow.com/questions/53754387/java-read-vs-readnbytes-of-the-inputstream-instance" target="_blank" rel="noopener noreferrer">这里在新窗口打开</a></p><ol><li>read(byte[], int, int)是尝试读到最多len个bytes，但是<strong>读取到的内容长度可能是小于len</strong>的。</li><li>readNBytes(byte[], int, int) 会一直（while循环）查找直到stream尾为止</li></ol><p>举个例子：如果文本内容是<code>12345&lt;end&gt;</code>, read(s,0,10)是允许返回<code>123</code>的, 而readNbytes(s,0,10)会一直（while循环）查找直到stream尾为止，并返回<code>12345</code>.</p><blockquote><p>补充下JDK11为什么会增加nullInputStream方法的设计？即空对象模式</p></blockquote><ul><li><strong>空对象模式</strong></li></ul><p>举个例子：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyParser</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Parser</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> Action</span><span style="color:#E06C75;"> NO_ACTION </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Action</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doSomething</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">/* do nothing */</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#E06C75;">  }</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#E5C07B;"> Action</span><span style="color:#61AFEF;"> findAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> userInput</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> ( </span><span style="color:#7F848E;font-style:italic;">/* we can&#39;t find any actions */</span><span style="color:#ABB2BF;"> ) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#ABB2BF;"> NO_ACTION;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后便<strong>可以始终可以这么调用，而不用再判断空了</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">ParserFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getParser</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">findAction</span><span style="color:#ABB2BF;">(someInput).</span><span style="color:#61AFEF;">doSomething</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="filterinputstream" tabindex="-1"><a class="header-anchor" href="#filterinputstream"><span><a href="#filterinputstream">#</a> FilterInputStream</span></a></h3><p>FilterInputStream 源码如下</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> FilterInputStream</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> InputStream</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 被装饰的inputStream</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> volatile</span><span style="color:#E5C07B;"> InputStream</span><span style="color:#E06C75;"> in</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 构造函数，注入被装饰的inputStream</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#61AFEF;"> FilterInputStream</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">InputStream</span><span style="color:#E06C75;font-style:italic;"> in</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">in</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> in;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 本质是调用被装饰的inputStream的方法</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> in</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">[])</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">(b, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">[], </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> off</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> in</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(b, off, len);</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> skip</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;font-style:italic;"> n</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> in</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">skip</span><span style="color:#ABB2BF;">(n);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> available</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> in</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">available</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> close</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        in</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> mark</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> readlimit</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        in</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mark</span><span style="color:#ABB2BF;">(readlimit);</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> reset</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        in</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reset</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> markSupported</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> in</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">markSupported</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么被装饰的inputStream是volatile类型的</strong>？</p><p>请参看： <a href="">关键字: volatile详解</a></p><h3 id="bytearrayinputstream" tabindex="-1"><a class="header-anchor" href="#bytearrayinputstream"><span><a href="#bytearrayinputstream">#</a> ByteArrayInputStream</span></a></h3><p>ByteArrayInputStream源码如下</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ByteArrayInputStream</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> InputStream</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 内部保存的byte 数组</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;"> buf[]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 读取下一个字节的数组下标，byte[pos]就是read获取的下个字节</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> pos</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // mark的数组下标位置</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> mark </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 保存的有效byte的个数</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 构造方法</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> ByteArrayInputStream</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> buf</span><span style="color:#ABB2BF;">[])</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">buf</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> buf;              </span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">pos</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> buf</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 构造方法，带offset的</span></span>
<span class="line"><span style="color:#C678DD;">     public</span><span style="color:#61AFEF;"> ByteArrayInputStream</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> buf</span><span style="color:#ABB2BF;">[], </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> offset</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> length</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {                </span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">buf</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> buf;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">pos</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> offset;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">(offset </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> length, </span><span style="color:#E5C07B;">buf</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">mark</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> offset;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 从流中读取下一个字节，没有读取到返回 -1</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> (pos </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> count) </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> (buf[pos++] </span><span style="color:#56B6C2;">&amp;</span><span style="color:#D19A66;"> 0xff</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 从第 off 位置读取&lt;b&gt;最多(实际可能小于)&lt;/b&gt; len 长度字节的数据放到 byte 数组中，流是以 -1 来判断是否读取结束的</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">[], </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> off</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 边界检查</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (b </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NullPointerException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (off </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> len </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> len </span><span style="color:#56B6C2;">&gt;</span><span style="color:#E5C07B;"> b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#ABB2BF;"> off) {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IndexOutOfBoundsException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (pos </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#ABB2BF;"> count) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> avail</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> count </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> pos;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (len </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> avail) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            len </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> avail;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (len </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 从buf拷贝到byte 数组b中</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arraycopy</span><span style="color:#ABB2BF;">(buf, pos, b, off, len);</span></span>
<span class="line"><span style="color:#ABB2BF;">        pos </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> len;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> len;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 跳过指定个数的字节不读取</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> skip</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;font-style:italic;"> n</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> k</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> count </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> pos;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (n </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> k) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            k </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> n </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> ?</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> n;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        pos </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> k;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> k;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 还有稍稍byte在buffer中未读取，即总的count 减去 当前byte位置</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> available</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> count </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> pos;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 支持mark所以返回true</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> markSupported</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { </span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span><span style="color:#E06C75;">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 在流中当前位置mark, readAheadLimit参数未使用    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> mark</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> readAheadLimit</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {            </span></span>
<span class="line"><span style="color:#ABB2BF;">        mark </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> pos;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 重置流，即回到mark的位置</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> reset</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        pos </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> mark;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 关闭ByteArrayInputStream不会产生任何动作</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> close</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bufferedinputstream" tabindex="-1"><a class="header-anchor" href="#bufferedinputstream"><span><a href="#bufferedinputstream">#</a> BufferedInputStream</span></a></h3><p>BufferedInputStream源码如下</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> BufferedInputStream</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> FilterInputStream</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 默认的buffer大小</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> DEFAULT_BUFFER_SIZE </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 8192</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 分配的最大数组大小。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 由于一些VM在数组中保留一些头字，所以尝试分配较大的阵列可能会导致OutOfMemoryError（请求的阵列大小超过VM限制）</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> MAX_BUFFER_SIZE </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 内部保存在byte 数组中</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;"> buf[]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 关闭流的方法可能是异步的，所以使用原子AtomicReferenceFieldUpdater提供CAS无锁方式（可以解决CAS的ABA问题）来保证</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> AtomicReferenceFieldUpdater</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">BufferedInputStream</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;">[]</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> bufUpdater </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#E5C07B;">        AtomicReferenceFieldUpdater</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newUpdater</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">BufferedInputStream</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">,  </span><span style="color:#C678DD;">byte</span><span style="color:#ABB2BF;">[].</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;buf&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 有效byte的大小</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 当前位置</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> pos</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 最后一次，调用mark方法，标记的位置</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> markpos </span><span style="color:#56B6C2;">=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 该变量惟一入口就是mark(int readLimit)，好比调用方法mark(1024)，那么后面读取的数据若是</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 超过了1024字节，那么这次mark就为无效标记，子类能够选择抛弃该mark标记，从头开始。不过具体实现</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 跟具体的子类有关，在BufferedInputStream中，会抛弃mark标记，从新将markpos赋值为-1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> marklimit</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取被装饰的stream</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> InputStream</span><span style="color:#61AFEF;"> getInIfOpen</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        InputStream</span><span style="color:#E06C75;"> input</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> in;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (input </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IOException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Stream closed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> input;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取实际内部的buffer数组</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> byte</span><span style="color:#61AFEF;">[] getBufIfOpen</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">buffer</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> buf;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (buffer </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IOException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Stream closed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> buffer;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 构造函数，buffer是8kb</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> BufferedInputStream</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">InputStream</span><span style="color:#E06C75;font-style:italic;"> in</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">(in, DEFAULT_BUFFER_SIZE);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 构造函数，指定buffer大小</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> BufferedInputStream</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">InputStream</span><span style="color:#E06C75;font-style:italic;"> in</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> size</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        super</span><span style="color:#ABB2BF;">(in);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (size </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalArgumentException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Buffer size &lt;= 0&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        buf </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[size];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 用更多的数据填充缓冲区,考虑到shuffling和其他处理标记的技巧，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 假设它是由同步方法调用的。该方法还假设所有数据已经被读入，因此pos &gt;count。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> fill</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    	// 得到内部缓冲区buffer</span></span>
<span class="line"><span style="color:#C678DD;">        byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">buffer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getBufIfOpen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 没有mark的情况下， pos为0</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (markpos </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            pos </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;            </span><span style="color:#7F848E;font-style:italic;">/* no mark: throw away the buffer */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // pos &gt;= buffer.length  buffer已经被读取完了 </span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (pos </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#E5C07B;"> buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">/* no room left in buffer */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        	// markpos &gt; 0  有标记，标记处在缓存中间</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (markpos </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {  </span><span style="color:#7F848E;font-style:italic;">/* can throw away early part of the buffer */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            	// 把buffer中，markpos到pos的部分移动到0-sz处，pos设置为sz，markpos为0</span></span>
<span class="line"><span style="color:#C678DD;">                int</span><span style="color:#E06C75;"> sz</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> pos </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> markpos;</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arraycopy</span><span style="color:#ABB2BF;">(buffer, markpos, buffer, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, sz);</span></span>
<span class="line"><span style="color:#ABB2BF;">                pos </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> sz;</span></span>
<span class="line"><span style="color:#ABB2BF;">                markpos </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // markpos已经为0了，marklimit比buffer.length小，再读取buffer已经没有地方了</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#ABB2BF;"> marklimit) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            	// 清空缓存，清空标记，markpos为-1，pos为0</span></span>
<span class="line"><span style="color:#ABB2BF;">                markpos </span><span style="color:#56B6C2;">=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;   </span><span style="color:#7F848E;font-style:italic;">/* buffer got too big, invalidate mark */</span></span>
<span class="line"><span style="color:#ABB2BF;">                pos </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;        </span><span style="color:#7F848E;font-style:italic;">/* drop buffer contents */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // markpos已经为0了，marklimit比buffer.length大，而buffer.length已经最大了，不能扩容</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#ABB2BF;"> MAX_BUFFER_SIZE) {</span></span>
<span class="line"><span style="color:#C678DD;">                throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> OutOfMemoryError</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Required array size too large&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">               // markpos已经为0了，marklimit比buffer.length大</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {            </span><span style="color:#7F848E;font-style:italic;">/* grow buffer */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            	// 建立一个长度为min(2*pos,marklimit,MAX_BUFFER_SIZE),的缓存数组，然后把原来0-pos移动到新数组的0-pos处</span></span>
<span class="line"><span style="color:#C678DD;">                int</span><span style="color:#E06C75;"> nsz</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (pos </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#ABB2BF;"> MAX_BUFFER_SIZE </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> pos) </span><span style="color:#C678DD;">?</span></span>
<span class="line"><span style="color:#ABB2BF;">                        pos </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 2</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> MAX_BUFFER_SIZE;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (nsz </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> marklimit)</span></span>
<span class="line"><span style="color:#ABB2BF;">                    nsz </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> marklimit;</span></span>
<span class="line"><span style="color:#C678DD;">                byte</span><span style="color:#E06C75;"> nbuf</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[nsz];</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arraycopy</span><span style="color:#ABB2BF;">(buffer, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, nbuf, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, pos);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 用bufUpdater替换buffer</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">bufUpdater</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSet</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, buffer, nbuf)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // Can&#39;t replace buf if there was an async close.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // Note: This would need to be changed if fill()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // is ever made accessible to multiple threads.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // But for now, the only way CAS can fail is via close.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // assert buf == null;</span></span>
<span class="line"><span style="color:#C678DD;">                    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IOException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Stream closed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">                buffer </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> nbuf;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 当前读取上限count为pos</span></span>
<span class="line"><span style="color:#ABB2BF;">        count </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> pos;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 从内部的输入流，读取pos到buffer.length部分，读取的字节数加到count</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getInIfOpen</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(buffer, pos, </span><span style="color:#E5C07B;">buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#ABB2BF;"> pos);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (n </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            count </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> n </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> pos;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 读取byte</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 说明当前buf[]数组大小不够了，须要fill()</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (pos </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#ABB2BF;"> count) {</span></span>
<span class="line"><span style="color:#61AFEF;">            fill</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 说明没有读取到任何数据</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (pos </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#ABB2BF;"> count)</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> getBufIfOpen</span><span style="color:#ABB2BF;">()[pos++] </span><span style="color:#56B6C2;">&amp;</span><span style="color:#D19A66;"> 0xff</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Read characters into a portion of an array, reading from the underlying</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * stream at most once if necessary.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read1</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> off</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> avail</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> count </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> pos;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (avail </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 当写入指定数组b的长度大小超过BufferedInputStream中核心缓存数组buf[]的大小而且 markpos &lt; 0，那么就直接从数据流中读取数据给b数组，而不经过buf[]缓存数组，避免buf[]数组急剧增大</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (len </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#61AFEF;"> getBufIfOpen</span><span style="color:#ABB2BF;">().</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#ABB2BF;"> markpos </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#61AFEF;"> getInIfOpen</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(b, off, len);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#61AFEF;">            fill</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            avail </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> count </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> pos;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (avail </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> cnt</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (avail </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> len) </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> avail </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> len;</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arraycopy</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getBufIfOpen</span><span style="color:#ABB2BF;">(), pos, b, off, cnt);</span></span>
<span class="line"><span style="color:#ABB2BF;">        pos </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> cnt;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> cnt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 读取到byte数组b中</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">[], </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> off</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        throws</span><span style="color:#E5C07B;"> IOException</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#61AFEF;">        getBufIfOpen</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Check for closed stream</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> ((off </span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> len </span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> (off </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> len) </span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#ABB2BF;"> (off </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> len))) </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IndexOutOfBoundsException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (len </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (;;) {</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> nread</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> read1</span><span style="color:#ABB2BF;">(b, off </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> n, len </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> n);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (nread </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#ABB2BF;"> (n </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> nread </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> n;</span></span>
<span class="line"><span style="color:#ABB2BF;">            n </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> nread;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (n </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#ABB2BF;"> len)</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#ABB2BF;"> n;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // if not closed but no bytes available, return</span></span>
<span class="line"><span style="color:#E5C07B;">            InputStream</span><span style="color:#E06C75;"> input</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> in;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (input </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">available</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#ABB2BF;"> n;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 跳过n个</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> skip</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;font-style:italic;"> n</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        getBufIfOpen</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Check for closed stream</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (n </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> avail</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> count </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> pos;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (avail </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // If no mark position set then don&#39;t keep in buffer</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (markpos </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#61AFEF;"> getInIfOpen</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">skip</span><span style="color:#ABB2BF;">(n);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // Fill in buffer to save bytes for reset</span></span>
<span class="line"><span style="color:#61AFEF;">            fill</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            avail </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> count </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> pos;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (avail </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> skipped</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (avail </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> n) </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> avail </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> n;</span></span>
<span class="line"><span style="color:#ABB2BF;">        pos </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> skipped;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> skipped;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // buf[]数组剩余字节数+输入流中剩余字节数</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> available</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> count </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> pos;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> avail</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getInIfOpen</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">available</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> n </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#56B6C2;"> -</span><span style="color:#ABB2BF;"> avail)</span></span>
<span class="line"><span style="color:#C678DD;">                    ?</span><span style="color:#E5C07B;"> Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span></span>
<span class="line"><span style="color:#C678DD;">                    :</span><span style="color:#ABB2BF;"> n </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> avail;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 标记位置，marklimit只有在这里才可以被赋值，readlimit表示mark()方法执行后，最多可以从流中读取的数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 若是超过该字节大小，那么在fill()的时候，就会认为此mark()标记无效，从新将 markpos = -1，pos = 0</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> mark</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> readlimit</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        marklimit </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> readlimit;</span></span>
<span class="line"><span style="color:#ABB2BF;">        markpos </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> pos;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 重置位置</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> reset</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        getBufIfOpen</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 如果已经close, 则直接报错</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (markpos </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IOException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Resetting to invalid mark&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        pos </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> markpos;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 支持mark, 所以返回true</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> markSupported</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 通过AtomicReferenceFieldUpdater的CAS无锁方式close</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> close</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">buffer</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> ( (buffer </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> buf) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">bufUpdater</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSet</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, buffer, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">                InputStream</span><span style="color:#E06C75;"> input</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> in;</span></span>
<span class="line"><span style="color:#ABB2BF;">                in </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (input </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">                    input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // Else retry in case a new buf was CASed in fill()</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AtomicReferenceFieldUpdater具体可以参考：<a href="">JUC原子类: CAS, Unsafe和原子类详解</a></p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</span></a></h2>`,40)]))}const r=n(e,[["render",o],["__file","IO 源码解析之 InputStream.html.vue"]]),i=JSON.parse(`{"path":"/posts/Java/IO-NIO-AIO/IO%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8B%20InputStream.html","title":"IO 源码解析之 InputStream","lang":"zh-CN","frontmatter":{"title":"IO 源码解析之 InputStream","subtitle":"Java，Java开发，Java 体系","date":"2024-03-11T14:36:26.000Z","category":["Java"],"tag":["Java","IO"],"order":4,"description":"本文主要从JDK 11 源码角度分析InputStream。 IO 源码解析之 InputStream InputStream 类实现关系 InputStream 抽象类 源码实现 InputStream FilterInputStream ByteArrayInputStream BufferedInputStream 参考文章 # InputStr...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8B%20InputStream.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"IO 源码解析之 InputStream"}],["meta",{"property":"og:description","content":"本文主要从JDK 11 源码角度分析InputStream。 IO 源码解析之 InputStream InputStream 类实现关系 InputStream 抽象类 源码实现 InputStream FilterInputStream ByteArrayInputStream BufferedInputStream 参考文章 # InputStr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/io-inputstream-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-17T09:29:14.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"IO"}],["meta",{"property":"article:published_time","content":"2024-03-11T14:36:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-17T09:29:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IO 源码解析之 InputStream\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/io-inputstream-1.png\\"],\\"datePublished\\":\\"2024-03-11T14:36:26.000Z\\",\\"dateModified\\":\\"2024-03-17T09:29:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# InputStream 类实现关系","slug":"inputstream-类实现关系","link":"#inputstream-类实现关系","children":[]},{"level":2,"title":"# InputStream 抽象类","slug":"inputstream-抽象类","link":"#inputstream-抽象类","children":[]},{"level":2,"title":"# 源码实现","slug":"源码实现","link":"#源码实现","children":[{"level":3,"title":"# InputStream","slug":"inputstream","link":"#inputstream","children":[]},{"level":3,"title":"# FilterInputStream","slug":"filterinputstream","link":"#filterinputstream","children":[]},{"level":3,"title":"# ByteArrayInputStream","slug":"bytearrayinputstream","link":"#bytearrayinputstream","children":[]},{"level":3,"title":"# BufferedInputStream","slug":"bufferedinputstream","link":"#bufferedinputstream","children":[]}]},{"level":2,"title":"# 参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1710139794000,"updatedTime":1710667754000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":14.46,"words":4338},"filePathRelative":"posts/Java/IO-NIO-AIO/IO 源码解析之 InputStream.md","localizedDate":"2024年3月11日","excerpt":"<blockquote>\\n<p>本文主要从<strong>JDK 11 源码</strong>角度分析InputStream。</p>\\n</blockquote>\\n<ul>\\n<li>IO 源码解析之 InputStream\\n<ul>\\n<li><a href=\\"#inputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB\\">InputStream 类实现关系</a></li>\\n<li><a href=\\"#inputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB\\">InputStream 抽象类</a></li>\\n<li>源码实现\\n<ul>\\n<li><a href=\\"#inputstream\\">InputStream</a></li>\\n<li><a href=\\"#filterinputstream\\">FilterInputStream</a></li>\\n<li><a href=\\"#bytearrayinputstream\\">ByteArrayInputStream</a></li>\\n<li><a href=\\"#bufferedinputstream\\">BufferedInputStream</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{r as comp,i as data};
