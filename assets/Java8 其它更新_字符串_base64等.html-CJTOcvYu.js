import{_ as o,e,o as t,c as r,b as s,g as a,f as l,h as p}from"./app-B0y_8BAO.js";const c={},B=p(`<blockquote><p>本文对Java 8 其它更新介绍和解读。</p></blockquote><ul><li>Java8 其它更新,字符串&amp;base64等 <ul><li><a href="#%E5%A4%84%E7%90%86%E6%95%B0%E5%80%BC">处理数值</a></li><li><a href="#%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6">处理文件</a></li><li><a href="#%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6">查找文件</a></li><li><a href="#%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6">读写文件</a></li><li><a href="#javautilrandom">java.util.Random</a></li><li><a href="#javautilbase64">java.util.Base64</a></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul></li></ul><h2 id="处理数值" tabindex="-1"><a class="header-anchor" href="#处理数值"><span><a href="#%E5%A4%84%E7%90%86%E6%95%B0%E5%80%BC">#</a> 处理数值</span></a></h2><p>Java8添加了对无符号数的额外支持。Java中的数值总是有符号的，例如，让我们来观察Integer:</p><p>int可表示最多2 ** 32个数。Java中的数值默认为有符号的，所以最后一个二进制数字表示符号(0为正数，1为负数)。所以从十进制的0开始，最大的有符号正整数为2 ** 31 - 1。</p><p>你可以通过Integer.MAX_VALUE来访问它:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">      // 2147483647</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">  // -2147483648</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Java8添加了解析无符号整数的支持，让我们看看它如何工作:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> maxUnsignedInt </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#D19A66;">1l</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 32</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> string </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">valueOf</span><span style="color:#ABB2BF;">(maxUnsignedInt);</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> unsignedInt </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseUnsignedInt</span><span style="color:#ABB2BF;">(string, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> string2 </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toUnsignedString</span><span style="color:#ABB2BF;">(unsignedInt, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像你看到的那样，现在可以将最大的无符号数2 ** 32 - 1解析为整数。而且你也可以将这个数值转换回无符号数的字符串表示。</p><p>这在之前不可能使用parseInt完成，就像这个例子展示的那样:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseInt</span><span style="color:#ABB2BF;">(string, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">NumberFormatException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">err</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;could not parse signed int of &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> maxUnsignedInt);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个数值不可解析为有符号整数，因为它超出了最大范围2 ** 31 - 1。 算术运算</p><p>Math工具类新增了一些方法来处理数值溢出。这是什么意思呢? 我们已经看到了所有数值类型都有最大值。所以当算术运算的结果不能被它的大小装下时，会发生什么呢?</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">      // 2147483647</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">  // -2147483648</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>就像你看到的那样，发生了整数溢出，这通常是我们不愿意看到的。</p><p>Java8添加了严格数学运算的支持来解决这个问题。Math扩展了一些方法，它们全部以exact结尾，例如addExact。当运算结果不能被数值类型装下时，这些方法通过抛出ArithmeticException异常来合理地处理溢出。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addExact</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">ArithmeticException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">err</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // =&gt; integer overflow</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当尝试通过toIntExact将长整数转换为整数时，可能会抛出同样的异常:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toIntExact</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Long</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">ArithmeticException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">err</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // =&gt; integer overflow</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="处理文件" tabindex="-1"><a class="header-anchor" href="#处理文件"><span><a href="#%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6">#</a> 处理文件</span></a></h2><p>Files工具类首次在Java7中引入，作为NIO的一部分。JDK8 API添加了一些额外的方法，它们可以将文件用于函数式数据流。让我们深入探索一些代码示例。 列出文件</p><p>Files.list方法将指定目录的所有路径转换为数据流，便于我们在文件系统的内容上使用类似filter和sorted的流操作。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">try</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Stream</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Path</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> stream </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Files</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">list</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">))</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    String</span><span style="color:#E06C75;"> joined </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> stream</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(String</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">valueOf)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(path </span><span style="color:#C678DD;">-&gt;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">sorted</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">joining</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;; &quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;List: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> joined);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子列出了当前工作目录的所有文件，之后将每个路径都映射为它的字符串表示。之后结果被过滤、排序，最后连接为一个字符串。如果你还不熟悉函数式数据流，你应该阅读我的Java8数据流教程。</p><p>你可能已经注意到，数据流的创建包装在try-with语句中。数据流实现了AutoCloseable，并且这里我们需要显式关闭数据流，因为它基于IO操作。</p><blockquote><p>返回的数据流是DirectoryStream的封装。如果需要及时处理文件资源，就应该使用try-with结构来确保在流式操作完成后，数据流的close方法被调用。</p></blockquote><h2 id="查找文件" tabindex="-1"><a class="header-anchor" href="#查找文件"><span><a href="#%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6">#</a> 查找文件</span></a></h2><p>下面的例子演示了如何查找在目录及其子目录下的文件:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Path</span><span style="color:#E06C75;"> start </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> maxDepth </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Stream</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Path</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> stream </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Files</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">(start, maxDepth, (path, attr) </span><span style="color:#C678DD;">-&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">valueOf</span><span style="color:#ABB2BF;">(path).</span><span style="color:#61AFEF;">endsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.js&quot;</span><span style="color:#ABB2BF;">))</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    String</span><span style="color:#E06C75;"> joined </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> stream</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">sorted</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(String</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">valueOf)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">joining</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;; &quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Found: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> joined);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>find方法接受三个参数: 目录路径start是起始点，maxDepth定义了最大搜索深度。第三个参数是一个匹配谓词，定义了搜索的逻辑。上面的例子中，我们搜索了所有JavaScirpt文件(以.js结尾的文件名)。</p><p>我们可以使用Files.walk方法来完成相同的行为。这个方法会遍历每个文件，而不需要传递搜索谓词。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Path</span><span style="color:#E06C75;"> start </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> maxDepth </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Stream</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Path</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> stream </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Files</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">walk</span><span style="color:#ABB2BF;">(start, maxDepth)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    String</span><span style="color:#E06C75;"> joined </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> stream</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(String</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">valueOf)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(path </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">endsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.js&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">sorted</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">joining</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;; &quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;walk(): &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> joined);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，我们使用了流式操作filter来完成和上个例子相同的行为。</p><h2 id="读写文件" tabindex="-1"><a class="header-anchor" href="#读写文件"><span><a href="#%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6">#</a> 读写文件</span></a></h2><p>将文本文件读到内存，以及向文本文件写入字符串在Java 8 中是简单的任务。不需要再去摆弄读写器了。Files.readAllLines从指定的文件把所有行读进字符串列表中。你可以简单地修改这个列表，并且将它通过Files.write写到另一个文件中:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> lines </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Files</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readAllLines</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;res/nashorn1.js&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">lines</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;print(&#39;foobar&#39;);&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">Files</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;res/nashorn1-modified.js&quot;</span><span style="color:#ABB2BF;">), lines);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意这些方法对内存并不十分高效，因为整个文件都会读进内存。文件越大，所用的堆区也就越大。</p><p>你可以使用Files.lines方法来作为内存高效的替代。这个方法读取每一行，并使用函数式数据流来对其流式处理，而不是一次性把所有行都读进内存。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">try</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Stream</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> stream </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Files</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lines</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;res/nashorn1.js&quot;</span><span style="color:#ABB2BF;">))</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    stream</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(line </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> line</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">contains</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;print&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(String</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">trim)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">println);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你需要更多的精细控制，你需要构造一个新的BufferedReader来代替:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Path</span><span style="color:#E06C75;"> path </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;res/nashorn1.js&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">BufferedReader</span><span style="color:#E06C75;"> reader </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Files</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newBufferedReader</span><span style="color:#ABB2BF;">(path)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">reader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readLine</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，你需要写入文件时，简单地构造一个BufferedWriter来代替:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Path</span><span style="color:#E06C75;"> path </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;res/output.js&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">BufferedWriter</span><span style="color:#E06C75;"> writer </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Files</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newBufferedWriter</span><span style="color:#ABB2BF;">(path)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    writer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;print(&#39;Hello World&#39;);&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BufferedReader也可以访问函数式数据流。lines方法在它所有行上面构建数据流:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Path</span><span style="color:#E06C75;"> path </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;res/nashorn1.js&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">BufferedReader</span><span style="color:#E06C75;"> reader </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Files</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newBufferedReader</span><span style="color:#ABB2BF;">(path)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> countPrints </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> reader</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">lines</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(line </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> line</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">contains</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;print&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">count</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(countPrints);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前为止你可以看到Java8提供了三个简单的方法来读取文本文件的每一行，使文件处理更加便捷。</p><p>不幸的是你需要显式使用try-with语句来关闭文件流，这会使示例代码有些凌乱。我期待函数式数据流可以在调用类似count和collect时可以自动关闭，因为你不能在相同数据流上调用终止操作两次。</p><h2 id="java-util-random" tabindex="-1"><a class="header-anchor" href="#java-util-random"><span><a href="#java-util-random">#</a> java.util.Random</span></a></h2><p>在Java8中java.util.Random类的一个非常明显的变化就是新增了返回随机数流(random Stream of numbers)的一些方法。</p><p>下面的代码是创建一个无穷尽的double类型的数字流，这些数字在0(包括0)和1(不包含1)之间。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Random</span><span style="color:#E06C75;"> random </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Random</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">DoubleStream</span><span style="color:#E06C75;"> doubleStream </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> random</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doubles</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的代码是创建一个无穷尽的int类型的数字流，这些数字在0(包括0)和100(不包括100)之间。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Random</span><span style="color:#E06C75;"> random </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Random</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">IntStream</span><span style="color:#E06C75;"> intStream </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> random</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ints</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么这些无穷尽的数字流用来做什么呢? 接下来，我通过一些案例来分析。记住，这些无穷大的数字流只能通过某种方式被截断(limited)。</p><p>示例1: 创建10个随机的整数流并打印出来:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">intStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">limit</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">println);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例2: 创建100个随机整数:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">    List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> randomBetween0And99 </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> intStream</span></span>
<span class="line"><span style="color:#ABB2BF;">                                       .</span><span style="color:#61AFEF;">limit</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                                       .</span><span style="color:#61AFEF;">boxed</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">                                       .</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toList</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于高斯伪随机数(gaussian pseudo-random values)来说，random.doubles()方法所创建的流不能等价于高斯伪随机数，然而，如果用java8所提供的功能是非常容易实现的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Random</span><span style="color:#E06C75;"> random </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Random</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">DoubleStream</span><span style="color:#E06C75;"> gaussianStream </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">generate</span><span style="color:#ABB2BF;">(random</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">nextGaussian).</span><span style="color:#61AFEF;">mapToDouble</span><span style="color:#ABB2BF;">(e </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> e);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我使用了Stream.generate api，并传入Supplier 类的对象作为参数，这个对象是通过调用Random类中的方法 nextGaussian()创建另一个高斯伪随机数。</p><p>接下来，我们来对double类型的伪随机数流和double类型的高斯伪随机数流做一个更加有意思的事情，那就是获得两个流的随机数的分配情况。预期的结果是: double类型的伪随机数是均匀的分配的，而double类型的高斯伪随机数应该是正态分布的。</p><p>通过下面的代码，我生成了一百万个伪随机数，这是通过java8提供的api实现的:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Random</span><span style="color:#E06C75;"> random </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Random</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">DoubleStream</span><span style="color:#E06C75;"> doubleStream </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> random</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doubles</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1.0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">LinkedHashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Range</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> rangeCountMap </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> doubleStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">limit</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">boxed</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(Ranges</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">of)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(Ranges</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">emptyRangeCountMap, (m, e) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(e, </span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(e) </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">), Ranges</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">mergeRangeCountMaps);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">rangeCountMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((k, v) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">k</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;</span><span style="color:#56B6C2;">\\t</span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> v));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码的运行结果如下:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">    -1</span><span style="color:#D19A66;">      49730</span></span>
<span class="line"><span style="color:#61AFEF;">    -0.9</span><span style="color:#D19A66;">    49931</span></span>
<span class="line"><span style="color:#61AFEF;">    -0.8</span><span style="color:#D19A66;">    50057</span></span>
<span class="line"><span style="color:#61AFEF;">    -0.7</span><span style="color:#D19A66;">    50060</span></span>
<span class="line"><span style="color:#61AFEF;">    -0.6</span><span style="color:#D19A66;">    49963</span></span>
<span class="line"><span style="color:#61AFEF;">    -0.5</span><span style="color:#D19A66;">    50159</span></span>
<span class="line"><span style="color:#61AFEF;">    -0.4</span><span style="color:#D19A66;">    49921</span></span>
<span class="line"><span style="color:#61AFEF;">    -0.3</span><span style="color:#D19A66;">    49962</span></span>
<span class="line"><span style="color:#61AFEF;">    -0.2</span><span style="color:#D19A66;">    50231</span></span>
<span class="line"><span style="color:#61AFEF;">    -0.1</span><span style="color:#D19A66;">    49658</span></span>
<span class="line"><span style="color:#61AFEF;">    0</span><span style="color:#D19A66;">       50177</span></span>
<span class="line"><span style="color:#61AFEF;">    0.1</span><span style="color:#D19A66;">     49861</span></span>
<span class="line"><span style="color:#61AFEF;">    0.2</span><span style="color:#D19A66;">     49947</span></span>
<span class="line"><span style="color:#61AFEF;">    0.3</span><span style="color:#D19A66;">     50157</span></span>
<span class="line"><span style="color:#61AFEF;">    0.4</span><span style="color:#D19A66;">     50414</span></span>
<span class="line"><span style="color:#61AFEF;">    0.5</span><span style="color:#D19A66;">     50006</span></span>
<span class="line"><span style="color:#61AFEF;">    0.6</span><span style="color:#D19A66;">     50038</span></span>
<span class="line"><span style="color:#61AFEF;">    0.7</span><span style="color:#D19A66;">     49962</span></span>
<span class="line"><span style="color:#61AFEF;">    0.8</span><span style="color:#D19A66;">     50071</span></span>
<span class="line"><span style="color:#61AFEF;">    0.9</span><span style="color:#D19A66;">     49695</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了类比，我们再生成一百万个高斯伪随机数:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Random</span><span style="color:#E06C75;"> random </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Random</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">DoubleStream</span><span style="color:#E06C75;"> gaussianStream </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">generate</span><span style="color:#ABB2BF;">(random</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">nextGaussian).</span><span style="color:#61AFEF;">mapToDouble</span><span style="color:#ABB2BF;">(e </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> e);</span></span>
<span class="line"><span style="color:#E5C07B;">LinkedHashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Range</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> gaussianRangeCountMap </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#E06C75;">    gaussianStream</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(e </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> (e </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1.0</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#ABB2BF;"> e </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 1.0</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">limit</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">boxed</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(Ranges</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">of)</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(Ranges</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">emptyRangeCountMap, (m, e) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(e, </span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(e) </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">), Ranges</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">mergeRangeCountMaps);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">gaussianRangeCountMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((k, v) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">k</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;</span><span style="color:#56B6C2;">\\t</span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> v));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码输出的结果恰恰与我们预期结果相吻合，即: double类型的伪随机数是均匀的分配的，而double类型的高斯伪随机数应该是正态分布的。</p>`,70),i={href:"https://gist.github.com/bijukunjummen/8129250",target:"_blank",rel:"noopener noreferrer"},y={href:"http://www.importnew.com/9672.html",target:"_blank",rel:"noopener noreferrer"},d=s("h2",{id:"java-util-base64",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#java-util-base64"},[s("span",null,[s("a",{href:"#java-util-base64"},"#"),a(" java.util.Base64")])])],-1),F=s("p",null,"Java8中java.util.Base64性能比较高，推荐使用。请参考:",-1),A={href:"https://wizardforcel.gitbooks.io/java8-new-features/content/11.html",target:"_blank",rel:"noopener noreferrer"},v={href:"http://git.oschina.net/benhail/javase8-sample",target:"_blank",rel:"noopener noreferrer"},E=p(`<p>该类提供了一套静态方法获取下面三种BASE64编解码器:</p><p>1)Basic编码: 是标准的BASE64编码，用于处理常规的需求</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 编码</span></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> asB64 </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Base64</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getEncoder</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">encodeToString</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;some string&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getBytes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;utf-8&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(asB64);</span><span style="color:#7F848E;font-style:italic;"> // 输出为: c29tZSBzdHJpbmc=</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 解码</span></span>
<span class="line"><span style="color:#C678DD;">byte</span><span style="color:#E06C75;">[] asBytes </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Base64</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDecoder</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">decode</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;c29tZSBzdHJpbmc=&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(asBytes, </span><span style="color:#98C379;">&quot;utf-8&quot;</span><span style="color:#ABB2BF;">));</span><span style="color:#7F848E;font-style:italic;"> // 输出为: some string</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2)URL编码: 使用下划线替换URL里面的反斜线“/”</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> urlEncoded </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Base64</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUrlEncoder</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">encodeToString</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;subjects?abcd&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getBytes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;utf-8&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Using URL Alphabet: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> urlEncoded);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出为:</span></span>
<span class="line"><span style="color:#E5C07B;">Using</span><span style="color:#E5C07B;"> URL</span><span style="color:#E06C75;"> Alphabet</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> c3ViamVjdHM_YWJjZA</span><span style="color:#56B6C2;">==</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3)MIME编码: 使用基本的字母数字产生BASE64输出，而且对MIME格式友好: 每一行输出不超过76个字符，而且每行以“\\r\\n”符结束。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">StringBuilder</span><span style="color:#E06C75;"> sb </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> StringBuilder</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> t </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> t </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span><span style="color:#ABB2BF;"> ++</span><span style="color:#E06C75;">t) {</span></span>
<span class="line"><span style="color:#E5C07B;">  sb</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UUID</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">randomUUID</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#C678DD;">byte</span><span style="color:#E06C75;">[] toEncode </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> sb</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getBytes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;utf-8&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> mimeEncoded </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Base64</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMimeEncoder</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">encodeToString</span><span style="color:#ABB2BF;">(toEncode);</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(mimeEncoded);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span><a href="#%E5%8F%82%E8%80%83">#</a> 参考</span></a></h2>`,8);function u(C,m){const n=e("ExternalLinkIcon");return t(),r("div",null,[B,s("p",null,[a("附: 完整代码可点击这里获取 "),s("a",i,[a("https://gist.github.com/bijukunjummen/8129250"),l(n)])]),s("p",null,[a("译文链接: "),s("a",y,[a("http://www.importnew.com/9672.html"),l(n)])]),d,s("blockquote",null,[F,s("ul",null,[s("li",null,[a("性能对比: "),s("a",A,[a("https://wizardforcel.gitbooks.io/java8-new-features/content/11.html"),l(n)])]),s("li",null,[a("源代码: "),s("a",v,[a("http://git.oschina.net/benhail/javase8-sample"),l(n)])])])]),E])}const g=o(c,[["render",u],["__file","Java8 其它更新_字符串_base64等.html.vue"]]),h=JSON.parse(`{"path":"/posts/Java/Java8NewFeatures/Java8%20%E5%85%B6%E5%AE%83%E6%9B%B4%E6%96%B0_%E5%AD%97%E7%AC%A6%E4%B8%B2_base64%E7%AD%89.html","title":"Java8 其它更新,字符串&base64等","lang":"zh-CN","frontmatter":{"title":"Java8 其它更新,字符串&base64等","subtitle":"Java，Java开发，Java 体系","date":"2024-03-17T15:06:55.000Z","category":["Java"],"tag":["Java","Java8 新特性"],"order":13,"description":"本文对Java 8 其它更新介绍和解读。 Java8 其它更新,字符串&base64等 处理数值 处理文件 查找文件 读写文件 java.util.Random java.util.Base64 参考 # 处理数值 Java8添加了对无符号数的额外支持。Java中的数值总是有符号的，例如，让我们来观察Integer: int可表示最多2 ** 32个数...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E5%85%B6%E5%AE%83%E6%9B%B4%E6%96%B0_%E5%AD%97%E7%AC%A6%E4%B8%B2_base64%E7%AD%89.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"Java8 其它更新,字符串&base64等"}],["meta",{"property":"og:description","content":"本文对Java 8 其它更新介绍和解读。 Java8 其它更新,字符串&base64等 处理数值 处理文件 查找文件 读写文件 java.util.Random java.util.Base64 参考 # 处理数值 Java8添加了对无符号数的额外支持。Java中的数值总是有符号的，例如，让我们来观察Integer: int可表示最多2 ** 32个数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-21T03:29:54.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Java8 新特性"}],["meta",{"property":"article:published_time","content":"2024-03-17T15:06:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-21T03:29:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java8 其它更新,字符串&base64等\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-17T15:06:55.000Z\\",\\"dateModified\\":\\"2024-03-21T03:29:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 处理数值","slug":"处理数值","link":"#处理数值","children":[]},{"level":2,"title":"# 处理文件","slug":"处理文件","link":"#处理文件","children":[]},{"level":2,"title":"# 查找文件","slug":"查找文件","link":"#查找文件","children":[]},{"level":2,"title":"# 读写文件","slug":"读写文件","link":"#读写文件","children":[]},{"level":2,"title":"# java.util.Random","slug":"java-util-random","link":"#java-util-random","children":[]},{"level":2,"title":"# java.util.Base64","slug":"java-util-base64","link":"#java-util-base64","children":[]},{"level":2,"title":"# 参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1710139794000,"updatedTime":1710991794000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":8.63,"words":2589},"filePathRelative":"posts/Java/Java8NewFeatures/Java8 其它更新,字符串&base64等.md","localizedDate":"2024年3月17日","excerpt":"<blockquote>\\n<p>本文对Java 8 其它更新介绍和解读。</p>\\n</blockquote>\\n<ul>\\n<li>Java8 其它更新,字符串&amp;base64等\\n<ul>\\n<li><a href=\\"#%E5%A4%84%E7%90%86%E6%95%B0%E5%80%BC\\">处理数值</a></li>\\n<li><a href=\\"#%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6\\">处理文件</a></li>\\n<li><a href=\\"#%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6\\">查找文件</a></li>\\n<li><a href=\\"#%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6\\">读写文件</a></li>\\n<li><a href=\\"#javautilrandom\\">java.util.Random</a></li>\\n<li><a href=\\"#javautilbase64\\">java.util.Base64</a></li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83\\">参考</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{g as comp,h as data};
