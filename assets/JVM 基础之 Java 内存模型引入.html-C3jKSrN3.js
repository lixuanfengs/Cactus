import{_ as e,e as s,o as l,c as i,b as a,g as p,f as o,h as t}from"./app-yldtm0wT.js";const r={},c=t(`<blockquote><p>很多人都无法区分Java内存模型和JVM内存结构，以及Java内存模型与物理内存之间的关系。本文从堆栈角度引入JMM，然后介绍JMM和物理内存之间的关系, 为后面<code>JMM详解</code>, <code>JVM 内存结构详解</code>, <code>Java 对象模型详解</code>等铺垫。</p></blockquote><ul><li>JVM 基础之 Java 内存模型引入 <ul><li>JMM引入 <ul><li><a href="#%E4%BB%8E%E5%A0%86%E6%A0%88%E8%AF%B4%E8%B5%B7">从堆栈说起</a></li><li><a href="#%E5%A0%86%E6%A0%88%E9%87%8C%E9%9D%A2%E6%94%BE%E4%BA%86%E4%BB%80%E4%B9%88">堆栈里面放了什么? </a></li><li><a href="#%E7%BA%BF%E7%A8%8B%E6%A0%88%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AE%E5%A0%86%E4%B8%8A%E5%AF%B9%E8%B1%A1">线程栈如何访问堆上对象? </a></li><li><a href="#%E7%BA%BF%E7%A8%8B%E6%A0%88%E8%AE%BF%E9%97%AE%E5%A0%86%E7%A4%BA%E4%BE%8B">线程栈访问堆示例</a></li></ul></li><li>JMM与硬件内存结构关系 <ul><li><a href="#%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B">硬件内存结构简介</a></li><li><a href="#jmm%E4%B8%8E%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E8%BF%9E%E6%8E%A5---%E5%BC%95%E5%85%A5">JMM与硬件内存连接 - 引入</a></li><li><a href="#jmm%E4%B8%8E%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E8%BF%9E%E6%8E%A5---%E5%AF%B9%E8%B1%A1%E5%85%B1%E4%BA%AB%E5%90%8E%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7">JMM与硬件内存连接 - 对象共享后的可见性</a></li><li><a href="#jmm%E4%B8%8E%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E8%BF%9E%E6%8E%A5---%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6">JMM与硬件内存连接 - 竞态条件</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="jmm引入" tabindex="-1"><a class="header-anchor" href="#jmm引入"><span><a href="#jmm%E5%BC%95%E5%85%A5">#</a> JMM引入</span></a></h2><h3 id="从堆栈说起" tabindex="-1"><a class="header-anchor" href="#从堆栈说起"><span><a href="#%E4%BB%8E%E5%A0%86%E6%A0%88%E8%AF%B4%E8%B5%B7">#</a> 从堆栈说起</span></a></h3><p>JVM内部使用的Java内存模型在线程栈和堆之间划分内存。 此图从逻辑角度说明了Java内存模型：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="堆栈里面放了什么" tabindex="-1"><a class="header-anchor" href="#堆栈里面放了什么"><span><a href="#%E5%A0%86%E6%A0%88%E9%87%8C%E9%9D%A2%E6%94%BE%E4%BA%86%E4%BB%80%E4%B9%88">#</a> 堆栈里面放了什么?</span></a></h3><p>线程堆栈还包含正在执行的每个方法的所有局部变量(调用堆栈上的所有方法)。 线程只能访问它自己的线程堆栈。 由线程创建的局部变量对于创建它的线程以外的所有其他线程是不可见的。 即使两个线程正在执行完全相同的代码，两个线程仍将在每个自己的线程堆栈中创建该代码的局部变量。 因此，每个线程都有自己的每个局部变量的版本。</p><p>基本类型的所有局部变量(boolean，byte，short，char，int，long，float，double)完全存储在线程堆栈中，因此对其他线程不可见。 一个线程可以将一个基本类型变量的副本传递给另一个线程，但它不能共享原始局部变量本身。</p><p>堆包含了在Java应用程序中创建的所有对象，无论创建该对象的线程是什么。 这包括基本类型的包装类(例如Byte，Integer，Long等)。 无论是创建对象并将其分配给局部变量，还是创建为另一个对象的成员变量，该对象仍然存储在堆上。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>局部变量可以是基本类型，在这种情况下，它完全保留在线程堆栈上。</p><p>局部变量也可以是对象的引用。 在这种情况下，引用(局部变量)存储在线程堆栈中，但是对象本身存储在堆(Heap)上。</p><p>对象的成员变量与对象本身一起存储在堆上。 当成员变量是基本类型时，以及它是对象的引用时都是如此。</p><p>静态类变量也与类定义一起存储在堆上。</p><h3 id="线程栈如何访问堆上对象" tabindex="-1"><a class="header-anchor" href="#线程栈如何访问堆上对象"><span><a href="#%E7%BA%BF%E7%A8%8B%E6%A0%88%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AE%E5%A0%86%E4%B8%8A%E5%AF%B9%E8%B1%A1">#</a> 线程栈如何访问堆上对象?</span></a></h3><p>所有具有对象引用的线程都可以访问堆上的对象。 当一个线程有权访问一个对象时，它也可以访问该对象的成员变量。 如果两个线程同时在同一个对象上调用一个方法，它们都可以访问该对象的成员变量，但每个线程都有自己的局部变量副本。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>两个线程有一组局部变量。 其中一个局部变量(局部变量2)指向堆上的共享对象(对象3)。 两个线程各自对同一对象具有不同的引用。 它们的引用是局部变量，因此存储在每个线程的线程堆栈中(在每个线程堆栈上)。 但是，这两个不同的引用指向堆上的同一个对象。</p><p>注意共享对象(对象3)如何将对象2和对象4作为成员变量引用(由对象3到对象2和对象4的箭头所示)。 通过对象3中的这些成员变量引用，两个线程可以访问对象2和对象4.</p><p>该图还显示了一个局部变量，该变量指向堆上的两个不同对象。 在这种情况下，引用指向两个不同的对象(对象1和对象5)，而不是同一个对象。 理论上，如果两个线程都引用了两个对象，则两个线程都可以访问对象1和对象5。 但是在上图中，每个线程只引用了两个对象中的一个。</p><h3 id="线程栈访问堆示例" tabindex="-1"><a class="header-anchor" href="#线程栈访问堆示例"><span><a href="#%E7%BA%BF%E7%A8%8B%E6%A0%88%E8%AE%BF%E9%97%AE%E5%A0%86%E7%A4%BA%E4%BE%8B">#</a> 线程栈访问堆示例</span></a></h3><p>那么，什么样的Java代码可以导致上面的内存图? 好吧，代码就像下面的代码一样简单：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyRunnable</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Runnable</span><span style="color:#E06C75;">() </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        methodOne</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> methodOne</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> localVariable1</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 45</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        MySharedObject</span><span style="color:#E06C75;"> localVariable2</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">            MySharedObject</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">sharedInstance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //... do more with local variables.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">        methodTwo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> methodTwo</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Integer</span><span style="color:#E06C75;"> localVariable1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Integer</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">99</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //... do more with local variable.</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MySharedObject</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //static variable pointing to instance of MySharedObject</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> MySharedObject</span><span style="color:#E06C75;"> sharedInstance </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> MySharedObject</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //member variables pointing to two objects on the heap</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> Integer</span><span style="color:#E06C75;"> object2 </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Integer</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">22</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> Integer</span><span style="color:#E06C75;"> object4 </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Integer</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">44</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> member1 </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 12345</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> member1 </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 67890</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果两个线程正在执行run()方法，则前面显示的图表将是结果。 run()方法调用methodOne()，methodOne()调用methodTwo()。</p><p>methodOne()声明一个局部基本类型变量(类型为int的localVariable1)和一个局部变量，它是一个对象引用(localVariable2)。</p><p>执行methodOne()的每个线程将在各自的线程堆栈上创建自己的localVariable1和localVariable2副本。 localVariable1变量将完全相互分离，只存在于每个线程的线程堆栈中。 一个线程无法看到另一个线程对其localVariable1副本所做的更改。</p><p>执行methodOne()的每个线程也将创建自己的localVariable2副本。 但是，localVariable2的两个不同副本最终都指向堆上的同一个对象。 代码将localVariable2设置为指向静态变量引用的对象。 静态变量只有一个副本，此副本存储在堆上。 因此，localVariable2的两个副本最终都指向静态变量指向的MySharedObject的同一个实例。 MySharedObject实例也存储在堆上。 它对应于上图中的对象3。</p><p>注意MySharedObject类还包含两个成员变量。 成员变量本身与对象一起存储在堆上。 两个成员变量指向另外两个Integer对象。 这些Integer对象对应于上图中的Object 2和Object 4。</p><p>另请注意methodTwo()如何创建名为localVariable1的局部变量。 此局部变量是对Integer对象的对象引用。 该方法将localVariable1引用设置为指向新的Integer实例。 localVariable1引用将存储在执行methodTwo()的每个线程的一个副本中。 实例化的两个Integer对象将存储在堆上，但由于该方法每次执行该方法时都会创建一个新的Integer对象，因此执行此方法的两个线程将创建单独的Integer实例。 在methodTwo()中创建的Integer对象对应于上图中的Object 1和Object 5。</p><p>另请注意类型为long的MySharedObject类中的两个成员变量，它们是基本类型。 由于这些变量是成员变量，因此它们仍与对象一起存储在堆上。 只有局部变量存储在线程堆栈中。</p><h2 id="jmm与硬件内存结构关系" tabindex="-1"><a class="header-anchor" href="#jmm与硬件内存结构关系"><span><a href="#jmm%E4%B8%8E%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB">#</a> JMM与硬件内存结构关系</span></a></h2><h3 id="硬件内存结构简介" tabindex="-1"><a class="header-anchor" href="#硬件内存结构简介"><span><a href="#%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B">#</a> 硬件内存结构简介</span></a></h3><p>现代硬件内存架构与内部Java内存模型略有不同。 了解硬件内存架构也很重要，以了解Java内存模型如何与其一起工作。 本节介绍了常见的硬件内存架构，后面的部分将介绍Java内存模型如何与其配合使用。</p><p>这是现代计算机硬件架构的简化图：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>现代计算机通常有2个或更多CPU。 其中一些CPU也可能有多个内核。 关键是，在具有2个或更多CPU的现代计算机上，可以同时运行多个线程。 每个CPU都能够在任何给定时间运行一个线程。 这意味着如果您的Java应用程序是多线程的，线程真的在可能同时运行.</p><p>每个CPU基本上都包含一组在CPU内存中的寄存器。 CPU可以在这些寄存器上执行的操作比在主存储器中对变量执行的操作快得多。 这是因为CPU可以比访问主存储器更快地访问这些寄存器。</p><p>每个CPU还可以具有CPU高速缓存存储器层。 事实上，大多数现代CPU都有一些大小的缓存存储层。 CPU可以比主存储器更快地访问其高速缓存存储器，但通常不会像访问其内部寄存器那样快。 因此，CPU高速缓存存储器介于内部寄存器和主存储器的速度之间。 某些CPU可能有多个缓存层(级别1和级别2)，但要了解Java内存模型如何与内存交互，这一点并不重要。 重要的是要知道CPU可以有某种缓存存储层。</p><p>计算机还包含主存储区(RAM)。 所有CPU都可以访问主内存。 主存储区通常比CPU的高速缓存存储器大得多。同时访问速度也就较慢.</p><p>通常，当CPU需要访问主存储器时，它会将部分主存储器读入其CPU缓存。 它甚至可以将部分缓存读入其内部寄存器，然后对其执行操作。 当CPU需要将结果写回主存储器时，它会将值从其内部寄存器刷新到高速缓冲存储器，并在某些时候将值刷新回主存储器。</p><h3 id="jmm与硬件内存连接-引入" tabindex="-1"><a class="header-anchor" href="#jmm与硬件内存连接-引入"><span><a href="#jmm%E4%B8%8E%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E8%BF%9E%E6%8E%A5-%E5%BC%95%E5%85%A5">#</a> JMM与硬件内存连接 - 引入</span></a></h3><p>如前所述，Java内存模型和硬件内存架构是不同的。 硬件内存架构不区分线程堆栈和堆。 在硬件上，线程堆栈和堆都位于主存储器中。 线程堆栈和堆的一部分有时可能存在于CPU高速缓存和内部CPU寄存器中。 这在图中说明：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当对象和变量可以存储在计算机的各种不同存储区域中时，可能会出现某些问题。 两个主要问题是：</p><ul><li>Visibility of thread updates (writes) to shared variables.</li><li>Race conditions when reading, checking and writing shared variables. 以下各节将解释这两个问题。</li></ul><h3 id="jmm与硬件内存连接-对象共享后的可见性" tabindex="-1"><a class="header-anchor" href="#jmm与硬件内存连接-对象共享后的可见性"><span><a href="#jmm%E4%B8%8E%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E8%BF%9E%E6%8E%A5-%E5%AF%B9%E8%B1%A1%E5%85%B1%E4%BA%AB%E5%90%8E%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7">#</a> JMM与硬件内存连接 - 对象共享后的可见性</span></a></h3><p>如果两个或多个线程共享一个对象，而没有正确使用volatile声明或同步，则一个线程对共享对象的更新可能对其他线程不可见。</p><p>想象一下，共享对象最初存储在主存储器中。 然后，在CPU上运行的线程将共享对象读入其CPU缓存中。 它在那里对共享对象进行了更改。 只要CPU缓存尚未刷新回主内存，共享对象的更改版本对于在其他CPU上运行的线程是不可见的。 这样，每个线程最终都可能拥有自己的共享对象副本，每个副本都位于不同的CPU缓存中。</p><p>下图描绘了该情况。 在左CPU上运行的一个线程将共享对象复制到其CPU缓存中，并将其count变量更改为2.对于在右边的CPU上运行的其他线程，此更改不可见，因为计数更新尚未刷新回主内存中.</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>要解决此问题，您可以使用Java的volatile关键字。 volatile关键字可以确保直接从主内存读取给定变量，并在更新时始终写回主内存。</p><h3 id="jmm与硬件内存连接-竞态条件" tabindex="-1"><a class="header-anchor" href="#jmm与硬件内存连接-竞态条件"><span><a href="#jmm%E4%B8%8E%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E8%BF%9E%E6%8E%A5-%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6">#</a> JMM与硬件内存连接 - 竞态条件</span></a></h3><p>如果两个或多个线程共享一个对象，并且多个线程更新该共享对象中的变量，则可能会出现竞态。</p><p>想象一下，如果线程A将共享对象的变量计数读入其CPU缓存中。 想象一下，线程B也做同样的事情，但是进入不同的CPU缓存。 现在，线程A将一个添加到count，而线程B执行相同的操作。 现在var1已经增加了两次，每个CPU缓存一次。</p><p>如果这些增量是按先后顺序执行的，则变量计数将增加两次并将原始值+ 2写回主存储器。</p><p>但是，两个增量同时执行而没有适当的同步。 无论线程A和B中哪一个将其更新后的计数版本写回主存储器，更新的值将仅比原始值高1，尽管有两个增量。</p><p>该图说明了如上所述的竞争条件问题的发生：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>要解决此问题，您可以使用Java synchronized块。 同步块保证在任何给定时间只有一个线程可以进入代码的给定关键部分。 同步块还保证在同步块内访问的所有变量都将从主存储器中读入，当线程退出同步块时，所有更新的变量将再次刷新回主存储器，无论变量是不是声明为volatile</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</span></a></h2>`,61),E={href:"http://tutorials.jenkov.com/java-concurrency/java-memory-model.html",target:"_blank",rel:"noopener noreferrer"};function B(m,d){const n=s("ExternalLinkIcon");return l(),i("div",null,[c,a("ul",null,[a("li",null,[a("a",E,[p("http://tutorials.jenkov.com/java-concurrency/java-memory-model.html"),o(n)])])])])}const v=e(r,[["render",B],["__file","JVM 基础之 Java 内存模型引入.html.vue"]]),g=JSON.parse(`{"path":"/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%20Java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%BC%95%E5%85%A5.html","title":"JVM 基础之 Java 内存模型引入","lang":"zh-CN","frontmatter":{"title":"JVM 基础之 Java 内存模型引入","subtitle":"Java，Java开发，Java 体系","date":"2024-03-17T17:08:41.000Z","category":["Java"],"tag":["Java","JVM"],"order":6,"description":"很多人都无法区分Java内存模型和JVM内存结构，以及Java内存模型与物理内存之间的关系。本文从堆栈角度引入JMM，然后介绍JMM和物理内存之间的关系, 为后面JMM详解, JVM 内存结构详解, Java 对象模型详解等铺垫。 JVM 基础之 Java 内存模型引入 JMM引入 从堆栈说起 堆栈里面放了什么? 线程栈如何访问堆上对象? 线程栈访问堆...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%20Java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%BC%95%E5%85%A5.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"JVM 基础之 Java 内存模型引入"}],["meta",{"property":"og:description","content":"很多人都无法区分Java内存模型和JVM内存结构，以及Java内存模型与物理内存之间的关系。本文从堆栈角度引入JMM，然后介绍JMM和物理内存之间的关系, 为后面JMM详解, JVM 内存结构详解, Java 对象模型详解等铺垫。 JVM 基础之 Java 内存模型引入 JMM引入 从堆栈说起 堆栈里面放了什么? 线程栈如何访问堆上对象? 线程栈访问堆..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-21T03:29:54.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2024-03-17T17:08:41.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-21T03:29:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM 基础之 Java 内存模型引入\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-1.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-2.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-3.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-4.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-5.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-6.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-7.png\\"],\\"datePublished\\":\\"2024-03-17T17:08:41.000Z\\",\\"dateModified\\":\\"2024-03-21T03:29:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# JMM引入","slug":"jmm引入","link":"#jmm引入","children":[{"level":3,"title":"# 从堆栈说起","slug":"从堆栈说起","link":"#从堆栈说起","children":[]},{"level":3,"title":"# 堆栈里面放了什么?","slug":"堆栈里面放了什么","link":"#堆栈里面放了什么","children":[]},{"level":3,"title":"# 线程栈如何访问堆上对象?","slug":"线程栈如何访问堆上对象","link":"#线程栈如何访问堆上对象","children":[]},{"level":3,"title":"# 线程栈访问堆示例","slug":"线程栈访问堆示例","link":"#线程栈访问堆示例","children":[]}]},{"level":2,"title":"# JMM与硬件内存结构关系","slug":"jmm与硬件内存结构关系","link":"#jmm与硬件内存结构关系","children":[{"level":3,"title":"# 硬件内存结构简介","slug":"硬件内存结构简介","link":"#硬件内存结构简介","children":[]},{"level":3,"title":"# JMM与硬件内存连接 - 引入","slug":"jmm与硬件内存连接-引入","link":"#jmm与硬件内存连接-引入","children":[]},{"level":3,"title":"# JMM与硬件内存连接 - 对象共享后的可见性","slug":"jmm与硬件内存连接-对象共享后的可见性","link":"#jmm与硬件内存连接-对象共享后的可见性","children":[]},{"level":3,"title":"# JMM与硬件内存连接 - 竞态条件","slug":"jmm与硬件内存连接-竞态条件","link":"#jmm与硬件内存连接-竞态条件","children":[]}]},{"level":2,"title":"# 参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1710139794000,"updatedTime":1710991794000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":11.76,"words":3527},"filePathRelative":"posts/Java/JVM/JVM 基础之 Java 内存模型引入.md","localizedDate":"2024年3月17日","excerpt":"<blockquote>\\n<p>很多人都无法区分Java内存模型和JVM内存结构，以及Java内存模型与物理内存之间的关系。本文从堆栈角度引入JMM，然后介绍JMM和物理内存之间的关系, 为后面<code>JMM详解</code>, <code>JVM 内存结构详解</code>, <code>Java 对象模型详解</code>等铺垫。</p>\\n</blockquote>\\n<ul>\\n<li>JVM 基础之 Java 内存模型引入\\n<ul>\\n<li>JMM引入\\n<ul>\\n<li><a href=\\"#%E4%BB%8E%E5%A0%86%E6%A0%88%E8%AF%B4%E8%B5%B7\\">从堆栈说起</a></li>\\n<li><a href=\\"#%E5%A0%86%E6%A0%88%E9%87%8C%E9%9D%A2%E6%94%BE%E4%BA%86%E4%BB%80%E4%B9%88\\">堆栈里面放了什么? </a></li>\\n<li><a href=\\"#%E7%BA%BF%E7%A8%8B%E6%A0%88%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AE%E5%A0%86%E4%B8%8A%E5%AF%B9%E8%B1%A1\\">线程栈如何访问堆上对象? </a></li>\\n<li><a href=\\"#%E7%BA%BF%E7%A8%8B%E6%A0%88%E8%AE%BF%E9%97%AE%E5%A0%86%E7%A4%BA%E4%BE%8B\\">线程栈访问堆示例</a></li>\\n</ul>\\n</li>\\n<li>JMM与硬件内存结构关系\\n<ul>\\n<li><a href=\\"#%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B\\">硬件内存结构简介</a></li>\\n<li><a href=\\"#jmm%E4%B8%8E%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E8%BF%9E%E6%8E%A5---%E5%BC%95%E5%85%A5\\">JMM与硬件内存连接 - 引入</a></li>\\n<li><a href=\\"#jmm%E4%B8%8E%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E8%BF%9E%E6%8E%A5---%E5%AF%B9%E8%B1%A1%E5%85%B1%E4%BA%AB%E5%90%8E%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7\\">JMM与硬件内存连接 - 对象共享后的可见性</a></li>\\n<li><a href=\\"#jmm%E4%B8%8E%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E8%BF%9E%E6%8E%A5---%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6\\">JMM与硬件内存连接 - 竞态条件</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{v as comp,g as data};
