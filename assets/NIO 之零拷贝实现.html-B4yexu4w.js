import{_ as s,o as n,c as a,h as l}from"./app-UW0BsEad.js";const e={},p=l(`<blockquote><p>这里转一篇Java NIO 零拷贝的实现文章，在此之前建议先理解什么是Linux中零拷贝，可以先看这篇文章。本文从源码着手分析了 Java NIO 对零拷贝的实现，主要包括基于内存映射（mmap）方式的 MappedByteBuffer 以及基于 sendfile 方式的 FileChannel。最后在篇末简单的阐述了一下 Netty 中的零拷贝机制，以及 RocketMQ 和 Kafka 两种消息队列在零拷贝实现方式上的区别。@pdai</p></blockquote><ul><li>NIO 之零拷贝实现 <ul><li>Java NIO零拷贝 <ul><li><a href="#mappedbytebuffer">MappedByteBuffer</a></li><li><a href="#directbytebuffer">DirectByteBuffer</a></li><li><a href="#filechannel">FileChannel</a></li></ul></li><li>其它的零拷贝实现 <ul><li><a href="#netty%E9%9B%B6%E6%8B%B7%E8%B4%9D">Netty零拷贝</a></li><li><a href="#rocketmq%E5%92%8Ckafka%E5%AF%B9%E6%AF%94">RocketMQ和Kafka对比</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="java-nio零拷贝" tabindex="-1"><a class="header-anchor" href="#java-nio零拷贝"><span><a href="#java-nio%E9%9B%B6%E6%8B%B7%E8%B4%9D">#</a> Java NIO零拷贝</span></a></h2><p>在 Java NIO 中的<strong>通道（Channel）*<em>就相当于操作系统的*<em>内核空间</em></em>（kernel space）的缓冲区，而</strong>缓冲区**（Buffer）对应的相当于操作系统的<strong>用户空间</strong>（user space）中的<strong>用户缓冲区</strong>（user buffer）。</p><ul><li><strong>通道</strong>（Channel）是全双工的（双向传输），它既可能是读缓冲区（read buffer），也可能是网络缓冲区（socket buffer）。</li><li><strong>缓冲区</strong>（Buffer）分为堆内存（HeapBuffer）和堆外内存（DirectBuffer），这是通过 malloc() 分配出来的用户态内存。</li></ul><p>堆外内存（DirectBuffer）在使用后需要应用程序手动回收，而堆内存（HeapBuffer）的数据在 GC 时可能会被自动回收。因此，在使用 HeapBuffer 读写数据时，为了避免缓冲区数据因为 GC 而丢失，NIO 会先把 HeapBuffer 内部的数据拷贝到一个临时的 DirectBuffer 中的本地内存（native memory），这个拷贝涉及到 <code>sun.misc.Unsafe.copyMemory()</code> 的调用，背后的实现原理与 <code>memcpy()</code> 类似。 最后，将临时生成的 DirectBuffer 内部的数据的内存地址传给 I/O 调用函数，这样就避免了再去访问 Java 对象处理 I/O 读写。</p><h3 id="mappedbytebuffer" tabindex="-1"><a class="header-anchor" href="#mappedbytebuffer"><span><a href="#mappedbytebuffer">#</a> MappedByteBuffer</span></a></h3><p>MappedByteBuffer 是 NIO 基于**内存映射（mmap）**这种零拷贝方式的提供的一种实现，它继承自 ByteBuffer。FileChannel 定义了一个 map() 方法，它可以把一个文件从 position 位置开始的 size 大小的区域映射为内存映像文件。抽象方法 map() 方法在 FileChannel 中的定义如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> abstract</span><span style="color:#E5C07B;"> MappedByteBuffer</span><span style="color:#61AFEF;"> map</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">MapMode</span><span style="color:#E06C75;"> mode</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> position</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> size)</span></span>
<span class="line"><span style="color:#E06C75;">        throws IOException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>mode</strong>：限定内存映射区域（MappedByteBuffer）对内存映像文件的访问模式，包括只可读（READ_ONLY）、可读可写（READ_WRITE）和写时拷贝（PRIVATE）三种模式。</li><li><strong>position</strong>：文件映射的起始地址，对应内存映射区域（MappedByteBuffer）的首地址。</li><li><strong>size</strong>：文件映射的字节长度，从 position 往后的字节数，对应内存映射区域（MappedByteBuffer）的大小。</li></ul><p>MappedByteBuffer 相比 ByteBuffer 新增了 fore()、load() 和 isLoad() 三个重要的方法：</p><ul><li><strong>fore()</strong>：对于处于 READ_WRITE 模式下的缓冲区，把对缓冲区内容的修改强制刷新到本地文件。</li><li><strong>load()</strong>：将缓冲区的内容载入物理内存中，并返回这个缓冲区的引用。</li><li><strong>isLoaded()</strong>：如果缓冲区的内容在物理内存中，则返回 true，否则返回 false。</li></ul><p>下面给出一个利用 MappedByteBuffer 对文件进行读写的使用示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> CONTENT </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;Zero copy implemented by MappedByteBuffer&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> FILE_NAME </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;/mmap.txt&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> CHARSET </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;UTF-8&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>写文件数据</strong>：打开文件通道 fileChannel 并提供读权限、写权限和数据清空权限，通过 fileChannel 映射到一个可写的内存缓冲区 mappedByteBuffer，将目标数据写入 mappedByteBuffer，通过 <code>force()</code> 方法把缓冲区更改的内容强制写入本地文件。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> writeToFileByMappedByteBuffer</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    Path</span><span style="color:#E06C75;"> path </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getClass</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getResource</span><span style="color:#ABB2BF;">(FILE_NAME).</span><span style="color:#61AFEF;">getPath</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">    byte</span><span style="color:#E06C75;">[] bytes </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> CONTENT</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getBytes</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Charset</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forName</span><span style="color:#ABB2BF;">(CHARSET));</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">FileChannel</span><span style="color:#E06C75;"> fileChannel </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> FileChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(path, </span><span style="color:#E5C07B;">StandardOpenOption</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">READ</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">            StandardOpenOption</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">WRITE</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">StandardOpenOption</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">TRUNCATE_EXISTING</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        MappedByteBuffer</span><span style="color:#E06C75;"> mappedByteBuffer </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> fileChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(READ_WRITE, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">bytes</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (mappedByteBuffer </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            mappedByteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(bytes);</span></span>
<span class="line"><span style="color:#E5C07B;">            mappedByteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">force</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">IOException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>读文件数据</strong>：打开文件通道 fileChannel 并提供只读权限，通过 fileChannel 映射到一个只可读的内存缓冲区 mappedByteBuffer，读取 mappedByteBuffer 中的字节数组即可得到文件数据。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> readFromFileByMappedByteBuffer</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    Path</span><span style="color:#E06C75;"> path </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getClass</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getResource</span><span style="color:#ABB2BF;">(FILE_NAME).</span><span style="color:#61AFEF;">getPath</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> length </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> CONTENT</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getBytes</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Charset</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forName</span><span style="color:#ABB2BF;">(CHARSET)).</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">FileChannel</span><span style="color:#E06C75;"> fileChannel </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> FileChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(path, </span><span style="color:#E5C07B;">StandardOpenOption</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">READ</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        MappedByteBuffer</span><span style="color:#E06C75;"> mappedByteBuffer </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> fileChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(READ_ONLY, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, length);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (mappedByteBuffer </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            byte</span><span style="color:#E06C75;">[] bytes </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;">[length]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            mappedByteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(bytes);</span></span>
<span class="line"><span style="color:#E5C07B;">            String</span><span style="color:#E06C75;"> content </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> String</span><span style="color:#E06C75;">(bytes</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> StandardCharsets</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">UTF_8</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">            assertEquals</span><span style="color:#E06C75;">(content</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;Zero copy implemented by MappedByteBuffer&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">IOException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面介绍 <code>map()</code> 方法的<strong>底层实现原理</strong>。<code>map()</code> 方法是 <code>java.nio.channels.FileChannel</code> 的抽象方法，由子类 <code>sun.nio.ch.FileChannelImpl.java</code> 实现，下面是和内存映射相关的核心代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> MappedByteBuffer</span><span style="color:#61AFEF;"> map</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">MapMode</span><span style="color:#E06C75;"> mode</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> position</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> size) throws IOException {</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> pagePosition </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)(position </span><span style="color:#56B6C2;">%</span><span style="color:#E06C75;"> allocationGranularity)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> mapPosition </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> position </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> pagePosition</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> mapSize </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> size </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> pagePosition</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        addr </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> map0</span><span style="color:#E06C75;">(imode</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> mapPosition</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> mapSize)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">OutOfMemoryError</span><span style="color:#E06C75;font-style:italic;"> x</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">gc</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> y</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">interrupt</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            addr </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> map0</span><span style="color:#E06C75;">(imode</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> mapPosition</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> mapSize)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">OutOfMemoryError</span><span style="color:#E06C75;font-style:italic;"> y</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IOException</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;Map failed&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> y)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> isize </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)size</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    Unmapper</span><span style="color:#E06C75;"> um </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Unmapper</span><span style="color:#E06C75;">(addr</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> mapSize</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> isize</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> mfd)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> ((</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">writable) </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> (imode </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> MAP_RO)) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> Util</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newMappedByteBufferR</span><span style="color:#ABB2BF;">(isize, addr </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> pagePosition, mfd, um);</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> Util</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newMappedByteBuffer</span><span style="color:#ABB2BF;">(isize, addr </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> pagePosition, mfd, um);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>map() 方法通过本地方法 map0() 为文件分配一块虚拟内存，作为它的内存映射区域，然后返回这块内存映射区域的起始地址。</p><ul><li>文件映射需要在 Java 堆中创建一个 MappedByteBuffer 的实例。如果第一次文件映射导致 OOM，则手动触发垃圾回收，休眠 100ms 后再尝试映射，如果失败则抛出异常。</li><li>通过 Util 的 newMappedByteBuffer （可读可写）方法或者 newMappedByteBufferR（仅读） 方法方法反射创建一个 DirectByteBuffer 实例，其中 DirectByteBuffer 是 MappedByteBuffer 的子类。</li></ul><p><code>map()</code> 方法返回的是内存映射区域的起始地址，通过（<strong>起始地址 + 偏移量</strong>）就可以获取指定内存的数据。这样一定程度上替代了 <code>read()</code> 或 <code>write()</code> 方法，底层直接采用 <code>sun.misc.Unsafe</code>类的 <code>getByte()</code> 和 <code>putByte()</code> 方法对数据进行读写。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> native</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> map0</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> prot</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> position</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> mapSize) throws IOException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面是本地方法（native method）map0 的定义，它通过 JNI（Java Native Interface）调用底层 C 的实现，这个 native 函数（Java_sun_nio_ch_FileChannelImpl_map0）的实现位于 JDK 源码包下的 <code>native/sun/nio/ch/FileChannelImpl.c</code>这个源文件里面。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">JNIEXPORT jlong JNICALL</span></span>
<span class="line"><span style="color:#61AFEF;">Java_sun_nio_ch_FileChannelImpl_map0</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">env</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jobject </span><span style="color:#E06C75;font-style:italic;">this</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                                     jint </span><span style="color:#E06C75;font-style:italic;">prot</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jlong </span><span style="color:#E06C75;font-style:italic;">off</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jlong </span><span style="color:#E06C75;font-style:italic;">len</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    void</span><span style="color:#C678DD;"> *</span><span style="color:#ABB2BF;">mapAddress </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    jobject fdo </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">env)-&gt;</span><span style="color:#61AFEF;">GetObjectField</span><span style="color:#ABB2BF;">(env, this, chan_fd);</span></span>
<span class="line"><span style="color:#ABB2BF;">    jint fd </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> fdval</span><span style="color:#ABB2BF;">(env, fdo);</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> protections </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#ABB2BF;"> flags </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (prot </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> sun_nio_ch_FileChannelImpl_MAP_RO) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        protections </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> PROT_READ;</span></span>
<span class="line"><span style="color:#ABB2BF;">        flags </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> MAP_SHARED;</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (prot </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> sun_nio_ch_FileChannelImpl_MAP_RW) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        protections </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> PROT_WRITE </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> PROT_READ;</span></span>
<span class="line"><span style="color:#ABB2BF;">        flags </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> MAP_SHARED;</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (prot </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> sun_nio_ch_FileChannelImpl_MAP_PV) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        protections </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">  PROT_WRITE </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> PROT_READ;</span></span>
<span class="line"><span style="color:#ABB2BF;">        flags </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> MAP_PRIVATE;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    mapAddress </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> mmap64</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#D19A66;">        0</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">                    /* Let OS decide location */</span></span>
<span class="line"><span style="color:#ABB2BF;">        len,</span><span style="color:#7F848E;font-style:italic;">                  /* Number of bytes to map */</span></span>
<span class="line"><span style="color:#ABB2BF;">        protections,</span><span style="color:#7F848E;font-style:italic;">          /* File permissions */</span></span>
<span class="line"><span style="color:#ABB2BF;">        flags,</span><span style="color:#7F848E;font-style:italic;">                /* Changes are shared */</span></span>
<span class="line"><span style="color:#ABB2BF;">        fd,</span><span style="color:#7F848E;font-style:italic;">                   /* File descriptor of mapped file */</span></span>
<span class="line"><span style="color:#ABB2BF;">        off);</span><span style="color:#7F848E;font-style:italic;">                 /* Offset into file */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (mapAddress </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> MAP_FAILED) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (errno </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> ENOMEM) {</span></span>
<span class="line"><span style="color:#61AFEF;">            JNU_ThrowOutOfMemoryError</span><span style="color:#ABB2BF;">(env, </span><span style="color:#98C379;">&quot;Map failed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> IOS_THROWN;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> handle</span><span style="color:#ABB2BF;">(env, </span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Map failed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> ((jlong) (</span><span style="color:#C678DD;">unsigned</span><span style="color:#C678DD;"> long</span><span style="color:#ABB2BF;">) mapAddress);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出 map0() 函数最终是通过 <code>mmap64()</code> 这个函数对 Linux 底层内核发出内存映射的调用， <code>mmap64()</code> 函数的原型如下：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;sys/mman.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#C678DD;"> *</span><span style="color:#61AFEF;">mmap64</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#C678DD;"> *</span><span style="color:#E06C75;font-style:italic;">addr</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> size_t</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;font-style:italic;"> prot</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;font-style:italic;"> flags</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;font-style:italic;"> fd</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;"> off64_t</span><span style="color:#E06C75;font-style:italic;"> offset</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面详细介绍一下 <code>mmap64()</code> 函数各个参数的含义以及参数可选值：</p><ul><li><p><code>addr</code>：文件在用户进程空间的内存映射区中的起始地址，是一个建议的参数，通常可设置为 0 或 NULL，此时由内核去决定真实的起始地址。当 + flags 为 MAP_FIXED 时，addr 就是一个必选的参数，即需要提供一个存在的地址。</p></li><li><p><code>len</code>：文件需要进行内存映射的字节长度</p></li><li><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span>prot</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>：控制用户进程对内存映射区的访问权限</p><ul><li><code>PROT_READ</code>：读权限</li><li><code>PROT_WRITE</code>：写权限</li><li><code>PROT_EXEC</code>：执行权限</li><li><code>PROT_NONE</code>：无权限</li></ul></li><li><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span>flags</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>：控制内存映射区的修改是否被多个进程共享</p><ul><li><code>MAP_PRIVATE</code>：对内存映射区数据的修改不会反映到真正的文件，数据修改发生时采用写时复制机制</li><li><code>MAP_SHARED</code>：对内存映射区的修改会同步到真正的文件，修改对共享此内存映射区的进程是可见的</li><li><code>MAP_FIXED</code>：不建议使用，这种模式下 addr 参数指定的必须的提供一个存在的 addr 参数</li></ul></li><li><p><code>fd</code>：文件描述符。每次 map 操作会导致文件的引用计数加 1，每次 unmap 操作或者结束进程会导致引用计数减 1</p></li><li><p><code>offset</code>：文件偏移量。进行映射的文件位置，从文件起始地址向后的位移量</p></li></ul><p>下面总结一下 MappedByteBuffer 的特点和不足之处：</p><ul><li><strong>MappedByteBuffer 使用是堆外的虚拟内存</strong>，因此分配（map）的内存大小不受 JVM 的 -Xmx 参数限制，但是也是有大小限制的。 如果当文件超出 Integer.MAX_VALUE 字节限制时，可以通过 position 参数重新 map 文件后面的内容。</li><li><strong>MappedByteBuffer 在处理大文件时性能的确很高，但也存内存占用、文件关闭不确定等问题</strong>，被其打开的文件只有在垃圾回收的才会被关闭，而且这个时间点是不确定的。</li><li>MappedByteBuffer 提供了文件映射内存的 mmap() 方法，也提供了释放映射内存的 unmap() 方法。然而 unmap() 是 FileChannelImpl 中的私有方法，无法直接显示调用。因此，<strong>用户程序需要通过 Java 反射的调用 sun.misc.Cleaner 类的 clean() 方法手动释放映射占用的内存区域</strong>。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> clean</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">final</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;"> buffer) throws Exception {</span></span>
<span class="line"><span style="color:#E5C07B;">    AccessController</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doPrivileged</span><span style="color:#ABB2BF;">((</span><span style="color:#E5C07B;">PrivilegedAction</span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;">Void</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">) () </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            Method</span><span style="color:#E06C75;"> getCleanerMethod</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getClass</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getMethod</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cleaner&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> Class</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">            getCleanerMethod</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setAccessible</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            Cleaner</span><span style="color:#E06C75;"> cleaner</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (Cleaner) </span><span style="color:#E5C07B;">getCleanerMethod</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">invoke</span><span style="color:#ABB2BF;">(buffer, </span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">            cleaner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clean</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="directbytebuffer" tabindex="-1"><a class="header-anchor" href="#directbytebuffer"><span><a href="#directbytebuffer">#</a> DirectByteBuffer</span></a></h3><p>DirectByteBuffer 的对象引用位于 Java 内存模型的堆里面，JVM 可以对 DirectByteBuffer 的对象进行内存分配和回收管理，一般使用 DirectByteBuffer 的静态方法 allocateDirect() 创建 DirectByteBuffer 实例并分配内存。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> ByteBuffer</span><span style="color:#61AFEF;"> allocateDirect</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> capacity) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> DirectByteBuffer</span><span style="color:#E06C75;">(capacity)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DirectByteBuffer 内部的字节缓冲区位在于堆外的（用户态）直接内存，它是通过 Unsafe 的本地方法 allocateMemory() 进行内存分配，底层调用的是操作系统的 malloc() 函数。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">DirectByteBuffer</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> cap) {</span></span>
<span class="line"><span style="color:#E5C07B;">    super</span><span style="color:#E06C75;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> cap</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> cap)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    boolean</span><span style="color:#E06C75;"> pa </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> VM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isDirectMemoryPageAligned</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> ps </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Bits</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pageSize</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> size </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1L</span><span style="color:#ABB2BF;">, (</span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;">)cap </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> (pa </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> ps </span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">    Bits</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reserveMemory</span><span style="color:#ABB2BF;">(size, cap);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> base </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        base </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allocateMemory</span><span style="color:#ABB2BF;">(size);</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">OutOfMemoryError</span><span style="color:#E06C75;font-style:italic;"> x</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        Bits</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unreserveMemory</span><span style="color:#ABB2BF;">(size, cap);</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setMemory</span><span style="color:#ABB2BF;">(base, size, (</span><span style="color:#C678DD;">byte</span><span style="color:#ABB2BF;">) </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (pa </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E06C75;"> (base </span><span style="color:#56B6C2;">%</span><span style="color:#E06C75;"> ps </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">        address </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> base </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> ps </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> (base </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> (ps </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        address </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> base</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    cleaner </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Cleaner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Deallocator</span><span style="color:#ABB2BF;">(base, size, cap));</span></span>
<span class="line"><span style="color:#E06C75;">    att </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，初始化 DirectByteBuffer 时还会创建一个 Deallocator 线程，并通过 Cleaner 的 freeMemory() 方法来对直接内存进行回收操作，freeMemory() 底层调用的是操作系统的 free() 函数。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Deallocator</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Runnable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> Unsafe</span><span style="color:#E06C75;"> unsafe </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUnsafe</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> address</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> size</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> capacity</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#61AFEF;"> Deallocator</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;font-style:italic;"> address</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">long</span><span style="color:#E06C75;font-style:italic;"> size</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> capacity</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        assert</span><span style="color:#ABB2BF;"> (address </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">address</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> address;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">size</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> size;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">capacity</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> capacity;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (address </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">freeMemory</span><span style="color:#ABB2BF;">(address);</span></span>
<span class="line"><span style="color:#ABB2BF;">        address </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        Bits</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unreserveMemory</span><span style="color:#ABB2BF;">(size, capacity);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于使用 DirectByteBuffer 分配的是系统本地的内存，不在 JVM 的管控范围之内，因此直接内存的回收和堆内存的回收不同，直接内存如果使用不当，很容易造成 OutOfMemoryError。</p><p>说了这么多，那么 DirectByteBuffer 和零拷贝有什么关系？前面有提到在 MappedByteBuffer 进行内存映射时，它的 map() 方法会通过 Util.newMappedByteBuffer() 来创建一个缓冲区实例，初始化的代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#E5C07B;"> MappedByteBuffer</span><span style="color:#61AFEF;"> newMappedByteBuffer</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> size</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> addr</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> FileDescriptor</span><span style="color:#E06C75;"> fd</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">                                            Runnable</span><span style="color:#E06C75;"> unmapper) {</span></span>
<span class="line"><span style="color:#E5C07B;">    MappedByteBuffer</span><span style="color:#E06C75;"> dbb</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (directByteBufferConstructor </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#61AFEF;">        initDBBConstructor</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        dbb </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (MappedByteBuffer)</span><span style="color:#E5C07B;">directByteBufferConstructor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newInstance</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">            new</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">[] { </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Integer</span><span style="color:#ABB2BF;">(size), </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Long</span><span style="color:#ABB2BF;">(addr), fd, unmapper });</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">InstantiationException</span><span style="color:#E06C75;"> | </span><span style="color:#E5C07B;">IllegalAccessException</span><span style="color:#E06C75;"> | </span><span style="color:#E5C07B;">InvocationTargetException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InternalError</span><span style="color:#E06C75;">(e)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> dbb</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> initDBBRConstructor</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    AccessController</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doPrivileged</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> PrivilegedAction</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Void</span><span style="color:#ABB2BF;">&gt;() {</span></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#E5C07B;"> Void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">cl</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Class</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forName</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;java.nio.DirectByteBufferR&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">                Constructor</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">ctor</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> cl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeclaredConstructor</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">                    new</span><span style="color:#E5C07B;"> Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt;[] { </span><span style="color:#E5C07B;">int</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">long</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">FileDescriptor</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">                                    Runnable</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#E5C07B;">                ctor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setAccessible</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                directByteBufferRConstructor </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ctor;</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ClassNotFoundException</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">NoSuchMethodException</span><span style="color:#ABB2BF;"> |</span></span>
<span class="line"><span style="color:#E5C07B;">                     IllegalArgumentException</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">ClassCastException</span><span style="color:#E06C75;font-style:italic;"> x</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InternalError</span><span style="color:#ABB2BF;">(x);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }});</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DirectByteBuffer 是 MappedByteBuffer 的具体实现类。实际上，Util.newMappedByteBuffer() 方法通过反射机制获取 DirectByteBuffer 的构造器，然后创建一个 DirectByteBuffer 的实例，对应的是一个单独用于内存映射的构造方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">protected</span><span style="color:#61AFEF;"> DirectByteBuffer</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> cap</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> addr</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> FileDescriptor</span><span style="color:#E06C75;"> fd</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Runnable</span><span style="color:#E06C75;"> unmapper) {</span></span>
<span class="line"><span style="color:#E5C07B;">    super</span><span style="color:#E06C75;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> cap</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> cap</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> fd)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    address </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> addr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    cleaner </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Cleaner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, unmapper);</span></span>
<span class="line"><span style="color:#E06C75;">    att </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，除了允许分配操作系统的直接内存以外，DirectByteBuffer 本身也具有文件内存映射的功能，这里不做过多说明。我们需要关注的是，DirectByteBuffer 在 MappedByteBuffer 的基础上提供了内存映像文件的随机读取 get() 和写入 write() 的操作。</p><ul><li>内存映像文件的随机读操作</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> byte</span><span style="color:#61AFEF;"> get</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> ((</span><span style="color:#E5C07B;">unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getByte</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">ix</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">nextGetIndex</span><span style="color:#ABB2BF;">()))</span><span style="color:#E06C75;">))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> byte</span><span style="color:#61AFEF;"> get</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> ((</span><span style="color:#E5C07B;">unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getByte</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">ix</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">checkIndex</span><span style="color:#ABB2BF;">(i)))</span><span style="color:#E06C75;">))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>内存映像文件的随机写操作</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> ByteBuffer</span><span style="color:#61AFEF;"> put</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;"> x) {</span></span>
<span class="line"><span style="color:#E5C07B;">    unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putByte</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">ix</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">nextPutIndex</span><span style="color:#ABB2BF;">()), ((x)));</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> ByteBuffer</span><span style="color:#61AFEF;"> put</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;"> x) {</span></span>
<span class="line"><span style="color:#E5C07B;">    unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putByte</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">ix</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">checkIndex</span><span style="color:#ABB2BF;">(i)), ((x)));</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内存映像文件的随机读写都是借助 ix() 方法实现定位的， ix() 方法通过内存映射空间的内存首地址（address）和给定偏移量 i 计算出指针地址，然后由 unsafe 类的 get() 和 put() 方法和对指针指向的数据进行读取或写入。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> ix</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> address </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> ((</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;">)i </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filechannel" tabindex="-1"><a class="header-anchor" href="#filechannel"><span><a href="#filechannel">#</a> FileChannel</span></a></h3><p>FileChannel 是一个用于文件读写、映射和操作的通道，同时它在并发环境下是线程安全的，基于 FileInputStream、FileOutputStream 或者 RandomAccessFile 的 getChannel() 方法可以创建并打开一个文件通道。FileChannel 定义了 transferFrom() 和 transferTo() 两个抽象方法，它通过在通道和通道之间建立连接实现数据传输的。</p><ul><li><code>transferTo()</code>：通过 FileChannel 把文件里面的源数据写入一个 WritableByteChannel 的目的通道。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> abstract</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> transferTo</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> position</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> WritableByteChannel</span><span style="color:#E06C75;"> target)</span></span>
<span class="line"><span style="color:#E06C75;">        throws IOException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>transferFrom()</code>：把一个源通道 ReadableByteChannel 中的数据读取到当前 FileChannel 的文件里面。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> abstract</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> transferFrom</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">ReadableByteChannel</span><span style="color:#E06C75;"> src</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> position</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> count)</span></span>
<span class="line"><span style="color:#E06C75;">        throws IOException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面给出 FileChannel 利用 transferTo() 和 transferFrom() 方法进行数据传输的使用示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> CONTENT </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;Zero copy implemented by FileChannel&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> SOURCE_FILE </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;/source.txt&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> TARGET_FILE </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;/target.txt&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> CHARSET </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;UTF-8&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先在类加载根路径下创建 source.txt 和 target.txt 两个文件，对源文件 source.txt 文件写入初始化数据。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Before</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> setup</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    Path</span><span style="color:#E06C75;"> source </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getClassPath</span><span style="color:#ABB2BF;">(SOURCE_FILE));</span></span>
<span class="line"><span style="color:#C678DD;">    byte</span><span style="color:#E06C75;">[] bytes </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> CONTENT</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getBytes</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Charset</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forName</span><span style="color:#ABB2BF;">(CHARSET));</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">FileChannel</span><span style="color:#E06C75;"> fromChannel </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> FileChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(source, </span><span style="color:#E5C07B;">StandardOpenOption</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">READ</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">            StandardOpenOption</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">WRITE</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">StandardOpenOption</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">TRUNCATE_EXISTING</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        fromChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ByteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wrap</span><span style="color:#ABB2BF;">(bytes));</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">IOException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 transferTo() 方法而言，目的通道 toChannel 可以是任意的单向字节写通道 WritableByteChannel；而对于 transferFrom() 方法而言，源通道 fromChannel 可以是任意的单向字节读通道 ReadableByteChannel。其中，FileChannel、SocketChannel 和 DatagramChannel 等通道实现了 WritableByteChannel 和 ReadableByteChannel 接口，都是同时支持读写的双向通道。为了方便测试，下面给出基于 FileChannel 完成 channel-to-channel 的数据传输示例。</p><p>通过 transferTo() 将 fromChannel 中的数据拷贝到 toChannel</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> transferTo</span><span style="color:#E06C75;">() throws Exception {</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">FileChannel</span><span style="color:#E06C75;"> fromChannel </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> RandomAccessFile</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#61AFEF;">             getClassPath</span><span style="color:#E06C75;">(SOURCE_FILE)</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;rw&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getChannel</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">         FileChannel</span><span style="color:#E06C75;"> toChannel </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> RandomAccessFile</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#61AFEF;">             getClassPath</span><span style="color:#E06C75;">(TARGET_FILE)</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;rw&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getChannel</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> position </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> offset </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> fromChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        fromChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transferTo</span><span style="color:#ABB2BF;">(position, offset, toChannel);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 transferFrom() 将 fromChannel 中的数据拷贝到 toChannel</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> transferFrom</span><span style="color:#E06C75;">() throws Exception {</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">FileChannel</span><span style="color:#E06C75;"> fromChannel </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> RandomAccessFile</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#61AFEF;">             getClassPath</span><span style="color:#E06C75;">(SOURCE_FILE)</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;rw&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getChannel</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">         FileChannel</span><span style="color:#E06C75;"> toChannel </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> RandomAccessFile</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#61AFEF;">             getClassPath</span><span style="color:#E06C75;">(TARGET_FILE)</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;rw&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getChannel</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> position </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> offset </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> fromChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        toChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transferFrom</span><span style="color:#ABB2BF;">(fromChannel, position, offset);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面介绍 transferTo() 和 transferFrom() 方法的底层实现原理，这两个方法也是 java.nio.channels.FileChannel 的抽象方法，由子类 sun.nio.ch.FileChannelImpl.java 实现。transferTo() 和 transferFrom() 底层都是基于 sendfile 实现数据传输的，其中 FileChannelImpl.java 定义了 3 个常量，用于标示当前操作系统的内核是否支持 sendfile 以及 sendfile 的相关特性。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> transferSupported </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> pipeSupported </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> fileSupported </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>transferSupported</code>：用于标记当前的系统内核是否支持 sendfile() 调用，默认为 true。</li><li><code>pipeSupported</code>：用于标记当前的系统内核是否支持文件描述符（fd）基于管道（pipe）的 sendfile() 调用，默认为 true。</li><li><code>fileSupported</code>：用于标记当前的系统内核是否支持文件描述符（fd）基于文件（file）的 sendfile() 调用，默认为 true。</li></ul><p>下面以 transferTo() 的源码实现为例。FileChannelImpl 首先执行 transferToDirectly() 方法，以 sendfile 的零拷贝方式尝试数据拷贝。如果系统内核不支持 sendfile，进一步执行 transferToTrustedChannel() 方法，以 mmap 的零拷贝方式进行内存映射，这种情况下目的通道必须是 FileChannelImpl 或者 SelChImpl 类型。如果以上两步都失败了，则执行 transferToArbitraryChannel() 方法，基于传统的 I/O 方式完成读写，具体步骤是初始化一个临时的 DirectBuffer，将源通道 FileChannel 的数据读取到 DirectBuffer，再写入目的通道 WritableByteChannel 里面。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> transferTo</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> position</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> WritableByteChannel</span><span style="color:#E06C75;"> target)</span></span>
<span class="line"><span style="color:#E06C75;">        throws IOException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 计算文件的大小</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> sz </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> size</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 校验起始位置</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (position </span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> sz)</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> icount </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">(count, </span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 校验偏移量</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> ((sz </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> position) </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> icount)</span></span>
<span class="line"><span style="color:#E06C75;">        icount </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)(sz </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> position)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> ((n </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> transferToDirectly</span><span style="color:#E06C75;">(position</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> icount</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> target)) </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> ((n </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> transferToTrustedChannel</span><span style="color:#E06C75;">(position</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> icount</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> target)) </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> transferToArbitraryChannel</span><span style="color:#E06C75;">(position</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> icount</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> target)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来重点分析一下 transferToDirectly() 方法的实现，也就是 transferTo() 通过 sendfile 实现零拷贝的精髓所在。可以看到，transferToDirectlyInternal() 方法先获取到目的通道 WritableByteChannel 的文件描述符 targetFD，获取同步锁然后执行 transferToDirectlyInternal() 方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> transferToDirectly</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> position</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> icount</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> WritableByteChannel</span><span style="color:#E06C75;"> target)</span></span>
<span class="line"><span style="color:#E06C75;">        throws IOException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 省略从target获取targetFD的过程</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">nd</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transferToDirectlyNeedsPositionLock</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        synchronized</span><span style="color:#E06C75;"> (positionLock) {</span></span>
<span class="line"><span style="color:#C678DD;">            long</span><span style="color:#E06C75;"> pos </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> position</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#61AFEF;"> transferToDirectlyInternal</span><span style="color:#E06C75;">(position</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> icount</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                        target</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> targetFD)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            } </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">                position</span><span style="color:#E06C75;">(pos)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> transferToDirectlyInternal</span><span style="color:#E06C75;">(position</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> icount</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> targetFD)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终由 transferToDirectlyInternal() 调用本地方法 transferTo0() ，尝试以 sendfile 的方式进行数据传输。如果系统内核完全不支持 sendfile，比如 Windows 操作系统，则返回 UNSUPPORTED 并把 transferSupported 标识为 false。如果系统内核不支持 sendfile 的一些特性，比如说低版本的 Linux 内核不支持 DMA gather copy 操作，则返回 UNSUPPORTED_CASE 并把 pipeSupported 或者 fileSupported 标识为 false。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> transferToDirectlyInternal</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> position</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> icount</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">                                        WritableByteChannel</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">                                        FileDescriptor</span><span style="color:#E06C75;"> targetFD) throws IOException {</span></span>
<span class="line"><span style="color:#C678DD;">    assert</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">nd</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transferToDirectlyNeedsPositionLock</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">holdsLock</span><span style="color:#ABB2BF;">(positionLock);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> n </span><span style="color:#56B6C2;">=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> ti </span><span style="color:#56B6C2;">=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        begin</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        ti </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> threads</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isOpen</span><span style="color:#E06C75;">())</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        do</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            n </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> transferTo0</span><span style="color:#E06C75;">(fd</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> position</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> icount</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> targetFD)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">while</span><span style="color:#E06C75;"> ((n </span><span style="color:#56B6C2;">==</span><span style="color:#E5C07B;"> IOStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">INTERRUPTED</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> isOpen</span><span style="color:#E06C75;">())</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (n </span><span style="color:#56B6C2;">==</span><span style="color:#E5C07B;"> IOStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">UNSUPPORTED_CASE</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (target </span><span style="color:#C678DD;">instanceof</span><span style="color:#E06C75;"> SinkChannelImpl)</span></span>
<span class="line"><span style="color:#E06C75;">                pipeSupported </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (target </span><span style="color:#C678DD;">instanceof</span><span style="color:#E06C75;"> FileChannelImpl)</span></span>
<span class="line"><span style="color:#E06C75;">                fileSupported </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E5C07B;"> IOStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">UNSUPPORTED_CASE</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (n </span><span style="color:#56B6C2;">==</span><span style="color:#E5C07B;"> IOStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">UNSUPPORTED</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            transferSupported </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E5C07B;"> IOStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">UNSUPPORTED</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> IOStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">normalize</span><span style="color:#ABB2BF;">(n);</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        threads</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">(ti);</span></span>
<span class="line"><span style="color:#61AFEF;">        end</span><span style="color:#E06C75;"> (n </span><span style="color:#56B6C2;">&gt;</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本地方法（native method）transferTo0() 通过 JNI（Java Native Interface）调用底层 C 的函数，这个 native 函数（Java_sun_nio_ch_FileChannelImpl_transferTo0）同样位于 JDK 源码包下的 native/sun/nio/ch/FileChannelImpl.c 源文件里面。JNI 函数 Java_sun_nio_ch_FileChannelImpl_transferTo0() 基于条件编译对不同的系统进行预编译，下面是 JDK 基于 Linux 系统内核对 transferTo() 提供的调用封装。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#if</span><span style="color:#C678DD;"> defined</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">__linux__</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#C678DD;"> defined</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">__solaris__</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;sys/sendfile.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#elif</span><span style="color:#C678DD;"> defined</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">_AIX</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#elif</span><span style="color:#C678DD;"> defined</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">_ALLBSD_SOURCE</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;sys/uio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> lseek64</span><span style="color:#ABB2BF;"> lseek</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> mmap64</span><span style="color:#ABB2BF;"> mmap</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">JNIEXPORT jlong JNICALL</span></span>
<span class="line"><span style="color:#61AFEF;">Java_sun_nio_ch_FileChannelImpl_transferTo0</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">JNIEnv </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">env</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jobject </span><span style="color:#E06C75;font-style:italic;">this</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                                            jobject </span><span style="color:#E06C75;font-style:italic;">srcFDO</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                                            jlong </span><span style="color:#E06C75;font-style:italic;">position</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jlong </span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                                            jobject </span><span style="color:#E06C75;font-style:italic;">dstFDO</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    jint srcFD </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> fdval</span><span style="color:#ABB2BF;">(env, srcFDO);</span></span>
<span class="line"><span style="color:#ABB2BF;">    jint dstFD </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> fdval</span><span style="color:#ABB2BF;">(env, dstFDO);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">#if</span><span style="color:#C678DD;"> defined</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">__linux__</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;">    off64_t</span><span style="color:#ABB2BF;"> offset </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">off64_t</span><span style="color:#ABB2BF;">)position;</span></span>
<span class="line"><span style="color:#ABB2BF;">    jlong n </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> sendfile64</span><span style="color:#ABB2BF;">(dstFD, srcFD, </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">offset, (</span><span style="color:#C678DD;">size_t</span><span style="color:#ABB2BF;">)count);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> n;</span></span>
<span class="line"><span style="color:#C678DD;">#elif</span><span style="color:#C678DD;"> defined</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">__solaris__</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    result </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> sendfilev64</span><span style="color:#ABB2BF;">(dstFD, </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">sfv, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">numBytes);    </span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> result;</span></span>
<span class="line"><span style="color:#C678DD;">#elif</span><span style="color:#C678DD;"> defined</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">__APPLE__</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    result </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> sendfile</span><span style="color:#ABB2BF;">(srcFD, dstFD, position, </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">numBytes, </span><span style="color:#D19A66;">NULL</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> result;</span></span>
<span class="line"><span style="color:#C678DD;">#endif</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对 Linux、Solaris 以及 Apple 系统而言，transferTo0() 函数底层会执行 sendfile64 这个系统调用完成零拷贝操作，sendfile64() 函数的原型如下：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#98C379;"> &lt;sys/sendfile.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">ssize_t</span><span style="color:#61AFEF;"> sendfile64</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> out_fd</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;font-style:italic;"> in_fd</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> off_t</span><span style="color:#C678DD;"> *</span><span style="color:#E06C75;font-style:italic;">offset</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> size_t</span><span style="color:#E06C75;font-style:italic;"> count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面简单介绍一下 sendfile64() 函数各个参数的含义：</p><ul><li><code>out_fd</code>：待写入的文件描述符</li><li><code>in_fd</code>：待读取的文件描述符</li><li><code>offset</code>：指定 in_fd 对应文件流的读取位置，如果为空，则默认从起始位置开始</li><li><code>count</code>：指定在文件描述符 in_fd 和 out_fd 之间传输的字节数</li></ul><p>在 Linux 2.6.3 之前，out_fd 必须是一个 socket，而从 Linux 2.6.3 以后，out_fd 可以是任何文件。也就是说，sendfile64() 函数不仅可以进行网络文件传输，还可以对本地文件实现零拷贝操作。</p><h2 id="其它的零拷贝实现" tabindex="-1"><a class="header-anchor" href="#其它的零拷贝实现"><span><a href="#%E5%85%B6%E5%AE%83%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0">#</a> 其它的零拷贝实现</span></a></h2><h3 id="netty零拷贝" tabindex="-1"><a class="header-anchor" href="#netty零拷贝"><span><a href="#netty%E9%9B%B6%E6%8B%B7%E8%B4%9D">#</a> Netty零拷贝</span></a></h3><p>Netty 中的零拷贝和上面提到的操作系统层面上的零拷贝不太一样, 我们所说的 Netty 零拷贝完全是基于（Java 层面）用户态的，它的更多的是偏向于数据操作优化这样的概念，具体表现在以下几个方面：</p><p>Netty 通过 DefaultFileRegion 类对 java.nio.channels.FileChannel 的 tranferTo() 方法进行包装，在文件传输时可以将文件缓冲区的数据直接发送到目的通道（Channel）</p><p>ByteBuf 可以通过 wrap 操作把字节数组、ByteBuf、ByteBuffer 包装成一个 ByteBuf 对象, 进而避免了拷贝操作 ByteBuf 支持 slice 操作, 因此可以将 ByteBuf 分解为多个共享同一个存储区域的 ByteBuf，避免了内存的拷贝 Netty 提供了 CompositeByteBuf 类，它可以将多个 ByteBuf 合并为一个逻辑上的 ByteBuf，避免了各个 ByteBuf 之间的拷贝 其中第 1 条属于操作系统层面的零拷贝操作，后面 3 条只能算用户层面的数据操作优化。</p><h3 id="rocketmq和kafka对比" tabindex="-1"><a class="header-anchor" href="#rocketmq和kafka对比"><span><a href="#rocketmq%E5%92%8Ckafka%E5%AF%B9%E6%AF%94">#</a> RocketMQ和Kafka对比</span></a></h3><p>RocketMQ 选择了 mmap + write 这种零拷贝方式，适用于业务级消息这种小块文件的数据持久化和传输；而 Kafka 采用的是 sendfile 这种零拷贝方式，适用于系统日志消息这种高吞吐量的大块文件的数据持久化和传输。但是值得注意的一点是，Kafka 的索引文件使用的是 mmap + write 方式，数据文件使用的是 sendfile 方式。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-copy-11.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</span></a></h2>`,92),o=[p];function t(c,r){return n(),a("div",null,o)}const y=s(e,[["render",t],["__file","NIO 之零拷贝实现.html.vue"]]),B=JSON.parse(`{"path":"/posts/Java/IO-NIO-AIO/NIO%20%E4%B9%8B%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0.html","title":"NIO 之零拷贝实现","lang":"zh-CN","frontmatter":{"title":"NIO 之零拷贝实现","subtitle":"Java，Java开发，Java 体系","date":"2024-03-11T14:36:26.000Z","category":["Java"],"tag":["Java","IO"],"order":13,"description":"这里转一篇Java NIO 零拷贝的实现文章，在此之前建议先理解什么是Linux中零拷贝，可以先看这篇文章。本文从源码着手分析了 Java NIO 对零拷贝的实现，主要包括基于内存映射（mmap）方式的 MappedByteBuffer 以及基于 sendfile 方式的 FileChannel。最后在篇末简单的阐述了一下 Netty 中的零拷贝机制，...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/IO-NIO-AIO/NIO%20%E4%B9%8B%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"NIO 之零拷贝实现"}],["meta",{"property":"og:description","content":"这里转一篇Java NIO 零拷贝的实现文章，在此之前建议先理解什么是Linux中零拷贝，可以先看这篇文章。本文从源码着手分析了 Java NIO 对零拷贝的实现，主要包括基于内存映射（mmap）方式的 MappedByteBuffer 以及基于 sendfile 方式的 FileChannel。最后在篇末简单的阐述了一下 Netty 中的零拷贝机制，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java-io-copy-11.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-17T09:29:14.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"IO"}],["meta",{"property":"article:published_time","content":"2024-03-11T14:36:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-17T09:29:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NIO 之零拷贝实现\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-io-copy-11.jpg\\"],\\"datePublished\\":\\"2024-03-11T14:36:26.000Z\\",\\"dateModified\\":\\"2024-03-17T09:29:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# Java NIO零拷贝","slug":"java-nio零拷贝","link":"#java-nio零拷贝","children":[{"level":3,"title":"# MappedByteBuffer","slug":"mappedbytebuffer","link":"#mappedbytebuffer","children":[]},{"level":3,"title":"# DirectByteBuffer","slug":"directbytebuffer","link":"#directbytebuffer","children":[]},{"level":3,"title":"# FileChannel","slug":"filechannel","link":"#filechannel","children":[]}]},{"level":2,"title":"# 其它的零拷贝实现","slug":"其它的零拷贝实现","link":"#其它的零拷贝实现","children":[{"level":3,"title":"# Netty零拷贝","slug":"netty零拷贝","link":"#netty零拷贝","children":[]},{"level":3,"title":"# RocketMQ和Kafka对比","slug":"rocketmq和kafka对比","link":"#rocketmq和kafka对比","children":[]}]},{"level":2,"title":"# 参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1710139794000,"updatedTime":1710667754000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":17.04,"words":5113},"filePathRelative":"posts/Java/IO-NIO-AIO/NIO 之零拷贝实现.md","localizedDate":"2024年3月11日","excerpt":"<blockquote>\\n<p>这里转一篇Java NIO 零拷贝的实现文章，在此之前建议先理解什么是Linux中零拷贝，可以先看这篇文章。本文从源码着手分析了 Java NIO 对零拷贝的实现，主要包括基于内存映射（mmap）方式的 MappedByteBuffer 以及基于 sendfile 方式的 FileChannel。最后在篇末简单的阐述了一下 Netty 中的零拷贝机制，以及 RocketMQ 和 Kafka 两种消息队列在零拷贝实现方式上的区别。@pdai</p>\\n</blockquote>\\n<ul>\\n<li>NIO 之零拷贝实现\\n<ul>\\n<li>Java NIO零拷贝\\n<ul>\\n<li><a href=\\"#mappedbytebuffer\\">MappedByteBuffer</a></li>\\n<li><a href=\\"#directbytebuffer\\">DirectByteBuffer</a></li>\\n<li><a href=\\"#filechannel\\">FileChannel</a></li>\\n</ul>\\n</li>\\n<li>其它的零拷贝实现\\n<ul>\\n<li><a href=\\"#netty%E9%9B%B6%E6%8B%B7%E8%B4%9D\\">Netty零拷贝</a></li>\\n<li><a href=\\"#rocketmq%E5%92%8Ckafka%E5%AF%B9%E6%AF%94\\">RocketMQ和Kafka对比</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{y as comp,B as data};
