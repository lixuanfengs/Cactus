import{_ as e,c as l,f as a,o as n}from"./app-C1FyLOoC.js";const o={};function t(p,s){return n(),l("div",null,s[0]||(s[0]=[a(`<h2 id="git强制删除文件历史记录" tabindex="-1"><a class="header-anchor" href="#git强制删除文件历史记录"><span>Git强制删除文件历史记录</span></a></h2><ol><li><p><strong>确保已经备份（重要）</strong>： 首先，请确保你对当前仓库有备份，<code>git filter-repo</code> 是一个不可逆的操作，执行后所有删除的数据将无法恢复。</p></li><li><p><strong>运行 <code>git filter-repo</code> 命令</strong>： 使用 <code>git filter-repo</code> 来完全删除指定文件的历史，确保文件在所有 commit 中都被清除。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> filter-repo</span><span style="color:#D19A66;"> --path</span><span style="color:#98C379;"> &#39;/d/Company_projects/application/cactus-vue-pro/cactus-server/src/main/resources/application.yaml&#39;</span><span style="color:#D19A66;"> --invert-paths</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果路径中有误，请检查并确保路径完全正确。如果你想删除所有版本中的 <code>application.yaml</code> 文件，可以使用通配符：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> filter-repo</span><span style="color:#D19A66;"> --path-glob</span><span style="color:#98C379;"> &#39;*/application.yaml&#39;</span><span style="color:#D19A66;"> --invert-paths</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个命令将删除任何目录下名为 <code>application.yaml</code> 的文件。</p><blockquote><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> filter-repo</span><span style="color:#D19A66;"> --path-glob</span><span style="color:#98C379;"> &#39;*/application-dev.yaml&#39;</span><span style="color:#D19A66;"> --invert-paths</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> filter-repo</span><span style="color:#D19A66;"> --path-glob</span><span style="color:#98C379;"> &#39;*/application-local.yaml&#39;</span><span style="color:#D19A66;"> --invert-paths</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> filter-repo</span><span style="color:#D19A66;"> --path-glob</span><span style="color:#98C379;"> &#39;*/logback-spring.xml&#39;</span><span style="color:#D19A66;"> --invert-paths</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li><li><p><strong>强制推送到远程仓库</strong>： 如果你正在处理的是一个远程仓库，删除文件历史后，你需要强制推送修改。</p><blockquote><p><strong>注意：</strong> 这会覆盖远程仓库的历史，其他开发者可能会受到影响，所以建议在推送之前先与团队沟通。</p></blockquote><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> push</span><span style="color:#98C379;"> origin</span><span style="color:#D19A66;"> --force</span><span style="color:#D19A66;"> --all</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> push</span><span style="color:#98C379;"> origin</span><span style="color:#D19A66;"> --force</span><span style="color:#D19A66;"> --tags</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样会强制将本地的修改（包括历史记录的修改）推送到远程仓库。</p></li><li><p><strong>清理本地及远程缓存</strong>： 执行以下命令以确保远程仓库的垃圾数据也被清理掉：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> gc</span><span style="color:#D19A66;"> --prune=now</span><span style="color:#D19A66;"> --aggressive</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> repack</span><span style="color:#D19A66;"> -ad</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>验证结果</strong>： 你可以通过以下命令来验证是否已完全删除文件的历史：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> log</span><span style="color:#D19A66;"> --all</span><span style="color:#D19A66;"> --full-history</span><span style="color:#D19A66;"> --</span><span style="color:#98C379;"> &#39;**/application.yaml&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果没有任何输出，说明该文件及其历史已完全删除。</p></li></ol>`,2)]))}const i=e(o,[["render",t],["__file","Git删除某个文件记录.html.vue"]]),c=JSON.parse(`{"path":"/tutorial/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/Git%E5%88%A0%E9%99%A4%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E8%AE%B0%E5%BD%95.html","title":"Git删除某个文件记录","lang":"zh-CN","frontmatter":{"title":"Git删除某个文件记录","subtitle":"Git删除某个文件记录","date":"2024-10-23T17:33:30.000Z","category":["Git"],"tag":["filter-repo"],"order":2,"description":"Git强制删除文件历史记录 确保已经备份（重要）： 首先，请确保你对当前仓库有备份，git filter-repo 是一个不可逆的操作，执行后所有删除的数据将无法恢复。 运行 git filter-repo 命令： 使用 git filter-repo 来完全删除指定文件的历史，确保文件在所有 commit 中都被清除。 如果路径中有误，请检查并确保路...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/tutorial/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/Git%E5%88%A0%E9%99%A4%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E8%AE%B0%E5%BD%95.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"Git删除某个文件记录"}],["meta",{"property":"og:description","content":"Git强制删除文件历史记录 确保已经备份（重要）： 首先，请确保你对当前仓库有备份，git filter-repo 是一个不可逆的操作，执行后所有删除的数据将无法恢复。 运行 git filter-repo 命令： 使用 git filter-repo 来完全删除指定文件的历史，确保文件在所有 commit 中都被清除。 如果路径中有误，请检查并确保路..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-29T09:45:24.000Z"}],["meta",{"property":"article:tag","content":"filter-repo"}],["meta",{"property":"article:published_time","content":"2024-10-23T17:33:30.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-29T09:45:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git删除某个文件记录\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-23T17:33:30.000Z\\",\\"dateModified\\":\\"2024-10-29T09:45:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"Git强制删除文件历史记录","slug":"git强制删除文件历史记录","link":"#git强制删除文件历史记录","children":[]}],"git":{"createdTime":1730195124000,"updatedTime":1730195124000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":1.53,"words":459},"filePathRelative":"tutorial/Git使用教程/Git删除某个文件记录.md","localizedDate":"2024年10月23日","excerpt":"<h2>Git强制删除文件历史记录</h2>\\n<ol>\\n<li>\\n<p><strong>确保已经备份（重要）</strong>： 首先，请确保你对当前仓库有备份，<code>git filter-repo</code> 是一个不可逆的操作，执行后所有删除的数据将无法恢复。</p>\\n</li>\\n<li>\\n<p><strong>运行 <code>git filter-repo</code> 命令</strong>： 使用 <code>git filter-repo</code> 来完全删除指定文件的历史，确保文件在所有 commit 中都被清除。</p>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"background-color:#282c34;color:#abb2bf\\"><pre class=\\"shiki one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#61AFEF\\">$</span><span style=\\"color:#98C379\\"> git</span><span style=\\"color:#98C379\\"> filter-repo</span><span style=\\"color:#D19A66\\"> --path</span><span style=\\"color:#98C379\\"> '/d/Company_projects/application/cactus-vue-pro/cactus-server/src/main/resources/application.yaml'</span><span style=\\"color:#D19A66\\"> --invert-paths</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div><p>如果路径中有误，请检查并确保路径完全正确。如果你想删除所有版本中的 <code>application.yaml</code> 文件，可以使用通配符：</p>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"background-color:#282c34;color:#abb2bf\\"><pre class=\\"shiki one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#61AFEF\\">$</span><span style=\\"color:#98C379\\"> git</span><span style=\\"color:#98C379\\"> filter-repo</span><span style=\\"color:#D19A66\\"> --path-glob</span><span style=\\"color:#98C379\\"> '*/application.yaml'</span><span style=\\"color:#D19A66\\"> --invert-paths</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div><p>这个命令将删除任何目录下名为 <code>application.yaml</code> 的文件。</p>\\n<blockquote>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"background-color:#282c34;color:#abb2bf\\"><pre class=\\"shiki one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#61AFEF\\">$</span><span style=\\"color:#98C379\\"> git</span><span style=\\"color:#98C379\\"> filter-repo</span><span style=\\"color:#D19A66\\"> --path-glob</span><span style=\\"color:#98C379\\"> '*/application-dev.yaml'</span><span style=\\"color:#D19A66\\"> --invert-paths</span></span>\\n<span class=\\"line\\"><span style=\\"color:#61AFEF\\">$</span><span style=\\"color:#98C379\\"> git</span><span style=\\"color:#98C379\\"> filter-repo</span><span style=\\"color:#D19A66\\"> --path-glob</span><span style=\\"color:#98C379\\"> '*/application-local.yaml'</span><span style=\\"color:#D19A66\\"> --invert-paths</span></span>\\n<span class=\\"line\\"><span style=\\"color:#61AFEF\\">$</span><span style=\\"color:#98C379\\"> git</span><span style=\\"color:#98C379\\"> filter-repo</span><span style=\\"color:#D19A66\\"> --path-glob</span><span style=\\"color:#98C379\\"> '*/logback-spring.xml'</span><span style=\\"color:#D19A66\\"> --invert-paths</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></blockquote>\\n</li>\\n<li>\\n<p><strong>强制推送到远程仓库</strong>： 如果你正在处理的是一个远程仓库，删除文件历史后，你需要强制推送修改。</p>\\n<blockquote>\\n<p><strong>注意：</strong> 这会覆盖远程仓库的历史，其他开发者可能会受到影响，所以建议在推送之前先与团队沟通。</p>\\n</blockquote>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"background-color:#282c34;color:#abb2bf\\"><pre class=\\"shiki one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#61AFEF\\">$</span><span style=\\"color:#98C379\\"> git</span><span style=\\"color:#98C379\\"> push</span><span style=\\"color:#98C379\\"> origin</span><span style=\\"color:#D19A66\\"> --force</span><span style=\\"color:#D19A66\\"> --all</span></span>\\n<span class=\\"line\\"><span style=\\"color:#61AFEF\\">$</span><span style=\\"color:#98C379\\"> git</span><span style=\\"color:#98C379\\"> push</span><span style=\\"color:#98C379\\"> origin</span><span style=\\"color:#D19A66\\"> --force</span><span style=\\"color:#D19A66\\"> --tags</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>这样会强制将本地的修改（包括历史记录的修改）推送到远程仓库。</p>\\n</li>\\n<li>\\n<p><strong>清理本地及远程缓存</strong>： 执行以下命令以确保远程仓库的垃圾数据也被清理掉：</p>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"background-color:#282c34;color:#abb2bf\\"><pre class=\\"shiki one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#61AFEF\\">$</span><span style=\\"color:#98C379\\"> git</span><span style=\\"color:#98C379\\"> gc</span><span style=\\"color:#D19A66\\"> --prune=now</span><span style=\\"color:#D19A66\\"> --aggressive</span></span>\\n<span class=\\"line\\"><span style=\\"color:#61AFEF\\">$</span><span style=\\"color:#98C379\\"> git</span><span style=\\"color:#98C379\\"> repack</span><span style=\\"color:#D19A66\\"> -ad</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>验证结果</strong>： 你可以通过以下命令来验证是否已完全删除文件的历史：</p>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"background-color:#282c34;color:#abb2bf\\"><pre class=\\"shiki one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#61AFEF\\">$</span><span style=\\"color:#98C379\\"> git</span><span style=\\"color:#98C379\\"> log</span><span style=\\"color:#D19A66\\"> --all</span><span style=\\"color:#D19A66\\"> --full-history</span><span style=\\"color:#D19A66\\"> --</span><span style=\\"color:#98C379\\"> '**/application.yaml'</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div><p>如果没有任何输出，说明该文件及其历史已完全删除。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{i as comp,c as data};
