import{_ as p,e as o,o as t,c as r,b as s,g as a,f as l,h as e}from"./app-CjDHth4n.js";const c={},i={href:"https://tech.meituan.com/2019/11/07/java-dynamic-debugging-technology.html",target:"_blank",rel:"noopener noreferrer"},y=e(`<ul><li>调试排错 Java动态调试技术原理 <ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li>Agent的实现模式 <ul><li><a href="#%E9%80%9A%E8%BF%87java-instrumentation-api">通过Java Instrumentation API</a></li></ul></li><li>启动时加载Agent <ul><li><a href="#%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90">参数解析</a></li><li><a href="#%E6%89%A7%E8%A1%8C%E5%8A%A0%E8%BD%BD%E6%93%8D%E4%BD%9C">执行加载操作</a></li><li><a href="#instrument%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93">instrument动态链接库</a></li></ul></li><li>运行时加载Agent <ul><li><a href="#attachlistener">AttachListener</a></li><li><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8A%A0%E8%BD%BDagent%E7%9A%84%E5%AE%9E%E7%8E%B0">运行时加载Agent的实现</a></li><li><a href="#load%E5%91%BD%E4%BB%A4%E7%9A%84%E5%AE%9E%E7%8E%B0">load命令的实现</a></li></ul></li><li><a href="#%E5%8A%A8%E6%80%81%E5%AD%97%E8%8A%82%E7%A0%81%E4%BF%AE%E6%94%B9%E7%9A%84%E9%99%90%E5%88%B6">动态字节码修改的限制</a></li><li><a href="#%E9%87%8D%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82">重定义类字节码的实现细节</a></li><li>Java-debug-tool <ul><li><a href="#java-debug-tool%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84">Java-debug-tool整体架构</a></li><li>Java-debug-tool的字节码增强方案 <ul><li><a href="#%E5%AD%97%E8%8A%82%E7%A0%81%E5%A2%9E%E5%BC%BA">字节码增强</a></li><li><a href="#advice%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F">Advice的工作方式</a></li></ul></li><li>Java-debug-tool的命令设计与实现 <ul><li><a href="#%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C">命令执行</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E8%A7%86%E5%9B%BE">获取方法执行视图</a></li></ul></li><li><a href="#java-debug-tool%E4%B8%8E%E5%90%8C%E7%B1%BB%E4%BA%A7%E5%93%81%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90">Java-debug-tool与同类产品对比分析</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></li></ul></li></ul><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span><a href="#%E7%AE%80%E4%BB%8B">#</a> 简介</span></a></h2><p>断点调试是我们最常使用的调试手段，它可以获取到方法执行过程中的变量信息，并可以观察到方法的执行路径。但断点调试会在断点位置停顿，使得整个应用停止响应。在线上停顿应用是致命的，动态调试技术给了我们创造新的调试模式的想象空间。本文将研究Java语言中的动态调试技术，首先概括Java动态调试所涉及的技术基础，接着介绍我们在Java动态调试领域的思考及实践，通过结合实际业务场景，设计并实现了一种具备动态性的断点调试工具Java-debug-tool，显著提高了故障排查效率。</p><p>JVMTI (JVM Tool Interface)是Java虚拟机对外提供的Native编程接口，通过JVMTI，外部进程可以获取到运行时JVM的诸多信息，比如线程、GC等。Agent是一个运行在目标JVM的特定程序，它的职责是负责从目标JVM中获取数据，然后将数据传递给外部进程。加载Agent的时机可以是目标JVM启动之时，也可以是在目标JVM运行时进行加载，而在目标JVM运行时进行Agent加载具备动态性，对于时机未知的Debug场景来说非常实用。下面将详细分析Java Agent技术的实现细节。</p><h2 id="agent的实现模式" tabindex="-1"><a class="header-anchor" href="#agent的实现模式"><span><a href="#agent%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%BC%8F">#</a> Agent的实现模式</span></a></h2><p>JVMTI是一套Native接口，在Java SE 5之前，要实现一个Agent只能通过编写Native代码来实现。从Java SE 5开始，可以使用Java的Instrumentation接口(java.lang.instrument)来编写Agent。无论是通过Native的方式还是通过Java Instrumentation接口的方式来编写Agent，它们的工作都是借助JVMTI来进行完成，下面介绍通过Java Instrumentation接口编写Agent的方法。</p><h3 id="通过java-instrumentation-api" tabindex="-1"><a class="header-anchor" href="#通过java-instrumentation-api"><span><a href="#%E9%80%9A%E8%BF%87java-instrumentation-api">#</a> 通过Java Instrumentation API</span></a></h3><ul><li>实现Agent启动方法</li></ul><p>Java Agent支持目标JVM启动时加载，也支持在目标JVM运行时加载，这两种不同的加载模式会使用不同的入口函数，如果需要在目标JVM启动的同时加载Agent，那么可以选择实现下面的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">[</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">] </span><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> premain</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> agentArgs</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Instrumentation</span><span style="color:#E06C75;"> inst)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">[</span><span style="color:#D19A66;">2</span><span style="color:#E06C75;">] </span><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> premain</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> agentArgs)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>JVM将首先寻找[1]，如果没有发现[1]，再寻找[2]。如果希望在目标JVM运行时加载Agent，则需要实现下面的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">[</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">] </span><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> agentmain</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> agentArgs</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Instrumentation</span><span style="color:#E06C75;"> inst)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">[</span><span style="color:#D19A66;">2</span><span style="color:#E06C75;">] </span><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> agentmain</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> agentArgs)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两组方法的第一个参数AgentArgs是随同 “– javaagent”一起传入的程序参数，如果这个字符串代表了多个参数，就需要自己解析这些参数。inst是Instrumentation类型的对象，是JVM自动传入的，我们可以拿这个参数进行类增强等操作。</p><ul><li>指定Main-Class</li></ul><p>Agent需要打包成一个jar包，在ManiFest属性中指定“Premain-Class”或者“Agent-Class”：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">Premain</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">Class</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> class</span></span>
<span class="line"><span style="color:#E06C75;">Agent</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">Class</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> class</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>挂载到目标JVM</li></ul><p>将编写的Agent打成jar包后，就可以挂载到目标JVM上去了。如果选择在目标JVM启动时加载Agent，则可以使用 “-javaagent:[=]“，具体的使用方法可以使用“Java -Help”来查看。如果想要在运行时挂载Agent到目标JVM，就需要做一些额外的开发了。</p><p>com.sun.tools.attach.VirtualMachine 这个类代表一个JVM抽象，可以通过这个类找到目标JVM，并且将Agent挂载到目标JVM上。下面是使用com.sun.tools.attach.VirtualMachine进行动态挂载Agent的一般实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> attachAgentToTargetJVM</span><span style="color:#E06C75;">() throws Exception {</span></span>
<span class="line"><span style="color:#E5C07B;">        List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">VirtualMachineDescriptor</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> virtualMachineDescriptors </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> VirtualMachine</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">list</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        VirtualMachineDescriptor</span><span style="color:#E06C75;"> targetVM </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">VirtualMachineDescriptor</span><span style="color:#E06C75;"> descriptor </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> virtualMachineDescriptors) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">descriptor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">id</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">configure</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPid</span><span style="color:#ABB2BF;">())</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                targetVM </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> descriptor</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (targetVM </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalArgumentException</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;could not find the target jvm by process id:&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> configure</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPid</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        VirtualMachine</span><span style="color:#E06C75;"> virtualMachine </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            virtualMachine </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> VirtualMachine</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">attach</span><span style="color:#ABB2BF;">(targetVM);</span></span>
<span class="line"><span style="color:#E5C07B;">            virtualMachine</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">loadAgent</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{agent}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;{params}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (virtualMachine </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                virtualMachine</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">detach</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先通过指定的进程ID找到目标JVM，然后通过Attach挂载到目标JVM上，执行加载Agent操作。VirtualMachine的Attach方法就是用来将Agent挂载到目标JVM上去的，而Detach则是将Agent从目标JVM卸载。关于Agent是如何挂载到目标JVM上的具体技术细节，将在下文中进行分析。</p><h2 id="启动时加载agent" tabindex="-1"><a class="header-anchor" href="#启动时加载agent"><span><a href="#%E5%90%AF%E5%8A%A8%E6%97%B6%E5%8A%A0%E8%BD%BDagent">#</a> 启动时加载Agent</span></a></h2><h3 id="参数解析" tabindex="-1"><a class="header-anchor" href="#参数解析"><span><a href="#%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90">#</a> 参数解析</span></a></h3><p>创建JVM时，JVM会进行参数解析，即解析那些用来配置JVM启动的参数，比如堆大小、GC等；本文主要关注解析的参数为-agentlib、 -agentpath、 -javaagent，这几个参数用来指定Agent，JVM会根据这几个参数加载Agent。下面来分析一下JVM是如何解析这几个参数的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">  // -agentlib and -agentpath</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">match_option</span><span style="color:#E06C75;">(option</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;-agentlib:&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">tail) </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#E06C75;">          (is_absolute_path </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> match_option</span><span style="color:#E06C75;">(option</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;-agentpath:&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">tail))) {</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#E06C75;">(tail </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> NULL) {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#C678DD;"> char</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> pos </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> strchr</span><span style="color:#E06C75;">(tail</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &#39;=&#39;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        size_t len </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (pos </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> NULL) </span><span style="color:#C678DD;">?</span><span style="color:#61AFEF;"> strlen</span><span style="color:#E06C75;">(tail) </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> pos </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> tail</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        char</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> name </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> strncpy</span><span style="color:#E06C75;">(</span><span style="color:#61AFEF;">NEW_C_HEAP_ARRAY</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> len </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> mtArguments)</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> tail</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> len)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        name[len] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;</span><span style="color:#56B6C2;">\\0</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        char</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;">options </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> NULL</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;">(pos </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> NULL) {</span></span>
<span class="line"><span style="color:#E06C75;">          options </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> os</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">strdup_check_oom</span><span style="color:#E06C75;">(pos </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> mtArguments)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">#</span><span style="color:#C678DD;">if</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">INCLUDE_JVMTI</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">valid_jdwp_agent</span><span style="color:#E06C75;">(name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> is_absolute_path)) {</span></span>
<span class="line"><span style="color:#61AFEF;">          jio_fprintf</span><span style="color:#E06C75;">(defaultStream</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">error_stream</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">            &quot;Debugging agents are not supported in this VM</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">          return</span><span style="color:#E06C75;"> JNI_ERR</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">#endif </span><span style="color:#7F848E;font-style:italic;">// !INCLUDE_JVMTI</span></span>
<span class="line"><span style="color:#61AFEF;">        add_init_agent</span><span style="color:#E06C75;">(name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> is_absolute_path)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">      }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // -javaagent</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">match_option</span><span style="color:#E06C75;">(option</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;-javaagent:&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">tail)) {</span></span>
<span class="line"><span style="color:#E06C75;">#</span><span style="color:#C678DD;">if</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">INCLUDE_JVMTI</span></span>
<span class="line"><span style="color:#61AFEF;">      jio_fprintf</span><span style="color:#E06C75;">(defaultStream</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">error_stream</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">        &quot;Instrumentation agents are not supported in this VM</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E06C75;"> JNI_ERR</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">#</span><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#E06C75;"> (tail </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> NULL) {</span></span>
<span class="line"><span style="color:#E06C75;">        size_t length </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> strlen</span><span style="color:#E06C75;">(tail) </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        char</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;">options </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> NEW_C_HEAP_ARRAY</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> length</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> mtArguments)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        jio_snprintf</span><span style="color:#E06C75;">(options</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> length</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;%s&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> tail)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        add_init_agent</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;instrument&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> false</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // java agents need module java.instrument</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">create_numbered_property</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;jdk.module.addmods&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;java.instrument&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> addmods_count</span><span style="color:#ABB2BF;">++</span><span style="color:#E06C75;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">          return</span><span style="color:#E06C75;"> JNI_ENOMEM</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">      }</span></span>
<span class="line"><span style="color:#E06C75;">#endif </span><span style="color:#7F848E;font-style:italic;">// !INCLUDE_JVMTI</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码片段截取自hotspot/src/share/vm/runtime/arguments.cpp中的 Arguments::parse_each_vm_init_arg(const JavaVMInitArgs* args, bool* patch_mod_javabase, Flag::Flags origin) 函数，该函数用来解析一个具体的JVM参数。这段代码的主要功能是解析出需要加载的Agent路径，然后调用add_init_agent函数进行解析结果的存储。下面先看一下add_init_agent函数的具体实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">  // -agentlib and -agentpath arguments</span></span>
<span class="line"><span style="color:#C678DD;">  static</span><span style="color:#E5C07B;"> AgentLibraryList</span><span style="color:#E06C75;"> _agentList</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> add_init_agent</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> char</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> char</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> bool absolute_path)</span></span>
<span class="line"><span style="color:#E06C75;">    { </span><span style="color:#E5C07B;">_agentList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> AgentLibrary</span><span style="color:#ABB2BF;">(name, options, absolute_path, NULL));</span><span style="color:#E06C75;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AgentLibraryList是一个简单的链表结构，add_init_agent函数将解析好的、需要加载的Agent添加到这个链表中，等待后续的处理。</p><p>这里需要注意，解析-javaagent参数有一些特别之处，这个参数用来指定一个我们通过Java Instrumentation API来编写的Agent，Java Instrumentation API底层依赖的是JVMTI，对-JavaAgent的处理也说明了这一点，在调用add_init_agent函数时第一个参数是“instrument”，关于加载Agent这个问题在下一小节进行展开。到此，我们知道在启动JVM时指定的Agent已经被JVM解析完存放在了一个链表结构中。下面来分析一下JVM是如何加载这些Agent的。</p><h3 id="执行加载操作" tabindex="-1"><a class="header-anchor" href="#执行加载操作"><span><a href="#%E6%89%A7%E8%A1%8C%E5%8A%A0%E8%BD%BD%E6%93%8D%E4%BD%9C">#</a> 执行加载操作</span></a></h3><p>在创建JVM进程的函数中，解析完JVM参数之后，下面的这段代码和加载Agent相关：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">  // Launch -agentlib/-agentpath and converted -Xrun agents</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#E06C75;"> (Arguments</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">init_agents_at_startup</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">    create_vm_init_agents</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  static</span><span style="color:#E06C75;"> bool </span><span style="color:#61AFEF;">init_agents_at_startup</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">_agentList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is_empty</span><span style="color:#ABB2BF;">();</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当JVM判断出上一小节中解析出来的Agent不为空的时候，就要去调用函数create_vm_init_agents来加载Agent，下面来分析一下create_vm_init_agents函数是如何加载Agent的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#E06C75;"> Threads</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">create_vm_init_agents</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E06C75;">  AgentLibrary</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> agent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#E06C75;"> (agent </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> Arguments</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">agents</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> agent </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> NULL</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> agent </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> agent</span><span style="color:#C678DD;">-&gt;</span><span style="color:#61AFEF;">next</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">    OnLoadEntry_t</span><span style="color:#E06C75;">  on_load_entry </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> lookup_agent_on_load</span><span style="color:#E06C75;">(agent)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (on_load_entry </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> NULL) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // Invoke the Agent_OnLoad function</span></span>
<span class="line"><span style="color:#E06C75;">      jint err </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">on_load_entry)(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;">main_vm</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> agent</span><span style="color:#C678DD;">-&gt;</span><span style="color:#61AFEF;">options</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> NULL)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),d={href:"http://xn--libinstrument-2h1us8wmmp987bfm3n.so",target:"_blank",rel:"noopener noreferrer"},B=e(`<h3 id="instrument动态链接库" tabindex="-1"><a class="header-anchor" href="#instrument动态链接库"><span><a href="#instrument%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93">#</a> instrument动态链接库</span></a></h3><p>libinstrument用来支持使用Java Instrumentation API来编写Agent，在libinstrument中有一个非常重要的类称为：JPLISAgent(Java Programming Language Instrumentation Services Agent)，它的作用是初始化所有通过Java Instrumentation API编写的Agent，并且也承担着通过JVMTI实现Java Instrumentation中暴露API的责任。</p><p>我们已经知道，在JVM启动的时候，JVM会通过-javaagent参数加载Agent。最开始加载的是libinstrument动态链接库，然后在动态链接库里面找到JVMTI的入口方法：Agent_OnLoad。下面就来分析一下在libinstrument动态链接库中，Agent_OnLoad函数是怎么实现的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">JNIEXPORT</span><span style="color:#E06C75;"> jint </span><span style="color:#E5C07B;">JNICALL</span></span>
<span class="line"><span style="color:#61AFEF;">DEF_Agent_OnLoad</span><span style="color:#E06C75;">(JavaVM </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> char</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;">tail</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> void</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;"> reserved) {</span></span>
<span class="line"><span style="color:#E06C75;">    initerror </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> createNewJPLISAgent</span><span style="color:#E06C75;">(vm</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">agent)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> ( initerror </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> JPLIS_INIT_ERROR_NONE ) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">parseArgumentTail</span><span style="color:#E06C75;">(tail</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">jarfile</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">options) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">            fprintf</span><span style="color:#E06C75;">(stderr</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;-javaagent: memory allocation failure.</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> JNI_ERR</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">        attributes </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> readAttributes</span><span style="color:#E06C75;">(jarfile)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        premainClass </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getAttribute</span><span style="color:#E06C75;">(attributes</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;Premain-Class&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /* Save the jarfile name */</span></span>
<span class="line"><span style="color:#E06C75;">        agent</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;">mJarfile </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> jarfile</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         * Convert JAR attributes into agent capabilities</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#61AFEF;">        convertCapabilityAttributes</span><span style="color:#E06C75;">(attributes</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> agent)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         * Track (record) the agent class name and options data</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#E06C75;">        initerror </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> recordCommandLineData</span><span style="color:#E06C75;">(agent</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> premainClass</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> options)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码片段是经过精简的libinstrument中Agent_OnLoad实现的，大概的流程就是：先创建一个JPLISAgent，然后将ManiFest中设定的一些参数解析出来， 比如(Premain-Class)等。创建了JPLISAgent之后，调用initializeJPLISAgent对这个Agent进行初始化操作。跟进initializeJPLISAgent看一下是如何初始化的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">JPLISInitializationError</span><span style="color:#61AFEF;"> initializeJPLISAgent</span><span style="color:#E06C75;">(JPLISAgent </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">agent</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> JavaVM </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jvmtiEnv </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">jvmtienv) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* check what capabilities are available */</span></span>
<span class="line"><span style="color:#61AFEF;">    checkCapabilities</span><span style="color:#E06C75;">(agent)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* check phase - if live phase then we don&#39;t need the VMInit event */</span></span>
<span class="line"><span style="color:#E06C75;">    jvmtierror </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">jvmtienv)</span><span style="color:#C678DD;">-&gt;</span><span style="color:#61AFEF;">GetPhase</span><span style="color:#E06C75;">(jvmtienv</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">phase)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* now turn on the VMInit event */</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> ( jvmtierror </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> JVMTI_ERROR_NONE ) {</span></span>
<span class="line"><span style="color:#E06C75;">        jvmtiEventCallbacks callbacks</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        memset</span><span style="color:#E06C75;">(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;">callbacks</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">,</span><span style="color:#61AFEF;"> sizeof</span><span style="color:#E06C75;">(callbacks))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        callbacks</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">VMInit</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">eventHandlerVMInit</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        jvmtierror </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">jvmtienv)</span><span style="color:#C678DD;">-&gt;</span><span style="color:#61AFEF;">SetEventCallbacks</span><span style="color:#E06C75;">(jvmtienv</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;">callbacks</span><span style="color:#ABB2BF;">,</span><span style="color:#61AFEF;">sizeof</span><span style="color:#E06C75;">(callbacks))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> ( jvmtierror </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> JVMTI_ERROR_NONE ) {</span></span>
<span class="line"><span style="color:#E06C75;">        jvmtierror </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">jvmtienv)</span><span style="color:#C678DD;">-&gt;</span><span style="color:#61AFEF;">SetEventNotificationMode</span><span style="color:#E06C75;">(jvmtienv</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">JVMTI_ENABLE</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">JVMTI_EVENT_VM_INIT</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">NULL)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> (jvmtierror </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> JVMTI_ERROR_NONE)</span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> JPLIS_INIT_ERROR_NONE </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> JPLIS_INIT_ERROR_FAILURE</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们关注callbacks.VMInit = &amp;eventHandlerVMInit;这行代码，这里设置了一个VMInit事件的回调函数，表示在JVM初始化的时候会回调eventHandlerVMInit函数。下面来看一下这个函数的实现细节，猜测就是在这里调用了Premain方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#E5C07B;"> JNICALL</span><span style="color:#61AFEF;">  eventHandlerVMInit</span><span style="color:#E06C75;">( jvmtiEnv </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">jvmtienv</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">JNIEnv </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">jnienv</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">jthread thread) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   // ...</span></span>
<span class="line"><span style="color:#E06C75;">   success </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> processJavaStart</span><span style="color:#E06C75;">( environment</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;">mAgent</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jnienv)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#E06C75;">jboolean  </span><span style="color:#61AFEF;">processJavaStart</span><span style="color:#E06C75;">(JPLISAgent </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">agent</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">JNIEnv </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">jnienv) {</span></span>
<span class="line"><span style="color:#E06C75;">    result </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> createInstrumentationImpl</span><span style="color:#E06C75;">(jnienv</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> agent)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *  Load the Java agent, and call the premain.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> ( result ) {</span></span>
<span class="line"><span style="color:#E06C75;">        result </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> startJavaAgent</span><span style="color:#E06C75;">(agent</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jnienv</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> agent</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;">mAgentClassName</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> agent</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;">mOptionsString</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> agent</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;">mPremainCaller)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#E06C75;">jboolean </span><span style="color:#61AFEF;">startJavaAgent</span><span style="color:#E06C75;">( JPLISAgent </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">agent</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">JNIEnv </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">jnienv</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> char</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;">classname</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> char</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;">optionsString</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">jmethodID agentMainMethod) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...  </span></span>
<span class="line"><span style="color:#61AFEF;">  invokeJavaAgentMainMethod</span><span style="color:#E06C75;">(jnienv</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">agent</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;">mInstrumentationImpl</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">agentMainMethod</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> classNameObject</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">optionsStringObject)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这里，Instrument已经实例化，invokeJavaAgentMainMethod这个方法将我们的premain方法执行起来了。接着，我们就可以根据Instrument实例来做我们想要做的事情了。</p><h2 id="运行时加载agent" tabindex="-1"><a class="header-anchor" href="#运行时加载agent"><span><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8A%A0%E8%BD%BDagent">#</a> 运行时加载Agent</span></a></h2><p>比起JVM启动时加载Agent，运行时加载Agent就比较有诱惑力了，因为运行时加载Agent的能力给我们提供了很强的动态性，我们可以在需要的时候加载Agent来进行一些工作。因为是动态的，我们可以按照需求来加载所需要的Agent，下面来分析一下动态加载Agent的相关技术细节。</p><h3 id="attachlistener" tabindex="-1"><a class="header-anchor" href="#attachlistener"><span><a href="#attachlistener">#</a> AttachListener</span></a></h3><p>Attach机制通过Attach Listener线程来进行相关事务的处理，下面来看一下Attach Listener线程是如何初始化的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Starts the Attach Listener thread</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#E06C75;"> AttachListener</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">init</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 创建线程相关部分代码被去掉了</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#C678DD;"> char</span><span style="color:#E06C75;"> thread_name[] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;Attach Listener&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">  Handle</span><span style="color:#E06C75;"> string </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> java_lang_String</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">create_from_str</span><span style="color:#E06C75;">(thread_name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> THREAD)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  { </span><span style="color:#E5C07B;">MutexLocker</span><span style="color:#61AFEF;"> mu</span><span style="color:#E06C75;">(Threads_lock)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    JavaThread</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> listener_thread </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> JavaThread</span><span style="color:#E06C75;">(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;">attach_listener_thread_entry)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们知道，一个线程启动之后都需要指定一个入口来执行代码，Attach Listener线程的入口是attach_listener_thread_entry，下面看一下这个函数的具体实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> attach_listener_thread_entry</span><span style="color:#E06C75;">(JavaThread</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> thread</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> TRAPS) {</span></span>
<span class="line"><span style="color:#E06C75;">  AttachListener</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">set_initialized</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">      AttachOperation</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> op </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> AttachListener</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">dequeue</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // find the function to dispatch too</span></span>
<span class="line"><span style="color:#E06C75;">      AttachOperationFunctionInfo</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> info </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> NULL</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">      for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> funcs[i]</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#56B6C2;"> !=</span><span style="color:#E06C75;"> NULL</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">++</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#C678DD;"> char</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> name </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> funcs[i]</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">strcmp</span><span style="color:#E06C75;">(op</span><span style="color:#C678DD;">-&gt;</span><span style="color:#61AFEF;">name</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> name) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">          info </span><span style="color:#56B6C2;">=</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">(funcs[i])</span><span style="color:#ABB2BF;">;</span><span style="color:#C678DD;"> break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">       // dispatch to the function that implements this operation</span></span>
<span class="line"><span style="color:#E06C75;">        res </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (info</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;">func)(op</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">st)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      //...</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个函数执行逻辑，大概是这样的：</p><ul><li>拉取一个需要执行的任务：AttachListener::dequeue。</li><li>查询匹配的命令处理函数。</li><li>执行匹配到的命令执行函数。</li></ul><p>其中第二步里面存在一个命令函数表，整个表如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#E5C07B;"> AttachOperationFunctionInfo</span><span style="color:#E06C75;"> funcs[] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  { </span><span style="color:#98C379;">&quot;agentProperties&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">  get_agent_properties }</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  { </span><span style="color:#98C379;">&quot;datadump&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">         data_dump }</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  { </span><span style="color:#98C379;">&quot;dumpheap&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">         dump_heap }</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  { </span><span style="color:#98C379;">&quot;load&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">             load_agent }</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  { </span><span style="color:#98C379;">&quot;properties&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">       get_system_properties }</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  { </span><span style="color:#98C379;">&quot;threaddump&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">       thread_dump }</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  { </span><span style="color:#98C379;">&quot;inspectheap&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">      heap_inspection }</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  { </span><span style="color:#98C379;">&quot;setflag&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">          set_flag }</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  { </span><span style="color:#98C379;">&quot;printflag&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">        print_flag }</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  { </span><span style="color:#98C379;">&quot;jcmd&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">             jcmd }</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  { NULL</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">               NULL }</span></span>
<span class="line"><span style="color:#E06C75;">}</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于加载Agent来说，命令就是“load”。现在，我们知道了Attach Listener大概的工作模式，但是还是不太清楚任务从哪来，这个秘密就藏在AttachListener::dequeue这行代码里面，接下来我们来分析一下dequeue这个函数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">LinuxAttachOperation</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> LinuxAttachListener</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">dequeue</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // wait for client to connect</span></span>
<span class="line"><span style="color:#E06C75;">    struct sockaddr addr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    socklen_t len </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> sizeof</span><span style="color:#E06C75;">(addr)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    RESTARTABLE</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">accept</span><span style="color:#E06C75;">(</span><span style="color:#61AFEF;">listener</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">addr</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">len)</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> s)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // get the credentials of the peer and check the effective uid/guid</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // - check with jeff on this.</span></span>
<span class="line"><span style="color:#E06C75;">    struct ucred cred_info</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    socklen_t optlen </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> sizeof</span><span style="color:#E06C75;">(cred_info)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">getsockopt</span><span style="color:#E06C75;">(s</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> SOL_SOCKET</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> SO_PEERCRED</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">void</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">)</span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;">cred_info</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">optlen) </span><span style="color:#56B6C2;">==</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      ::</span><span style="color:#61AFEF;">close</span><span style="color:#E06C75;">(s)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">      continue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // peer credential look okay so we read the request</span></span>
<span class="line"><span style="color:#E06C75;">    LinuxAttachOperation</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> op </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> read_request</span><span style="color:#E06C75;">(s)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> op</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是Linux上的实现，不同的操作系统实现方式不太一样。上面的代码表面，Attach Listener在某个端口监听着，通过accept来接收一个连接，然后从这个连接里面将请求读取出来，然后将请求包装成一个AttachOperation类型的对象，之后就会从表里查询对应的处理函数，然后进行处理。</p><p>Attach Listener使用一种被称为“懒加载”的策略进行初始化，也就是说，JVM启动的时候Attach Listener并不一定会启动起来。下面我们来分析一下这种“懒加载”策略的具体实现方案。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">  // Start Attach Listener if +StartAttachListener or it can&#39;t be started lazily</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">DisableAttachMechanism) {</span></span>
<span class="line"><span style="color:#E06C75;">    AttachListener</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">vm_start</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (StartAttachListener </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> AttachListener</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">init_at_startup</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#E06C75;">      AttachListener</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">init</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Attach Listener is started lazily except in the case when</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// +ReduseSignalUsage is used</span></span>
<span class="line"><span style="color:#E06C75;">bool AttachListener</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">init_at_startup</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#E06C75;"> (ReduceSignalUsage) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码截取自create_vm函数，DisableAttachMechanism、StartAttachListener和ReduceSignalUsage这三个变量默认都是false，所以AttachListener::init();这行代码不会在create_vm的时候执行，而vm_start会执行。下面来看一下这个函数的实现细节：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#E06C75;"> AttachListener</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">vm_start</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  char</span><span style="color:#E06C75;"> fn[UNIX_PATH_MAX]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  struct stat64 st</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  int</span><span style="color:#E06C75;"> ret</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  int</span><span style="color:#E06C75;"> n </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> snprintf</span><span style="color:#E06C75;">(fn</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> UNIX_PATH_MAX</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;%s/.java_pid%d&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">           os</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">get_temp_directory</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> os</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">current_process_id</span><span style="color:#E06C75;">())</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">  assert</span><span style="color:#E06C75;">(n </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)UNIX_PATH_MAX</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;java_pid file name buffer overflow&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">  RESTARTABLE</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">stat64</span><span style="color:#E06C75;">(fn</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">st)</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ret)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#E06C75;"> (ret </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    ret </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> ::</span><span style="color:#61AFEF;">unlink</span><span style="color:#E06C75;">(fn)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (ret </span><span style="color:#56B6C2;">==</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">      log_debug</span><span style="color:#E06C75;">(attach)(</span><span style="color:#98C379;">&quot;Failed to remove stale attach pid file at %s&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> fn)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是在Linux上的实现，是将/tmp/目录下的.java_pid{pid}文件删除，后面在创建Attach Listener线程的时候会创建出来这个文件。上面说到，AttachListener::init()这行代码不会在create_vm的时候执行，这行代码的实现已经在上文中分析了，就是创建Attach Listener线程，并监听其他JVM的命令请求。现在来分析一下这行代码是什么时候被调用的，也就是“懒加载”到底是怎么加载起来的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">  // Signal Dispatcher needs to be started before VMInit event is posted</span></span>
<span class="line"><span style="color:#E06C75;">  os</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">signal_init</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是create_vm中的一段代码，看起来跟信号相关，其实Attach机制就是使用信号来实现“懒加载“的。下面我们来仔细地分析一下这个过程。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#E06C75;"> os</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">signal_init</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">ReduceSignalUsage) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Setup JavaThread for processing signals</span></span>
<span class="line"><span style="color:#E06C75;">    EXCEPTION_MARK</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    Klass</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> k </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> SystemDictionary</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">resolve_or_fail</span><span style="color:#E06C75;">(vmSymbols</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">java_lang_Thread</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> CHECK)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    instanceKlassHandle </span><span style="color:#61AFEF;">klass</span><span style="color:#E06C75;"> (THREAD</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> k)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    instanceHandle thread_oop </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> klass</span><span style="color:#C678DD;">-&gt;</span><span style="color:#61AFEF;">allocate_instance_handle</span><span style="color:#E06C75;">(CHECK)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#C678DD;"> char</span><span style="color:#E06C75;"> thread_name[] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;Signal Dispatcher&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    Handle</span><span style="color:#E06C75;"> string </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> java_lang_String</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">create_from_str</span><span style="color:#E06C75;">(thread_name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> CHECK)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Initialize thread_oop to put it into the system threadGroup</span></span>
<span class="line"><span style="color:#E5C07B;">    Handle</span><span style="color:#61AFEF;"> thread_group</span><span style="color:#E06C75;"> (THREAD</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> Universe</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">system_thread_group</span><span style="color:#E06C75;">())</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    JavaValue</span><span style="color:#61AFEF;"> result</span><span style="color:#E06C75;">(T_VOID)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    JavaCalls</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">call_special</span><span style="color:#E06C75;">(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> thread_oop</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">klass</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">vmSymbols</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">object_initializer_name</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">vmSymbols</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">threadgroup_string_void_signature</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                           thread_group</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">CHECK)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    KlassHandle</span><span style="color:#61AFEF;"> group</span><span style="color:#E06C75;">(THREAD</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> SystemDictionary</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">ThreadGroup_klass</span><span style="color:#E06C75;">())</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    JavaCalls</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">call_special</span><span style="color:#E06C75;">(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">thread_group</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">group</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">vmSymbols</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">add_method_name</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">vmSymbols</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">thread_void_signature</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">thread_oop</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">CHECK)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    os</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">signal_init_pd</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    { </span><span style="color:#E5C07B;">MutexLocker</span><span style="color:#61AFEF;"> mu</span><span style="color:#E06C75;">(Threads_lock)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">      JavaThread</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> signal_thread </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> JavaThread</span><span style="color:#E06C75;">(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;">signal_thread_entry)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     // ...</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Handle ^BREAK</span></span>
<span class="line"><span style="color:#E06C75;">    os</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">signal</span><span style="color:#E06C75;">(SIGBREAK</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> os</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">user_handler</span><span style="color:#E06C75;">())</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JVM创建了一个新的进程来实现信号处理，这个线程叫“Signal Dispatcher”，一个线程创建之后需要有一个入口，“Signal Dispatcher”的入口是signal_thread_entry：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这段代码截取自signal_thread_entry函数，截取中的内容是和Attach机制信号处理相关的代码。这段代码的意思是，当接收到“SIGBREAK”信号，就执行接下来的代码，这个信号是需要Attach到JVM上的信号发出来，这个后面会再分析。我们先来看一句关键的代码：AttachListener::is_init_trigger()：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">bool AttachListener</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">is_init_trigger</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">init_at_startup</span><span style="color:#E06C75;">() </span><span style="color:#56B6C2;">||</span><span style="color:#61AFEF;"> is_initialized</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">               // initialized at startup or already initialized</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  char</span><span style="color:#E06C75;"> fn[PATH_MAX</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">  sprintf</span><span style="color:#E06C75;">(fn</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;.attach_pid%d&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> os</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">current_process_id</span><span style="color:#E06C75;">())</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  int</span><span style="color:#E06C75;"> ret</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  struct stat64 st</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">  RESTARTABLE</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">stat64</span><span style="color:#E06C75;">(fn</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">st)</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ret)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#E06C75;"> (ret </span><span style="color:#56B6C2;">==</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    log_trace</span><span style="color:#E06C75;">(attach)(</span><span style="color:#98C379;">&quot;Failed to find attach file: %s, trying alternate&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> fn)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    snprintf</span><span style="color:#E06C75;">(fn</span><span style="color:#ABB2BF;">,</span><span style="color:#61AFEF;"> sizeof</span><span style="color:#E06C75;">(fn)</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;%s/.attach_pid%d&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> os</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">get_temp_directory</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> os</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">current_process_id</span><span style="color:#E06C75;">())</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    RESTARTABLE</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">stat64</span><span style="color:#E06C75;">(fn</span><span style="color:#ABB2BF;">,</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;">st)</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ret)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#E06C75;"> (ret </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // simple check to avoid starting the attach mechanism when</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // a bogus user creates the file</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">st</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">st_uid</span><span style="color:#56B6C2;"> ==</span><span style="color:#61AFEF;"> geteuid</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">      init</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先检查了一下是否在JVM启动时启动了Attach Listener，或者是否已经启动过。如果没有，才继续执行，在/tmp目录下创建一个叫做.attach_pid%d的文件，然后执行AttachListener的init函数，这个函数就是用来创建Attach Listener线程的函数，上面已经提到多次并进行了分析。到此，我们知道Attach机制的奥秘所在，也就是Attach Listener线程的创建依靠Signal Dispatcher线程，Signal Dispatcher是用来处理信号的线程，当Signal Dispatcher线程接收到“SIGBREAK”信号之后，就会执行初始化Attach Listener的工作。</p><h3 id="运行时加载agent的实现" tabindex="-1"><a class="header-anchor" href="#运行时加载agent的实现"><span><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8A%A0%E8%BD%BDagent%E7%9A%84%E5%AE%9E%E7%8E%B0">#</a> 运行时加载Agent的实现</span></a></h3><p>我们继续分析，到底是如何将一个Agent挂载到运行着的目标JVM上，在上文中提到了一段代码，用来进行运行时挂载Agent，可以参考上文中展示的关于“attachAgentToTargetJvm”方法的代码。这个方法里面的关键是调用VirtualMachine的attach方法进行Agent挂载的功能。下面我们就来分析一下VirtualMachine的attach方法具体是怎么实现的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> VirtualMachine</span><span style="color:#61AFEF;"> attach</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> var0) throws AttachNotSupportedException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> IOException {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (var0 </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NullPointerException</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;id cannot be null&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        List</span><span style="color:#E06C75;"> var1 </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> AttachProvider</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">providers</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">var1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> AttachNotSupportedException</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;no providers installed&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            AttachNotSupportedException</span><span style="color:#E06C75;"> var2 </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            Iterator</span><span style="color:#E06C75;"> var3 </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> var1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iterator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">var3</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                AttachProvider</span><span style="color:#E06C75;"> var4 </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (AttachProvider)</span><span style="color:#E5C07B;">var3</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#E5C07B;"> var4</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">attachVirtualMachine</span><span style="color:#ABB2BF;">(var0);</span></span>
<span class="line"><span style="color:#E06C75;">                } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">AttachNotSupportedException</span><span style="color:#E06C75;font-style:italic;"> var6</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                    var2 </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> var6</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#E06C75;"> var2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法通过attachVirtualMachine方法进行attach操作，在MacOS系统中，AttachProvider的实现类是BsdAttachProvider。我们来看一下BsdAttachProvider的attachVirtualMachine方法是如何实现的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> VirtualMachine</span><span style="color:#61AFEF;"> attachVirtualMachine</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> var1) throws AttachNotSupportedException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> IOException {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkAttachPermission</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">testAttachable</span><span style="color:#ABB2BF;">(var1);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BsdVirtualMachine</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> var1)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#61AFEF;">BsdVirtualMachine</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">AttachProvider</span><span style="color:#E06C75;"> var1</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> var2) throws AttachNotSupportedException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> IOException {</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> var3 </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseInt</span><span style="color:#ABB2BF;">(var2);</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">path</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findSocketFile</span><span style="color:#ABB2BF;">(var3);</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">path</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        File</span><span style="color:#E06C75;"> var4 </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> File</span><span style="color:#E06C75;">(tmpdir</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;.attach_pid&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> var3)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        createAttachFile</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">var4</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPath</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            sendQuitTo</span><span style="color:#E06C75;">(var3)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> var5 </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            long</span><span style="color:#E06C75;"> var6 </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 200L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> var8 </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">attachTimeout</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> /</span><span style="color:#E06C75;"> var6)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            do</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                    Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(var6);</span></span>
<span class="line"><span style="color:#E06C75;">                } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> var21</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    ;</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E5C07B;">                this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">path</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findSocketFile</span><span style="color:#ABB2BF;">(var3);</span></span>
<span class="line"><span style="color:#ABB2BF;">                ++</span><span style="color:#E06C75;">var5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            } </span><span style="color:#C678DD;">while</span><span style="color:#E06C75;">(var5 </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#E06C75;"> var8 </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">path</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            var4</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">delete</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> var24 </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> socket</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    connect</span><span style="color:#E06C75;">(var24</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">path</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> findSocketFile</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> var1) {</span></span>
<span class="line"><span style="color:#E5C07B;">    String</span><span style="color:#E06C75;"> var2 </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;.java_pid&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> var1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    File</span><span style="color:#E06C75;"> var3 </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> File</span><span style="color:#E06C75;">(tmpdir</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> var2)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> var3</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exists</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> var3</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPath</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> :</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>findSocketFile方法用来查询目标JVM上是否已经启动了Attach Listener，它通过检查”tmp/“目录下是否存在java_pid{pid}来进行实现。如果已经存在了，则说明Attach机制已经准备就绪，可以接受客户端的命令了，这个时候客户端就可以通过connect连接到目标JVM进行命令的发送，比如可以发送“load”命令来加载Agent。如果java_pid{pid}文件还不存在，则需要通过sendQuitTo方法向目标JVM发送一个“SIGBREAK”信号，让它初始化Attach Listener线程并准备接受客户端连接。可以看到，发送了信号之后客户端会循环等待java_pid{pid}这个文件，之后再通过connect连接到目标JVM上。</p><h3 id="load命令的实现" tabindex="-1"><a class="header-anchor" href="#load命令的实现"><span><a href="#load%E5%91%BD%E4%BB%A4%E7%9A%84%E5%AE%9E%E7%8E%B0">#</a> load命令的实现</span></a></h3><p>下面来分析一下，“load”命令在JVM层面的实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> jint </span><span style="color:#61AFEF;">load_agent</span><span style="color:#E06C75;">(AttachOperation</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> op</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> outputStream</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> out) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // get agent name and options</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#C678DD;"> char</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> agent </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> op</span><span style="color:#C678DD;">-&gt;</span><span style="color:#61AFEF;">arg</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">0</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#C678DD;"> char</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> absParam </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> op</span><span style="color:#C678DD;">-&gt;</span><span style="color:#61AFEF;">arg</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#C678DD;"> char</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> options </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> op</span><span style="color:#C678DD;">-&gt;</span><span style="color:#61AFEF;">arg</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">2</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // If loading a java agent then need to ensure that the java.instrument module is loaded</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">strcmp</span><span style="color:#E06C75;">(agent</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;instrument&quot;</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    Thread</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> THREAD </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> Thread</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">current</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    ResourceMark</span><span style="color:#61AFEF;"> rm</span><span style="color:#E06C75;">(THREAD)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    HandleMark</span><span style="color:#61AFEF;"> hm</span><span style="color:#E06C75;">(THREAD)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    JavaValue</span><span style="color:#61AFEF;"> result</span><span style="color:#E06C75;">(T_OBJECT)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    Handle</span><span style="color:#E06C75;"> h_module_name </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> java_lang_String</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">create_from_str</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;java.instrument&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> THREAD)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    JavaCalls</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">call_static</span><span style="color:#E06C75;">(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">SystemDictionary</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">module_Modules_klass</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">vmSymbols</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">loadModule_name</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                           vmSymbols</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">loadModule_signature</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">h_module_name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">THREAD)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> JvmtiExport</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">load_agent_library</span><span style="color:#E06C75;">(agent</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> absParam</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> out)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数先确保加载了java.instrument模块，之后真正执行Agent加载的函数是 load_agent_library ,这个函数的套路就是加载Agent动态链接库，如果是通过Java instrument API实现的Agent，则加载的是libinstrument动态链接库，然后通过libinstrument里面的代码实现运行agentmain方法的逻辑，这一部分内容和libinstrument实现premain方法运行的逻辑其实差不多，这里不再做分析。至此，我们对Java Agent技术已经有了一个全面而细致的了解。</p><h2 id="动态字节码修改的限制" tabindex="-1"><a class="header-anchor" href="#动态字节码修改的限制"><span><a href="#%E5%8A%A8%E6%80%81%E5%AD%97%E8%8A%82%E7%A0%81%E4%BF%AE%E6%94%B9%E7%9A%84%E9%99%90%E5%88%B6">#</a> 动态字节码修改的限制</span></a></h2><p>上文中已经详细分析了Agent技术的实现，我们使用Java Instrumentation API来完成动态类修改的功能，在Instrumentation接口中，通过addTransformer方法来增加一个类转换器，类转换器由类ClassFileTransformer接口实现。ClassFileTransformer接口中唯一的方法transform用于实现类转换，当类被加载的时候，就会调用transform方法，进行类转换。在运行时，我们可以通过Instrumentation的redefineClasses方法进行类重定义，在方法上有一段注释需要特别注意：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">     *</span><span style="color:#E5C07B;"> The</span><span style="color:#E06C75;"> redefinition may change method bodies</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> the constant pool and attributes</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#56B6C2;">     *</span><span style="color:#E5C07B;"> The</span><span style="color:#E06C75;"> redefinition must not add</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> remove or rename fields or methods</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> change the</span></span>
<span class="line"><span style="color:#56B6C2;">     *</span><span style="color:#E06C75;"> signatures of methods</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> or change </span><span style="color:#E5C07B;">inheritance</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">  These</span><span style="color:#E06C75;"> restrictions maybe be</span></span>
<span class="line"><span style="color:#56B6C2;">     *</span><span style="color:#E06C75;"> lifted in future </span><span style="color:#E5C07B;">versions</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">  The</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> file</span><span style="color:#E06C75;"> bytes are not checked, verified and installed</span></span>
<span class="line"><span style="color:#E06C75;">     * until after the transformations have been applied, if the resultant bytes are in</span></span>
<span class="line"><span style="color:#E06C75;">     * error this method will throw an exception.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面提到，我们不可以增加、删除或者重命名字段和方法，改变方法的签名或者类的继承关系。认识到这一点很重要，当我们通过ASM获取到增强的字节码之后，如果增强后的字节码没有遵守这些规则，那么调用redefineClasses方法来进行类的重定义就会失败。那redefineClasses方法具体是怎么实现类的重定义的呢? 它对运行时的JVM会造成什么样的影响呢? 下面来分析redefineClasses的实现细节。</p><h2 id="重定义类字节码的实现细节" tabindex="-1"><a class="header-anchor" href="#重定义类字节码的实现细节"><span><a href="#%E9%87%8D%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82">#</a> 重定义类字节码的实现细节</span></a></h2><p>上文中我们提到，libinstrument动态链接库中，JPLISAgent不仅实现了Agent入口代码执行的路由，而且还是Java代码与JVMTI之间的一道桥梁。我们在Java代码中调用Java Instrumentation API的redefineClasses，其实会调用libinstrument中的相关代码，我们来分析一下这条路径。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> redefineClasses</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">ClassDefinition</span><span style="color:#ABB2BF;">...</span><span style="color:#E5C07B;"> var1</span><span style="color:#E06C75;">) throws ClassNotFoundException {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isRedefineClassesSupported</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> UnsupportedOperationException</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;redefineClasses is not supported in this environment&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (var1 </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NullPointerException</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;null passed as &#39;definitions&#39; in redefineClasses&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> var2 </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> var2 </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;"> var1</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span><span style="color:#ABB2BF;"> ++</span><span style="color:#E06C75;">var2) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (var1[var2] </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NullPointerException</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;element of &#39;definitions&#39; is null in redefineClasses&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">var1</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">redefineClasses0</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">mNativeAgent</span><span style="color:#ABB2BF;">, var1);</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> native</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> redefineClasses0</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> var1</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> ClassDefinition</span><span style="color:#E06C75;">[] var3) throws ClassNotFoundException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是InstrumentationImpl中的redefineClasses实现，该方法的具体实现依赖一个Native方法redefineClasses()，我们可以在libinstrument中找到这个Native方法的实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">JNIEXPORT</span><span style="color:#C678DD;"> void</span><span style="color:#E5C07B;"> JNICALL</span><span style="color:#E5C07B;"> Java_sun_instrument_InstrumentationImpl_redefineClasses0</span></span>
<span class="line"><span style="color:#E06C75;">  (JNIEnv </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> jnienv</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jobject implThis</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jlong agent</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jobjectArray classDefinitions) {</span></span>
<span class="line"><span style="color:#61AFEF;">    redefineClasses</span><span style="color:#E06C75;">(jnienv</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> (JPLISAgent</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">)(intptr_t)agent</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> classDefinitions)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>redefineClasses这个函数的实现比较复杂，代码很长。下面是一段关键的代码片段：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到，其实是调用了JVMTI的RetransformClasses函数来完成类的重定义细节。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// class_count - pre-checked to be greater than or equal to 0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// class_definitions - pre-checked for NULL</span></span>
<span class="line"><span style="color:#E06C75;">jvmtiError JvmtiEnv</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">RedefineClasses</span><span style="color:#E06C75;">(jint class_count</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> const</span><span style="color:#E06C75;"> jvmtiClassDefinition</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> class_definitions) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//TODO: add locking</span></span>
<span class="line"><span style="color:#E5C07B;">  VM_RedefineClasses</span><span style="color:#61AFEF;"> op</span><span style="color:#E06C75;">(class_count</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> class_definitions</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> jvmti_class_load_kind_redefine)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  VMThread</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">execute</span><span style="color:#E06C75;">(</span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;">op)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">op</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">check_error</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">} </span><span style="color:#7F848E;font-style:italic;">/* end RedefineClasses */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重定义类的请求会被JVM包装成一个VM_RedefineClasses类型的VM_Operation，VM_Operation是JVM内部的一些操作的基类，包括GC操作等。VM_Operation由VMThread来执行，新的VM_Operation操作会被添加到VMThread的运行队列中去，VMThread会不断从队列里面拉取VM_Operation并调用其doit等函数执行具体的操作。VM_RedefineClasses函数的流程较为复杂，下面是VM_RedefineClasses的大致流程：</p><ul><li>加载新的字节码，合并常量池，并且对新的字节码进行校验工作</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">  // Load the caller&#39;s new class definition(s) into _scratch_classes.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // Constant pool merging work is done here as needed. Also calls</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // compare_and_normalize_class_versions() to verify the class</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // definition(s).</span></span>
<span class="line"><span style="color:#E06C75;">  jvmtiError </span><span style="color:#61AFEF;">load_new_class_versions</span><span style="color:#E06C75;">(TRAPS)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>清除方法上的断点</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">  // Remove all breakpoints in methods of this class</span></span>
<span class="line"><span style="color:#E06C75;">  JvmtiBreakpoints</span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> jvmti_breakpoints </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> JvmtiCurrentBreakpoints</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">get_jvmti_breakpoints</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">  jvmti_breakpoints</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clearall_in_class_at_safepoint</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">the_class</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JIT逆优化</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">  // Deoptimize all compiled code that depends on this class</span></span>
<span class="line"><span style="color:#61AFEF;">  flush_dependent_code</span><span style="color:#E06C75;">(the_class</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> THREAD)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>进行字节码替换工作，需要进行更新类itable/vtable等操作</li><li>进行类重定义通知</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">  SystemDictionary</span><span style="color:#C678DD;">::</span><span style="color:#61AFEF;">notice_modification</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,68),E={href:"https://github.com/pandening/openjdk/blob/0301fc792ffd3c7b506ef78887af250e0e3ae09e/src/hotspot/share/prims/jvmtiEnv.cpp#L456",target:"_blank",rel:"noopener noreferrer"},v=e('<h2 id="java-debug-tool" tabindex="-1"><a class="header-anchor" href="#java-debug-tool"><span><a href="#java-debug-tool">#</a> Java-debug-tool</span></a></h2><p>Java-debug-tool是一个使用Java Instrument API来实现的动态调试工具，它通过在目标JVM上启动一个TcpServer来和调试客户端通信。调试客户端通过命令行来发送调试命令给TcpServer，TcpServer中有专门用来处理命令的handler，handler处理完命令之后会将结果发送回客户端，客户端通过处理将调试结果展示出来。下面将详细介绍Java-debug-tool的整体设计和实现。</p><h3 id="java-debug-tool整体架构" tabindex="-1"><a class="header-anchor" href="#java-debug-tool整体架构"><span><a href="#java-debug-tool%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84">#</a> Java-debug-tool整体架构</span></a></h3><p>Java-debug-tool包括一个Java Agent和一个用于处理调试命令的核心API，核心API通过一个自定义的类加载器加载进来，以保证目标JVM的类不会被污染。整体上Java-debug-tool的设计是一个Client-Server的架构，命令客户端需要完整的完成一个命令之后才能继续执行下一个调试命令。Java-debug-tool支持多人同时进行调试，下面是整体架构图：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>下面对每一层做简单介绍：</p><ul><li>交互层：负责将程序员的输入转换成调试交互协议，并且将调试信息呈现出来。</li><li>连接管理层：负责管理客户端连接，从连接中读调试协议数据并解码，对调试结果编码并将其写到连接中去；同时将那些超时未活动的连接关闭。</li><li>业务逻辑层：实现调试命令处理，包括命令分发、数据收集、数据处理等过程。</li><li>基础实现层：Java-debug-tool实现的底层依赖，通过Java Instrumentation提供的API进行类查找、类重定义等能力，Java Instrumentation底层依赖JVMTI来完成具体的功能。</li></ul><p>在Agent被挂载到目标JVM上之后，Java-debug-tool会安排一个Spy在目标JVM内活动，这个Spy负责将目标JVM内部的相关调试数据转移到命令处理模块，命令处理模块会处理这些数据，然后给客户端返回调试结果。命令处理模块会增强目标类的字节码来达到数据获取的目的，多个客户端可以共享一份增强过的字节码，无需重复增强。下面从Java-debug-tool的字节码增强方案、命令设计与实现等角度详细说明。</p><h3 id="java-debug-tool的字节码增强方案" tabindex="-1"><a class="header-anchor" href="#java-debug-tool的字节码增强方案"><span><a href="#java-debug-tool%E7%9A%84%E5%AD%97%E8%8A%82%E7%A0%81%E5%A2%9E%E5%BC%BA%E6%96%B9%E6%A1%88">#</a> Java-debug-tool的字节码增强方案</span></a></h3><p>Java-debug-tool使用字节码增强来获取到方法运行时的信息，比如方法入参、出参等，可以在不同的字节码位置进行增强，这种行为可以称为“插桩”，每个“桩”用于获取数据并将他转储出去。Java-debug-tool具备强大的插桩能力，不同的桩负责获取不同类别的数据，下面是Java-debug-tool目前所支持的“桩”：</p><ul><li>方法进入点：用于获取方法入参信息。</li><li>Fields获取点1：在方法执行前获取到对象的字段信息。</li><li>变量存储点：获取局部变量信息。</li><li>Fields获取点2：在方法退出前获取到对象的字段信息。</li><li>方法退出点：用于获取方法返回值。</li><li>抛出异常点：用于获取方法抛出的异常信息。</li><li>通过上面这些代码桩，Java-debug-tool可以收集到丰富的方法执行信息，经过处理可以返回更加可视化的调试结果。</li></ul><h4 id="字节码增强" tabindex="-1"><a class="header-anchor" href="#字节码增强"><span><a href="#%E5%AD%97%E8%8A%82%E7%A0%81%E5%A2%9E%E5%BC%BA">#</a> 字节码增强</span></a></h4><p>Java-debug-tool在实现上使用了ASM工具来进行字节码增强，并且每个插桩点都可以进行配置，如果不想要什么信息，则没必要进行对应的插桩操作。这种可配置的设计是非常有必要的，因为有时候我们仅仅是想要知道方法的入参和出参，但Java-debug-tool却给我们返回了所有的调试信息，这样我们就得在众多的输出中找到我们所关注的内容。如果可以进行配置，则除了入参点和出参点外其他的桩都不插，那么就可以快速看到我们想要的调试数据，这种设计的本质是为了让调试者更加专注。下面是Java-debug-tool的字节码增强工作方式：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如图所示，当调试者发出调试命令之后，Java-debug-tool会识别命令并判断是否需要进行字节码增强，如果命令需要增强字节码，则判断当前类+当前方法是否已经被增强过。上文已经提到，字节码替换是有一定损耗的，这种具有损耗的操作发生的次数越少越好，所以字节码替换操作会被记录起来，后续命令直接使用即可，不需要重复进行字节码增强，字节码增强还涉及多个调试客户端的协同工作问题，当一个客户端增强了一个类的字节码之后，这个客户端就锁定了该字节码，其他客户端变成只读，无法对该类进行字节码增强，只有当持有锁的客户端主动释放锁或者断开连接之后，其他客户端才能继续增强该类的字节码。</p><p>字节码增强模块收到字节码增强请求之后，会判断每个增强点是否需要插桩，这个判断的根据就是上文提到的插桩配置，之后字节码增强模块会生成新的字节码，Java-debug-tool将执行字节码替换操作，之后就可以进行调试数据收集了。</p><p>经过字节码增强之后，原来的方法中会插入收集运行时数据的代码，这些代码在方法被调用的时候执行，获取到诸如方法入参、局部变量等信息，这些信息将传递给数据收集装置进行处理。数据收集的工作通过Advice完成，每个客户端同一时间只能注册一个Advice到Java-debug-tool调试模块上，多个客户端可以同时注册自己的Advice到调试模块上。Advice负责收集数据并进行判断，如果当前数据符合调试命令的要求，Java-debug-tool就会卸载这个Advice，Advice的数据就会被转移到Java-debug-tool的命令结果处理模块进行处理，并将结果发送到客户端。</p><h4 id="advice的工作方式" tabindex="-1"><a class="header-anchor" href="#advice的工作方式"><span><a href="#advice%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F">#</a> Advice的工作方式</span></a></h4><p>Advice是调试数据收集器，不同的调试策略会对应不同的Advice。Advice是工作在目标JVM的线程内部的，它需要轻量级和高效，意味着Advice不能做太过于复杂的事情，它的核心接口“match”用来判断本次收集到的调试数据是否满足调试需求。如果满足，那么Java-debug-tool就会将其卸载，否则会继续让他收集调试数据，这种“加载Advice” -&gt; “卸载Advice”的工作模式具备很好的灵活性。</p><p>关于Advice，需要说明的另外一点就是线程安全，因为它加载之后会运行在目标JVM的线程中，目标JVM的方法极有可能是多线程访问的，这也就是说，Advice需要有能力处理多个线程同时访问方法的能力，如果Advice处理不当，则可能会收集到杂乱无章的调试数据。下面的图片展示了Advice和Java-debug-tool调试分析模块、目标方法执行以及调试客户端等模块的关系。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Advice的首次挂载由Java-debug-tool的命令处理器完成，当一次调试数据收集完成之后，调试数据处理模块会自动卸载Advice，然后进行判断，如果调试数据符合Advice的策略，则直接将数据交由数据处理模块进行处理，否则会清空调试数据，并再次将Advice挂载到目标方法上去，等待下一次调试数据。非首次挂载由调试数据处理模块进行，它借助Advice按需取数据，如果不符合需求，则继续挂载Advice来获取数据，否则对调试数据进行处理并返回给客户端。</p><h3 id="java-debug-tool的命令设计与实现" tabindex="-1"><a class="header-anchor" href="#java-debug-tool的命令设计与实现"><span><a href="#java-debug-tool%E7%9A%84%E5%91%BD%E4%BB%A4%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0">#</a> Java-debug-tool的命令设计与实现</span></a></h3><h4 id="命令执行" tabindex="-1"><a class="header-anchor" href="#命令执行"><span><a href="#%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C">#</a> 命令执行</span></a></h4><p>上文已经完整的描述了Java-debug-tool的设计以及核心技术方案，本小节将详细介绍Java-debug-tool的命令设计与实现。首先需要将一个调试命令的执行流程描述清楚，下面是一张用来表示命令请求处理流程的图片：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上图简单的描述了Java-debug-tool的命令处理方式，客户端连接到服务端之后，会进行一些协议解析、协议认证、协议填充等工作，之后将进行命令分发。服务端如果发现客户端的命令不合法，则会立即返回错误信息，否则再进行命令处理。命令处理属于典型的三段式处理，前置命令处理、命令处理以及后置命令处理，同时会对命令处理过程中的异常信息进行捕获处理，三段式处理的好处是命令处理被拆成了多个阶段，多个阶段负责不同的职责。前置命令处理用来做一些命令权限控制的工作，并填充一些类似命令处理开始时间戳等信息，命令处理就是通过字节码增强，挂载Advice进行数据收集，再经过数据处理来产生命令结果的过程，后置处理则用来处理一些连接关闭、字节码解锁等事项。</p><p>Java-debug-tool允许客户端设置一个命令执行超时时间，超过这个时间则认为命令没有结果，如果客户端没有设置自己的超时时间，就使用默认的超时时间进行超时控制。Java-debug-tool通过设计了两阶段的超时检测机制来实现命令执行超时功能：首先，第一阶段超时触发，则Java-debug-tool会友好的警告命令处理模块处理时间已经超时，需要立即停止命令执行，这允许命令自己做一些现场清理工作，当然需要命令执行线程自己感知到这种超时警告；当第二阶段超时触发，则Java-debug-tool认为命令必须结束执行，会强行打断命令执行线程。超时机制的目的是为了不让命令执行太长时间，命令如果长时间没有收集到调试数据，则应该停止执行，并思考是否调试了一个错误的方法。当然，超时机制还可以定期清理那些因为未知原因断开连接的客户端持有的调试资源，比如字节码锁。</p><h4 id="获取方法执行视图" tabindex="-1"><a class="header-anchor" href="#获取方法执行视图"><span><a href="#%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E8%A7%86%E5%9B%BE">#</a> 获取方法执行视图</span></a></h4><p>Java-debug-tool通过下面的信息来向调试者呈现出一次方法执行的视图：</p><ul><li>正在调试的方法信息。</li><li>方法调用堆栈。</li><li>调试耗时，包括对目标JVM造成的STW时间。</li><li>方法入参，包括入参的类型及参数值。</li><li>方法的执行路径。</li><li>代码执行耗时。</li><li>局部变量信息。</li><li>方法返回结果。</li><li>方法抛出的异常。</li><li>对象字段值快照。</li></ul><p>下图展示了Java-debug-tool获取到正在运行的方法的执行视图的信息。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="java-debug-tool与同类产品对比分析" tabindex="-1"><a class="header-anchor" href="#java-debug-tool与同类产品对比分析"><span><a href="#java-debug-tool%E4%B8%8E%E5%90%8C%E7%B1%BB%E4%BA%A7%E5%93%81%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90">#</a> Java-debug-tool与同类产品对比分析</span></a></h3><p>Java-debug-tool的同类产品主要是greys，其他类似的工具大部分都是基于greys进行的二次开发，所以直接选择greys来和Java-debug-tool进行对比。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-8.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>本文详细剖析了Java动态调试关键技术的实现细节，并介绍了我们基于Java动态调试技术结合实际故障排查场景进行的一点探索实践；动态调试技术为研发人员进行线上问题排查提供了一种新的思路，我们基于动态调试技术解决了传统断点调试存在的问题，使得可以将断点调试这种技术应用在线上，以线下调试的思维来进行线上调试，提高问题排查效率。</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献"><span><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">#</a> 参考文献</span></a></h2>',38),C={href:"https://asm.ow2.io/asm4-guide.pdf",target:"_blank",rel:"noopener noreferrer"},u={href:"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://alibaba.github.io/arthas/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://github.com/pandening/openjdk",target:"_blank",rel:"noopener noreferrer"};function b(g,h){const n=o("ExternalLinkIcon");return t(),r("div",null,[s("blockquote",null,[s("p",null,[a("本文转载自 美团技术团队胡健的"),s("a",i,[a("Java 动态调试技术原理及实践在新窗口打开"),l(n)]),a(", 通过学习java agent方式进行动态调试了解目前很多大厂开源的一些基于此的调试工具。")])]),y,s("p",null,[a("create_vm_init_agents这个函数通过遍历Agent链表来逐个加载Agent。通过这段代码可以看出，首先通过lookup_agent_on_load来加载Agent并且找到Agent_OnLoad函数，这个函数是Agent的入口函数。如果没找到这个函数，则认为是加载了一个不合法的Agent，则什么也不做，否则调用这个函数，这样Agent的代码就开始执行起来了。对于使用Java Instrumentation API来编写Agent的方式来说，在解析阶段观察到在add_init_agent函数里面传递进去的是一个叫做”instrument”的字符串，其实这是一个动态链接库。在Linux里面，"),s("a",d,[a("这个库叫做libinstrument.so"),l(n)]),a("，在BSD系统中叫做libinstrument.dylib，该动态链接库在{JAVA_HOME}/jre/lib/目录下。")]),B,s("p",null,[a("VM_RedefineClasses实现比较复杂的，详细实现可以参考 "),s("a",E,[a("RedefineClasses在新窗口打开"),l(n)]),a("的实现。")]),v,s("ul",null,[s("li",null,[s("a",C,[a("ASM 4 guide在新窗口打开"),l(n)])]),s("li",null,[s("a",u,[a("Java Virtual Machine Specification在新窗口打开"),l(n)])]),s("li",null,[s("a",A,[a("JVM Tool Interface在新窗口打开"),l(n)])]),s("li",null,[s("a",m,[a("alibaba arthas在新窗口打开"),l(n)])]),s("li",null,[s("a",F,[a("openjdk"),l(n)])])])])}const f=p(c,[["render",b],["__file","调试排错 Java动态调试技术原理.html.vue"]]),_=JSON.parse(`{"path":"/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86.html","title":"调试排错 Java动态调试技术原理","lang":"zh-CN","frontmatter":{"title":"调试排错 Java动态调试技术原理","subtitle":"Java，Java开发，Java 体系","date":"2024-03-17T17:08:41.000Z","category":["Java"],"tag":["Java","JVM"],"order":21,"description":"本文转载自 美团技术团队胡健的Java 动态调试技术原理及实践在新窗口打开, 通过学习java agent方式进行动态调试了解目前很多大厂开源的一些基于此的调试工具。 调试排错 Java动态调试技术原理 简介 Agent的实现模式 通过Java Instrumentation API 启动时加载Agent 参数解析 执行加载操作 instrument动...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"调试排错 Java动态调试技术原理"}],["meta",{"property":"og:description","content":"本文转载自 美团技术团队胡健的Java 动态调试技术原理及实践在新窗口打开, 通过学习java agent方式进行动态调试了解目前很多大厂开源的一些基于此的调试工具。 调试排错 Java动态调试技术原理 简介 Agent的实现模式 通过Java Instrumentation API 启动时加载Agent 参数解析 执行加载操作 instrument动..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T10:01:39.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2024-03-17T17:08:41.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T10:01:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"调试排错 Java动态调试技术原理\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-1.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-2.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-3.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-4.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-5.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-6.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-7.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-8.jpg\\"],\\"datePublished\\":\\"2024-03-17T17:08:41.000Z\\",\\"dateModified\\":\\"2024-03-22T10:01:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"# Agent的实现模式","slug":"agent的实现模式","link":"#agent的实现模式","children":[{"level":3,"title":"# 通过Java Instrumentation API","slug":"通过java-instrumentation-api","link":"#通过java-instrumentation-api","children":[]}]},{"level":2,"title":"# 启动时加载Agent","slug":"启动时加载agent","link":"#启动时加载agent","children":[{"level":3,"title":"# 参数解析","slug":"参数解析","link":"#参数解析","children":[]},{"level":3,"title":"# 执行加载操作","slug":"执行加载操作","link":"#执行加载操作","children":[]},{"level":3,"title":"# instrument动态链接库","slug":"instrument动态链接库","link":"#instrument动态链接库","children":[]}]},{"level":2,"title":"# 运行时加载Agent","slug":"运行时加载agent","link":"#运行时加载agent","children":[{"level":3,"title":"# AttachListener","slug":"attachlistener","link":"#attachlistener","children":[]},{"level":3,"title":"# 运行时加载Agent的实现","slug":"运行时加载agent的实现","link":"#运行时加载agent的实现","children":[]},{"level":3,"title":"# load命令的实现","slug":"load命令的实现","link":"#load命令的实现","children":[]}]},{"level":2,"title":"# 动态字节码修改的限制","slug":"动态字节码修改的限制","link":"#动态字节码修改的限制","children":[]},{"level":2,"title":"# 重定义类字节码的实现细节","slug":"重定义类字节码的实现细节","link":"#重定义类字节码的实现细节","children":[]},{"level":2,"title":"# Java-debug-tool","slug":"java-debug-tool","link":"#java-debug-tool","children":[{"level":3,"title":"# Java-debug-tool整体架构","slug":"java-debug-tool整体架构","link":"#java-debug-tool整体架构","children":[]},{"level":3,"title":"# Java-debug-tool的字节码增强方案","slug":"java-debug-tool的字节码增强方案","link":"#java-debug-tool的字节码增强方案","children":[]},{"level":3,"title":"# Java-debug-tool的命令设计与实现","slug":"java-debug-tool的命令设计与实现","link":"#java-debug-tool的命令设计与实现","children":[]},{"level":3,"title":"# Java-debug-tool与同类产品对比分析","slug":"java-debug-tool与同类产品对比分析","link":"#java-debug-tool与同类产品对比分析","children":[]}]},{"level":2,"title":"# 参考文献","slug":"参考文献","link":"#参考文献","children":[]}],"git":{"createdTime":1710667754000,"updatedTime":1711101699000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":32.15,"words":9645},"filePathRelative":"posts/Java/JVM/调试排错 Java动态调试技术原理.md","localizedDate":"2024年3月17日","excerpt":"<blockquote>\\n<p>本文转载自 美团技术团队胡健的<a href=\\"https://tech.meituan.com/2019/11/07/java-dynamic-debugging-technology.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Java 动态调试技术原理及实践在新窗口打开</a>, 通过学习java agent方式进行动态调试了解目前很多大厂开源的一些基于此的调试工具。</p>\\n</blockquote>\\n<ul>\\n<li>调试排错 Java动态调试技术原理\\n<ul>\\n<li><a href=\\"#%E7%AE%80%E4%BB%8B\\">简介</a></li>\\n<li>Agent的实现模式\\n<ul>\\n<li><a href=\\"#%E9%80%9A%E8%BF%87java-instrumentation-api\\">通过Java Instrumentation API</a></li>\\n</ul>\\n</li>\\n<li>启动时加载Agent\\n<ul>\\n<li><a href=\\"#%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90\\">参数解析</a></li>\\n<li><a href=\\"#%E6%89%A7%E8%A1%8C%E5%8A%A0%E8%BD%BD%E6%93%8D%E4%BD%9C\\">执行加载操作</a></li>\\n<li><a href=\\"#instrument%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93\\">instrument动态链接库</a></li>\\n</ul>\\n</li>\\n<li>运行时加载Agent\\n<ul>\\n<li><a href=\\"#attachlistener\\">AttachListener</a></li>\\n<li><a href=\\"#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8A%A0%E8%BD%BDagent%E7%9A%84%E5%AE%9E%E7%8E%B0\\">运行时加载Agent的实现</a></li>\\n<li><a href=\\"#load%E5%91%BD%E4%BB%A4%E7%9A%84%E5%AE%9E%E7%8E%B0\\">load命令的实现</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8A%A8%E6%80%81%E5%AD%97%E8%8A%82%E7%A0%81%E4%BF%AE%E6%94%B9%E7%9A%84%E9%99%90%E5%88%B6\\">动态字节码修改的限制</a></li>\\n<li><a href=\\"#%E9%87%8D%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82\\">重定义类字节码的实现细节</a></li>\\n<li>Java-debug-tool\\n<ul>\\n<li><a href=\\"#java-debug-tool%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84\\">Java-debug-tool整体架构</a></li>\\n<li>Java-debug-tool的字节码增强方案\\n<ul>\\n<li><a href=\\"#%E5%AD%97%E8%8A%82%E7%A0%81%E5%A2%9E%E5%BC%BA\\">字节码增强</a></li>\\n<li><a href=\\"#advice%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F\\">Advice的工作方式</a></li>\\n</ul>\\n</li>\\n<li>Java-debug-tool的命令设计与实现\\n<ul>\\n<li><a href=\\"#%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C\\">命令执行</a></li>\\n<li><a href=\\"#%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E8%A7%86%E5%9B%BE\\">获取方法执行视图</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#java-debug-tool%E4%B8%8E%E5%90%8C%E7%B1%BB%E4%BA%A7%E5%93%81%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90\\">Java-debug-tool与同类产品对比分析</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\\">参考文献</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{f as comp,_ as data};
