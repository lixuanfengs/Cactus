import{_ as a,c as n,f as l,o as e}from"./app-BwOCprK4.js";const p={};function o(c,s){return e(),n("div",null,s[0]||(s[0]=[l(`<blockquote><p>ThreadLocal是通过线程隔离的方式防止任务在共享资源上产生冲突, 线程本地存储是一种自动化机制，可以为使用相同变量的每个不同线程都创建不同的存储。</p></blockquote><ul><li>Java 并发之 ThreadLocal 详解 <ul><li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li><li><a href="#threadlocal%E7%AE%80%E4%BB%8B">ThreadLocal简介</a></li><li><a href="#threadlocal%E7%90%86%E8%A7%A3">ThreadLocal理解</a></li><li>ThreadLocal原理 <ul><li><a href="#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E9%9A%94%E7%A6%BB">如何实现线程隔离</a></li><li><a href="#threadlocalmap%E5%AF%B9%E8%B1%A1%E6%98%AF%E4%BB%80%E4%B9%88">ThreadLocalMap对象是什么</a></li></ul></li><li><a href="#threadlocal%E9%80%A0%E6%88%90%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E9%97%AE%E9%A2%98">ThreadLocal造成内存泄露的问题</a></li><li>再看ThreadLocal应用场景 <ul><li><a href="#%E6%AF%8F%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%BB%B4%E6%8A%A4%E4%BA%86%E4%B8%80%E4%B8%AA%E5%BA%8F%E5%88%97%E5%8F%B7">每个线程维护了一个“序列号”</a></li><li><a href="#session%E7%9A%84%E7%AE%A1%E7%90%86">Session的管理</a></li><li><a href="#%E5%9C%A8%E7%BA%BF%E7%A8%8B%E5%86%85%E9%83%A8%E5%88%9B%E5%BB%BAthreadlocal">在线程内部创建ThreadLocal</a></li><li><a href="#java-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E4%B8%AD%E6%8E%A8%E8%8D%90%E7%9A%84-threadlocal">java 开发手册中推荐的 ThreadLocal</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="带着bat大厂的面试问题去理解" tabindex="-1"><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</span></a></h2><p>提示</p><p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p><ul><li>什么是ThreadLocal? 用来解决什么问题的?</li><li>说说你对ThreadLocal的理解</li><li>ThreadLocal是如何实现线程隔离的?</li><li>为什么ThreadLocal会造成内存泄露? 如何解决</li><li>还有哪些使用ThreadLocal的应用场景?</li></ul><h2 id="threadlocal简介" tabindex="-1"><a class="header-anchor" href="#threadlocal简介"><span><a href="#threadlocal%E7%AE%80%E4%BB%8B">#</a> ThreadLocal简介</span></a></h2><p>我们在<a href="">Java 并发 - 并发理论基础</a>总结过线程安全(是指广义上的共享资源访问安全性，因为线程隔离是通过副本保证本线程访问资源安全性，它不保证线程之间还存在共享关系的狭义上的安全性)的解决思路：</p><ul><li>互斥同步: synchronized 和 ReentrantLock</li><li>非阻塞同步: CAS, AtomicXXXX</li><li>无同步方案: 栈封闭，本地存储(Thread Local)，可重入代码</li></ul><p>这个章节将详细的讲讲 本地存储(Thread Local)。官网的解释是这样的：</p><blockquote><p>This class provides thread-local variables. These variables differ from their normal counterparts in that each thread that accesses one (via its {@code get} or {@code set} method) has its own, independently initialized copy of the variable. {@code ThreadLocal} instances are typically private static fields in classes that wish to associate state with a thread (e.g., a user ID or Transaction ID) 该类提供了线程局部 (thread-local) 变量。这些变量不同于它们的普通对应物，因为访问某个变量(通过其 get 或 set 方法)的每个线程都有自己的局部变量，它独立于变量的初始化副本。ThreadLocal 实例通常是类中的 private static 字段，它们希望将状态与某一个线程(例如，用户 ID 或事务 ID)相关联。</p></blockquote><p>总结而言：ThreadLocal是一个将在多线程中为每一个线程创建单独的变量副本的类; 当使用ThreadLocal来维护变量时, ThreadLocal会为每个线程创建单独的变量副本, 避免因多线程操作共享变量而导致的数据不一致的情况。</p><h2 id="threadlocal理解" tabindex="-1"><a class="header-anchor" href="#threadlocal理解"><span><a href="#threadlocal%E7%90%86%E8%A7%A3">#</a> ThreadLocal理解</span></a></h2><blockquote><p>提到ThreadLocal被提到应用最多的是session管理和数据库链接管理，这里以数据访问为例帮助你理解ThreadLocal：</p></blockquote><ul><li>如下数据库管理类在单线程使用是没有任何问题的</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConnectionManager</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> Connection</span><span style="color:#E06C75;"> connect </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> Connection</span><span style="color:#61AFEF;"> openConnection</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (connect </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            connect </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> DriverManager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getConnection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> connect;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> closeConnection</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (connect </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">            connect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很显然，在多线程中使用会存在线程安全问题：第一，这里面的2个方法都没有进行同步，很可能在openConnection方法中会多次创建connect；第二，由于connect是共享变量，那么必然在调用connect的地方需要使用到同步来保障线程安全，因为很可能一个线程在使用connect进行数据库操作，而另外一个线程调用closeConnection关闭链接。</p><ul><li>为了解决上述线程安全的问题，第一考虑：互斥同步</li></ul><p>你可能会说，将这段代码的两个方法进行同步处理，并且在调用connect的地方需要进行同步处理，比如用Synchronized或者ReentrantLock互斥锁。</p><ul><li>这里再抛出一个问题：这地方到底需不需要将connect变量进行共享?</li></ul><p>事实上，是不需要的。假如每个线程中都有一个connect变量，各个线程之间对connect变量的访问实际上是没有依赖关系的，即一个线程不需要关心其他线程是否对这个connect进行了修改的。即改后的代码可以这样：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ConnectionManager</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Connection</span><span style="color:#E06C75;"> connect </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> Connection</span><span style="color:#61AFEF;"> openConnection</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (connect </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            connect </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> DriverManager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getConnection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> connect;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> closeConnection</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (connect </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">            connect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Dao</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> insert</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        ConnectionManager</span><span style="color:#E06C75;"> connectionManager</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ConnectionManager</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        Connection</span><span style="color:#E06C75;"> connection</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> connectionManager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">openConnection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 使用connection进行操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        connectionManager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">closeConnection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样处理确实也没有任何问题，由于每次都是在方法内部创建的连接，那么线程之间自然不存在线程安全问题。但是这样会有一个致命的影响：导致服务器压力非常大，并且严重影响程序执行性能。由于在方法中需要频繁地开启和关闭数据库连接，这样不仅严重影响程序执行效率，还可能导致服务器压力巨大。</p><ul><li>这时候ThreadLocal登场了</li></ul><p>那么这种情况下使用ThreadLocal是再适合不过的了，因为ThreadLocal在每个线程中对该变量会创建一个副本，即每个线程内部都会有一个该变量，且在线程内部任何地方都可以使用，线程之间互不影响，这样一来就不存在线程安全问题，也不会严重影响程序执行性能。下面就是网上出现最多的例子：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.sql.Connection</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.sql.DriverManager</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.sql.SQLException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ConnectionManager</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> ThreadLocal</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> dbConnectionLocal </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ThreadLocal</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">        protected</span><span style="color:#E5C07B;"> Connection</span><span style="color:#61AFEF;"> initialValue</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E5C07B;"> DriverManager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getConnection</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">SQLException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> Connection</span><span style="color:#61AFEF;"> getConnection</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> dbConnectionLocal</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>再注意下ThreadLocal的修饰符</li></ul><p>ThreaLocal的JDK文档中说明：ThreadLocal instances are typically private static fields in classes that wish to associate state with a thread。如果我们希望通过某个类将状态(例如用户ID、事务ID)与线程关联起来，那么通常在这个类中定义private static类型的ThreadLocal 实例。</p><blockquote><p>但是要注意，虽然ThreadLocal能够解决上面说的问题，但是由于在每个线程中都创建了副本，所以要考虑它对资源的消耗，比如内存的占用会比不使用ThreadLocal要大。</p></blockquote><h2 id="threadlocal原理" tabindex="-1"><a class="header-anchor" href="#threadlocal原理"><span><a href="#threadlocal%E5%8E%9F%E7%90%86">#</a> ThreadLocal原理</span></a></h2><h3 id="如何实现线程隔离" tabindex="-1"><a class="header-anchor" href="#如何实现线程隔离"><span><a href="#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E9%9A%94%E7%A6%BB">#</a> 如何实现线程隔离</span></a></h3><p>主要是用到了Thread对象中的一个ThreadLocalMap类型的变量threadLocals, 负责存储当前线程的关于Connection的对象, dbConnectionLocal(以上述例子中为例) 这个变量为Key, 以新建的Connection对象为Value; 这样的话, 线程第一次读取的时候如果不存在就会调用ThreadLocal的initialValue方法创建一个Connection对象并且返回;</p><p>具体关于为线程分配变量副本的代码如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> T</span><span style="color:#61AFEF;"> get</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    Thread</span><span style="color:#E06C75;"> t </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    ThreadLocalMap</span><span style="color:#E06C75;"> threadLocals </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getMap</span><span style="color:#E06C75;">(t)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (threadLocals </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        ThreadLocalMap</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Entry</span><span style="color:#E06C75;"> e </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> threadLocals</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getEntry</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (e </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">SuppressWarnings</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;unchecked&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">            T</span><span style="color:#E06C75;"> result </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (T)</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> setInitialValue</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先获取当前线程对象t, 然后从线程t中获取到ThreadLocalMap的成员属性threadLocals</li><li>如果当前线程的threadLocals已经初始化(即不为null) 并且存在以当前ThreadLocal对象为Key的值, 则直接返回当前线程要获取的对象(本例中为Connection);</li><li>如果当前线程的threadLocals已经初始化(即不为null)但是不存在以当前ThreadLocal对象为Key的的对象, 那么重新创建一个Connection对象, 并且添加到当前线程的threadLocals Map中,并返回</li><li>如果当前线程的threadLocals属性还没有被初始化, 则重新创建一个ThreadLocalMap对象, 并且创建一个Connection对象并添加到ThreadLocalMap对象中并返回。</li></ul><p>如果存在则直接返回很好理解, 那么对于如何初始化的代码又是怎样的呢?</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#E5C07B;"> T</span><span style="color:#61AFEF;"> setInitialValue</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    T</span><span style="color:#E06C75;"> value </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> initialValue</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    Thread</span><span style="color:#E06C75;"> t </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    ThreadLocalMap</span><span style="color:#E06C75;"> map </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getMap</span><span style="color:#E06C75;">(t)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (map </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">        map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, value);</span></span>
<span class="line"><span style="color:#C678DD;">    else</span></span>
<span class="line"><span style="color:#61AFEF;">        createMap</span><span style="color:#E06C75;">(t</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> value)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先调用我们上面写的重载过后的initialValue方法, 产生一个Connection对象</li><li>继续查看当前线程的threadLocals是不是空的, 如果ThreadLocalMap已被初始化, 那么直接将产生的对象添加到ThreadLocalMap中, 如果没有初始化, 则创建并添加对象到其中;</li></ul><p>同时, ThreadLocal还提供了直接操作Thread对象中的threadLocals的方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> set</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">T</span><span style="color:#E06C75;"> value) {</span></span>
<span class="line"><span style="color:#E5C07B;">    Thread</span><span style="color:#E06C75;"> t </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    ThreadLocalMap</span><span style="color:#E06C75;"> map </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getMap</span><span style="color:#E06C75;">(t)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (map </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">        map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, value);</span></span>
<span class="line"><span style="color:#C678DD;">    else</span></span>
<span class="line"><span style="color:#61AFEF;">        createMap</span><span style="color:#E06C75;">(t</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> value)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们也可以不实现initialValue, 将初始化工作放到DBConnectionFactory的getConnection方法中:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> Connection</span><span style="color:#61AFEF;"> getConnection</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    Connection</span><span style="color:#E06C75;"> connection </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> dbConnectionLocal</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (connection </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            connection </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> DriverManager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getConnection</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            dbConnectionLocal</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(connection);</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">SQLException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> connection</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们看过代码之后就很清晰的知道了为什么ThreadLocal能够实现变量的多线程隔离了; 其实就是用了Map的数据结构给当前线程缓存了, 要使用的时候就从本线程的threadLocals对象中获取就可以了, key就是当前线程;</p><p>当然了在当前线程下获取当前线程里面的Map里面的对象并操作肯定没有线程并发问题了, 当然能做到变量的线程间隔离了;</p><p>现在我们知道了ThreadLocal到底是什么了, 又知道了如何使用ThreadLocal以及其基本实现原理了是不是就可以结束了呢? 其实还有一个问题就是ThreadLocalMap是个什么对象, 为什么要用这个对象呢?</p><h3 id="threadlocalmap对象是什么" tabindex="-1"><a class="header-anchor" href="#threadlocalmap对象是什么"><span><a href="#threadlocalmap%E5%AF%B9%E8%B1%A1%E6%98%AF%E4%BB%80%E4%B9%88">#</a> ThreadLocalMap对象是什么</span></a></h3><p>本质上来讲, 它就是一个Map, 但是这个ThreadLocalMap与我们平时见到的Map有点不一样</p><ul><li>它没有实现Map接口;</li><li>它没有public的方法, 最多有一个default的构造方法, 因为这个ThreadLocalMap的方法仅仅在ThreadLocal类中调用, 属于静态内部类</li><li>ThreadLocalMap的Entry实现继承了WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</li><li>该方法仅仅用了一个Entry数组来存储Key, Value; Entry并不是链表形式, 而是每个bucket里面仅仅放一个Entry;</li></ul><p>要了解ThreadLocalMap的实现, 我们先从入口开始, 就是往该Map中添加一个值:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> set</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">ThreadLocal</span><span style="color:#56B6C2;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;"> value) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // We don&#39;t use a fast path as with get() because it is at</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // least as common to use set() to create new entries as</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // it is to replace existing ones, in which case, a fast</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // path would fail more often than not.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    Entry</span><span style="color:#E06C75;">[] tab </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> table</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> len </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> tab</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> key</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">threadLocalHashCode</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;"> (len</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Entry</span><span style="color:#E06C75;"> e </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tab[i]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">         e </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">         e </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tab[i </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> nextIndex</span><span style="color:#E06C75;">(i</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> len)]) {</span></span>
<span class="line"><span style="color:#E5C07B;">        ThreadLocal</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> k </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (k </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> key) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (k </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">            replaceStaleEntry</span><span style="color:#E06C75;">(key</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> i)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    tab[i] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Entry</span><span style="color:#E06C75;">(key</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> value)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> sz </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ++</span><span style="color:#E06C75;">size</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">cleanSomeSlots</span><span style="color:#E06C75;">(i</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> sz) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E06C75;"> sz </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#E06C75;"> threshold)</span></span>
<span class="line"><span style="color:#61AFEF;">        rehash</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先进行简单的分析, 对该代码表层意思进行解读:</p><ul><li>看下当前threadLocal的在数组中的索引位置 比如: <code>i = 2</code>, 看 <code>i = 2</code> 位置上面的元素(Entry)的<code>Key</code>是否等于threadLocal 这个 Key, 如果等于就很好说了, 直接将该位置上面的Entry的Value替换成最新的就可以了;</li><li>如果当前位置上面的 Entry 的 Key为空, 说明ThreadLocal对象已经被回收了, 那么就调用replaceStaleEntry</li><li>如果清理完无用条目(ThreadLocal被回收的条目)、并且数组中的数据大小 &gt; 阈值的时候对当前的Table进行重新哈希 所以, 该HashMap是处理冲突检测的机制是向后移位, 清除过期条目 最终找到合适的位置;</li></ul><p>了解完Set方法, 后面就是Get方法了:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#E5C07B;"> Entry</span><span style="color:#61AFEF;"> getEntry</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">ThreadLocal</span><span style="color:#56B6C2;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> key) {</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> key</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">threadLocalHashCode</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">table</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    Entry</span><span style="color:#E06C75;"> e </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> table[i]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (e </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> key)</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    else</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> getEntryAfterMiss</span><span style="color:#E06C75;">(key</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> e)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先找到ThreadLocal的索引位置, 如果索引位置处的entry不为空并且键与threadLocal是同一个对象, 则直接返回; 否则去后面的索引位置继续查找。</p><h2 id="threadlocal造成内存泄露的问题" tabindex="-1"><a class="header-anchor" href="#threadlocal造成内存泄露的问题"><span><a href="#threadlocal%E9%80%A0%E6%88%90%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E9%97%AE%E9%A2%98">#</a> ThreadLocal造成内存泄露的问题</span></a></h2><p>网上有这样一个例子：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.LinkedBlockingQueue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.ThreadPoolExecutor</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.TimeUnit</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ThreadLocalDemo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> LocalVariable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#E5C07B;"> Long</span><span style="color:#E06C75;">[] a </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Long</span><span style="color:#E06C75;">[</span><span style="color:#D19A66;">1024</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 1024</span><span style="color:#E06C75;">]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // (1)</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> ThreadPoolExecutor</span><span style="color:#E06C75;"> poolExecutor </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ThreadPoolExecutor</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> TimeUnit</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MINUTES</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">            new</span><span style="color:#E5C07B;"> LinkedBlockingQueue</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">())</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // (2)</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> ThreadLocal</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">LocalVariable</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> localVariable </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ThreadLocal</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">LocalVariable</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // (3)</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5000</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 50</span><span style="color:#ABB2BF;">; ++i) {</span></span>
<span class="line"><span style="color:#E5C07B;">            poolExecutor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Runnable</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">                public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // (4)</span></span>
<span class="line"><span style="color:#E5C07B;">                    localVariable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> LocalVariable</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // (5)</span></span>
<span class="line"><span style="color:#E5C07B;">                    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;use local varaible&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> localVariable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">                    localVariable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            });</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // (6)</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;pool execute over&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果用线程池来操作ThreadLocal 对象确实会造成内存泄露, 因为对于线程池里面不会销毁的线程, 里面总会存在着<code>&lt;ThreadLocal, LocalVariable&gt;</code>的强引用, 因为final static 修饰的 ThreadLocal 并不会释放, 而ThreadLocalMap 对于 Key 虽然是弱引用, 但是强引用不会释放, 弱引用当然也会一直有值, 同时创建的LocalVariable对象也不会释放, 就造成了内存泄露; 如果LocalVariable对象不是一个大对象的话, 其实泄露的并不严重, <code>泄露的内存 = 核心线程数 * LocalVariable</code>对象的大小;</p><p>所以, 为了避免出现内存泄露的情况, ThreadLocal提供了一个清除线程中对象的方法, 即 remove, 其实内部实现就是调用 ThreadLocalMap 的remove方法:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> remove</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">ThreadLocal</span><span style="color:#56B6C2;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> key) {</span></span>
<span class="line"><span style="color:#E5C07B;">    Entry</span><span style="color:#E06C75;">[] tab </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> table</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> len </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> tab</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> key</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">threadLocalHashCode</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;"> (len</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Entry</span><span style="color:#E06C75;"> e </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tab[i]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">         e </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">         e </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tab[i </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> nextIndex</span><span style="color:#E06C75;">(i</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> len)]) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> key) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">            expungeStaleEntry</span><span style="color:#E06C75;">(i)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找到Key对应的Entry, 并且清除Entry的Key(ThreadLocal)置空, 随后清除过期的Entry即可避免内存泄露。</p><h2 id="再看threadlocal应用场景" tabindex="-1"><a class="header-anchor" href="#再看threadlocal应用场景"><span><a href="#%E5%86%8D%E7%9C%8Bthreadlocal%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 再看ThreadLocal应用场景</span></a></h2><p>除了上述的数据库管理类的例子，我们再看看其它一些应用：</p><h3 id="每个线程维护了一个-序列号" tabindex="-1"><a class="header-anchor" href="#每个线程维护了一个-序列号"><span><a href="#%E6%AF%8F%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%BB%B4%E6%8A%A4%E4%BA%86%E4%B8%80%E4%B8%AA-%E5%BA%8F%E5%88%97%E5%8F%B7">#</a> 每个线程维护了一个“序列号”</span></a></h3><blockquote><p>再回想上文说的，如果我们希望通过某个类将状态(例如用户ID、事务ID)与线程关联起来，那么通常在这个类中定义private static类型的ThreadLocal 实例。</p></blockquote><p>每个线程维护了一个“序列号”</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> SerialNum</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // The next serial number to be assigned</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> nextSerialNum </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> ThreadLocal</span><span style="color:#E06C75;"> serialNum </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ThreadLocal</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        protected</span><span style="color:#C678DD;"> synchronized</span><span style="color:#E5C07B;"> Object</span><span style="color:#61AFEF;"> initialValue</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Integer</span><span style="color:#ABB2BF;">(nextSerialNum++);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> get</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> ((Integer) (</span><span style="color:#E5C07B;">serialNum</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">())).</span><span style="color:#61AFEF;">intValue</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="session的管理" tabindex="-1"><a class="header-anchor" href="#session的管理"><span><a href="#session%E7%9A%84%E7%AE%A1%E7%90%86">#</a> Session的管理</span></a></h3><p>经典的另外一个例子：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> ThreadLocal</span><span style="color:#E06C75;"> threadSession </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ThreadLocal</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> Session</span><span style="color:#61AFEF;"> getSession</span><span style="color:#E06C75;">() throws InfrastructureException {  </span></span>
<span class="line"><span style="color:#E5C07B;">    Session</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (Session) </span><span style="color:#E5C07B;">threadSession</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {  </span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (s </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {  </span></span>
<span class="line"><span style="color:#E06C75;">            s </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getSessionFactory</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">openSession</span><span style="color:#ABB2BF;">();</span><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#E5C07B;">            threadSession</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(s);</span><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#E06C75;">        }  </span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">HibernateException</span><span style="color:#E06C75;font-style:italic;"> ex</span><span style="color:#E06C75;">) {  </span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InfrastructureException</span><span style="color:#E06C75;">(ex)</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#E06C75;">    }  </span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> s</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在线程内部创建threadlocal" tabindex="-1"><a class="header-anchor" href="#在线程内部创建threadlocal"><span><a href="#%E5%9C%A8%E7%BA%BF%E7%A8%8B%E5%86%85%E9%83%A8%E5%88%9B%E5%BB%BAthreadlocal">#</a> 在线程内部创建ThreadLocal</span></a></h3><p>还有一种用法是在线程类内部创建ThreadLocal，基本步骤如下：</p><ul><li>在多线程的类(如ThreadDemo类)中，创建一个ThreadLocal对象threadXxx，用来保存线程间需要隔离处理的对象xxx。</li><li>在ThreadDemo类中，创建一个获取要隔离访问的数据的方法getXxx()，在方法中判断，若ThreadLocal对象为null时候，应该new()一个隔离访问类型的对象，并强制转换为要应用的类型。</li><li>在ThreadDemo类的run()方法中，通过调用getXxx()方法获取要操作的数据，这样可以保证每个线程对应一个数据对象，在任何时刻都操作的是这个对象。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ThreadLocalTest</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Runnable</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#E5C07B;">    ThreadLocal</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Student</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> StudentThreadLocal </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ThreadLocal</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Student</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> currentThreadName</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(currentThreadName </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; is running...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        Random</span><span style="color:#E06C75;"> random</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Random</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> age</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> random</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(currentThreadName </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; is set age: &quot;</span><span style="color:#56B6C2;">  +</span><span style="color:#ABB2BF;"> age);</span></span>
<span class="line"><span style="color:#E5C07B;">        Student</span><span style="color:#E06C75;"> Student</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getStudentt</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//通过这个方法，为每个线程都独立的new一个Studentt对象，每个线程的的Studentt对象都可以设置不同的值</span></span>
<span class="line"><span style="color:#E5C07B;">        Student</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setAge</span><span style="color:#ABB2BF;">(age);</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(currentThreadName </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; is first get age: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> Student</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAge</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">( currentThreadName </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; is second get age: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> Student</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAge</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Student</span><span style="color:#61AFEF;"> getStudentt</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Student</span><span style="color:#E06C75;"> Student</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> StudentThreadLocal</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">null</span><span style="color:#56B6C2;"> ==</span><span style="color:#ABB2BF;"> Student) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            Student </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            StudentThreadLocal</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(Student);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> Student;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        ThreadLocalTest</span><span style="color:#E06C75;"> t</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ThreadLocalTest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#E06C75;"> t1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(t,</span><span style="color:#98C379;">&quot;Thread A&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#E06C75;"> t2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(t,</span><span style="color:#98C379;">&quot;Thread B&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        t1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        t2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Student</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> getAge</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> age;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> setAge</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> age</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> age;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java-开发手册中推荐的-threadlocal" tabindex="-1"><a class="header-anchor" href="#java-开发手册中推荐的-threadlocal"><span><a href="#java-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E4%B8%AD%E6%8E%A8%E8%8D%90%E7%9A%84-threadlocal">#</a> java 开发手册中推荐的 ThreadLocal</span></a></h3><p>看看阿里巴巴 java 开发手册中推荐的 ThreadLocal 的用法:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.text.DateFormat</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.text.SimpleDateFormat</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> DateUtils</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> ThreadLocal</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">DateFormat</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> df </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ThreadLocal</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">DateFormat</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">        protected</span><span style="color:#E5C07B;"> DateFormat</span><span style="color:#61AFEF;"> initialValue</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SimpleDateFormat</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;yyyy-MM-dd&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们再要用到 DateFormat 对象的地方，这样调用：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">DateUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">df</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">format</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,80)]))}const t=a(p,[["render",o],["__file","Java 并发之 ThreadLocal 详解.html.vue"]]),i=JSON.parse(`{"path":"/posts/Java/ThreadConcurrency/Java%20%E5%B9%B6%E5%8F%91%E4%B9%8B%20ThreadLocal%20%E8%AF%A6%E8%A7%A3.html","title":"Java 并发之 ThreadLocal 详解","lang":"zh-CN","frontmatter":{"title":"Java 并发之 ThreadLocal 详解","subtitle":"Java，Java开发，Java 体系","date":"2024-03-07T10:15:26.000Z","category":["Java"],"tag":["Java","Thread","concurrency"],"order":27,"description":"ThreadLocal是通过线程隔离的方式防止任务在共享资源上产生冲突, 线程本地存储是一种自动化机制，可以为使用相同变量的每个不同线程都创建不同的存储。 Java 并发之 ThreadLocal 详解 带着BAT大厂的面试问题去理解 ThreadLocal简介 ThreadLocal理解 ThreadLocal原理 如何实现线程隔离 ThreadLo...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/ThreadConcurrency/Java%20%E5%B9%B6%E5%8F%91%E4%B9%8B%20ThreadLocal%20%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"Java 并发之 ThreadLocal 详解"}],["meta",{"property":"og:description","content":"ThreadLocal是通过线程隔离的方式防止任务在共享资源上产生冲突, 线程本地存储是一种自动化机制，可以为使用相同变量的每个不同线程都创建不同的存储。 Java 并发之 ThreadLocal 详解 带着BAT大厂的面试问题去理解 ThreadLocal简介 ThreadLocal理解 ThreadLocal原理 如何实现线程隔离 ThreadLo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T03:51:56.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:tag","content":"concurrency"}],["meta",{"property":"article:published_time","content":"2024-03-07T10:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T03:51:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 并发之 ThreadLocal 详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-07T10:15:26.000Z\\",\\"dateModified\\":\\"2024-03-08T03:51:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 带着BAT大厂的面试问题去理解","slug":"带着bat大厂的面试问题去理解","link":"#带着bat大厂的面试问题去理解","children":[]},{"level":2,"title":"# ThreadLocal简介","slug":"threadlocal简介","link":"#threadlocal简介","children":[]},{"level":2,"title":"# ThreadLocal理解","slug":"threadlocal理解","link":"#threadlocal理解","children":[]},{"level":2,"title":"# ThreadLocal原理","slug":"threadlocal原理","link":"#threadlocal原理","children":[{"level":3,"title":"# 如何实现线程隔离","slug":"如何实现线程隔离","link":"#如何实现线程隔离","children":[]},{"level":3,"title":"# ThreadLocalMap对象是什么","slug":"threadlocalmap对象是什么","link":"#threadlocalmap对象是什么","children":[]}]},{"level":2,"title":"# ThreadLocal造成内存泄露的问题","slug":"threadlocal造成内存泄露的问题","link":"#threadlocal造成内存泄露的问题","children":[]},{"level":2,"title":"# 再看ThreadLocal应用场景","slug":"再看threadlocal应用场景","link":"#再看threadlocal应用场景","children":[{"level":3,"title":"# 每个线程维护了一个“序列号”","slug":"每个线程维护了一个-序列号","link":"#每个线程维护了一个-序列号","children":[]},{"level":3,"title":"# Session的管理","slug":"session的管理","link":"#session的管理","children":[]},{"level":3,"title":"# 在线程内部创建ThreadLocal","slug":"在线程内部创建threadlocal","link":"#在线程内部创建threadlocal","children":[]},{"level":3,"title":"# java 开发手册中推荐的 ThreadLocal","slug":"java-开发手册中推荐的-threadlocal","link":"#java-开发手册中推荐的-threadlocal","children":[]}]}],"git":{"createdTime":1709869916000,"updatedTime":1709869916000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":13.55,"words":4066},"filePathRelative":"posts/Java/ThreadConcurrency/Java 并发之 ThreadLocal 详解.md","localizedDate":"2024年3月7日","excerpt":"<blockquote>\\n<p>ThreadLocal是通过线程隔离的方式防止任务在共享资源上产生冲突, 线程本地存储是一种自动化机制，可以为使用相同变量的每个不同线程都创建不同的存储。</p>\\n</blockquote>\\n<ul>\\n<li>Java 并发之 ThreadLocal 详解\\n<ul>\\n<li><a href=\\"#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3\\">带着BAT大厂的面试问题去理解</a></li>\\n<li><a href=\\"#threadlocal%E7%AE%80%E4%BB%8B\\">ThreadLocal简介</a></li>\\n<li><a href=\\"#threadlocal%E7%90%86%E8%A7%A3\\">ThreadLocal理解</a></li>\\n<li>ThreadLocal原理\\n<ul>\\n<li><a href=\\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E9%9A%94%E7%A6%BB\\">如何实现线程隔离</a></li>\\n<li><a href=\\"#threadlocalmap%E5%AF%B9%E8%B1%A1%E6%98%AF%E4%BB%80%E4%B9%88\\">ThreadLocalMap对象是什么</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#threadlocal%E9%80%A0%E6%88%90%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E9%97%AE%E9%A2%98\\">ThreadLocal造成内存泄露的问题</a></li>\\n<li>再看ThreadLocal应用场景\\n<ul>\\n<li><a href=\\"#%E6%AF%8F%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%BB%B4%E6%8A%A4%E4%BA%86%E4%B8%80%E4%B8%AA%E5%BA%8F%E5%88%97%E5%8F%B7\\">每个线程维护了一个“序列号”</a></li>\\n<li><a href=\\"#session%E7%9A%84%E7%AE%A1%E7%90%86\\">Session的管理</a></li>\\n<li><a href=\\"#%E5%9C%A8%E7%BA%BF%E7%A8%8B%E5%86%85%E9%83%A8%E5%88%9B%E5%BB%BAthreadlocal\\">在线程内部创建ThreadLocal</a></li>\\n<li><a href=\\"#java-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E4%B8%AD%E6%8E%A8%E8%8D%90%E7%9A%84-threadlocal\\">java 开发手册中推荐的 ThreadLocal</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{t as comp,i as data};
