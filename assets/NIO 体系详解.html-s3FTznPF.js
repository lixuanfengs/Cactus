import{_ as n,c as a,f as l,o as e}from"./app-C-oqqdxG.js";const p={};function o(t,s){return e(),a("div",null,s[0]||(s[0]=[l(`<blockquote><p>的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。</p></blockquote><ul><li>NIO 体系详解 <ul><li><a href="#%E6%B5%81%E4%B8%8E%E5%9D%97">流与块</a></li><li>通道与缓冲区 <ul><li><a href="#1-%E9%80%9A%E9%81%93">1. 通道</a></li><li><a href="#2-%E7%BC%93%E5%86%B2%E5%8C%BA">2. 缓冲区</a></li></ul></li><li><a href="#%E7%BC%93%E5%86%B2%E5%8C%BA%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F">缓冲区状态变量</a></li><li><a href="#%E6%96%87%E4%BB%B6-nio-%E5%AE%9E%E4%BE%8B">文件 NIO 实例</a></li><li>选择器 <ul><li><a href="#1-%E5%88%9B%E5%BB%BA%E9%80%89%E6%8B%A9%E5%99%A8">1. 创建选择器</a></li><li><a href="#2-%E5%B0%86%E9%80%9A%E9%81%93%E6%B3%A8%E5%86%8C%E5%88%B0%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8A">2. 将通道注册到选择器上</a></li><li><a href="#3-%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6">3. 监听事件</a></li><li><a href="#4-%E8%8E%B7%E5%8F%96%E5%88%B0%E8%BE%BE%E7%9A%84%E4%BA%8B%E4%BB%B6">4. 获取到达的事件</a></li><li><a href="#5-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF">5. 事件循环</a></li></ul></li><li><a href="#%E5%A5%97%E6%8E%A5%E5%AD%97-nio-%E5%AE%9E%E4%BE%8B">套接字 NIO 实例</a></li><li><a href="#%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6">内存映射文件</a></li><li><a href="#%E5%AF%B9%E6%AF%94">对比</a></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><p>Standard IO是对字节流的读写，在进行IO之前，首先创建一个流对象，流对象进行读写操作都是按字节 ，一个字节一个字节的来读或写。而NIO把IO抽象成块，类似磁盘的读写，每次IO操作的单位都是一个块，块被读入内存之后就是一个byte[]，NIO一次可以读或写多个字节。</p><h2 id="流与块" tabindex="-1"><a class="header-anchor" href="#流与块"><span><a href="#%E6%B5%81%E4%B8%8E%E5%9D%97">#</a> 流与块</span></a></h2><p>I/O 与 NIO 最重要的区别是数据打包和传输的方式，I/O 以流的方式处理数据，而 NIO 以块的方式处理数据。</p><p>面向流的 I/O 一次处理一个字节数据: 一个输入流产生一个字节数据，一个输出流消费一个字节数据。为流式数据创建过滤器非常容易，链接几个过滤器，以便每个过滤器只负责复杂处理机制的一部分。不利的一面是，面向流的 I/O 通常相当慢。</p><p>面向块的 I/O 一次处理一个数据块，按块处理数据比按流处理数据要快得多。但是面向块的 I/O 缺少一些面向流的 I/O 所具有的优雅性和简单性。</p><p>I/O 包和 NIO 已经很好地集成了，<a href="http://java.io" target="_blank" rel="noopener noreferrer">java.io</a>.* 已经以 NIO 为基础重新实现了，所以现在它可以利用 NIO 的一些特性。例如，<a href="http://java.io" target="_blank" rel="noopener noreferrer">java.io</a>.* 包中的一些类包含以块的形式读写数据的方法，这使得即使在面向流的系统中，处理速度也会更快。</p><h2 id="通道与缓冲区" tabindex="-1"><a class="header-anchor" href="#通道与缓冲区"><span><a href="#%E9%80%9A%E9%81%93%E4%B8%8E%E7%BC%93%E5%86%B2%E5%8C%BA">#</a> 通道与缓冲区</span></a></h2><h3 id="_1-通道" tabindex="-1"><a class="header-anchor" href="#_1-通道"><span><a href="#_1-%E9%80%9A%E9%81%93">#</a> 1. 通道</span></a></h3><p>通道 Channel 是对原 I/O 包中的流的模拟，可以通过它读取和写入数据。</p><p>通道与流的不同之处在于，流只能在一个方向上移动(一个流必须是 InputStream 或者 OutputStream 的子类)，而通道是双向的，可以用于读、写或者同时用于读写。</p><p>通道包括以下类型:</p><ul><li>FileChannel: 从文件中读写数据；</li><li>DatagramChannel: 通过 UDP 读写网络中数据；</li><li>SocketChannel: 通过 TCP 读写网络中数据；</li><li>ServerSocketChannel: 可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 SocketChannel。</li></ul><h3 id="_2-缓冲区" tabindex="-1"><a class="header-anchor" href="#_2-缓冲区"><span><a href="#_2-%E7%BC%93%E5%86%B2%E5%8C%BA">#</a> 2. 缓冲区</span></a></h3><p>发送给一个通道的所有数据都必须首先放到缓冲区中，同样地，从通道中读取的任何数据都要先读到缓冲区中。也就是说，不会直接对通道进行读写数据，而是要先经过缓冲区。</p><p>缓冲区实质上是一个数组，但它不仅仅是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读/写进程。</p><p>缓冲区包括以下类型:</p><ul><li>ByteBuffer</li><li>CharBuffer</li><li>ShortBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li></ul><h2 id="缓冲区状态变量" tabindex="-1"><a class="header-anchor" href="#缓冲区状态变量"><span><a href="#%E7%BC%93%E5%86%B2%E5%8C%BA%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F">#</a> 缓冲区状态变量</span></a></h2><ul><li>capacity: 最大容量；</li><li>position: 当前已经读写的字节数；</li><li>limit: 还可以读写的字节数。</li></ul><p>状态变量的改变过程举例:</p><p>① 新建一个大小为 8 个字节的缓冲区，此时 position 为 0，而 limit = capacity = 8。capacity 变量不会改变，下面的讨论会忽略它。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/1bea398f-17a7-4f67-a90b-9e2d243eaa9a.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>② 从输入通道中读取 5 个字节数据写入缓冲区中，此时 position 移动设置为 5，limit 保持不变。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/80804f52-8815-4096-b506-48eef3eed5c6.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>③ 在将缓冲区的数据写到输出通道之前，需要先调用 flip() 方法，这个方法将 limit 设置为当前 position，并将 position 设置为 0。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/952e06bd-5a65-4cab-82e4-dd1536462f38.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>④ 从缓冲区中取 4 个字节到输出缓冲中，此时 position 设为 4。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/b5bdcbe2-b958-4aef-9151-6ad963cb28b4.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>⑤ 最后需要调用 clear() 方法来清空缓冲区，此时 position 和 limit 都被设置为最初位置。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/67bf5487-c45d-49b6-b9c0-a058d8c68902.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h2 id="文件-nio-实例" tabindex="-1"><a class="header-anchor" href="#文件-nio-实例"><span><a href="#%E6%96%87%E4%BB%B6-nio-%E5%AE%9E%E4%BE%8B">#</a> 文件 NIO 实例</span></a></h2><p>以下展示了使用 NIO 快速复制文件的实例:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> fastCopy</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> src</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> dist) throws IOException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 获得源文件的输入字节流 */</span></span>
<span class="line"><span style="color:#E5C07B;">    FileInputStream</span><span style="color:#E06C75;"> fin </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FileInputStream</span><span style="color:#E06C75;">(src)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 获取输入字节流的文件通道 */</span></span>
<span class="line"><span style="color:#E5C07B;">    FileChannel</span><span style="color:#E06C75;"> fcin </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> fin</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getChannel</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 获取目标文件的输出字节流 */</span></span>
<span class="line"><span style="color:#E5C07B;">    FileOutputStream</span><span style="color:#E06C75;"> fout </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FileOutputStream</span><span style="color:#E06C75;">(dist)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 获取输出字节流的通道 */</span></span>
<span class="line"><span style="color:#E5C07B;">    FileChannel</span><span style="color:#E06C75;"> fcout </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> fout</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getChannel</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 为缓冲区分配 1024 个字节 */</span></span>
<span class="line"><span style="color:#E5C07B;">    ByteBuffer</span><span style="color:#E06C75;"> buffer </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ByteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allocateDirect</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1024</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#E06C75;"> (</span><span style="color:#D19A66;">true</span><span style="color:#E06C75;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /* 从输入通道中读取数据到缓冲区中 */</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> r </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> fcin</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /* read() 返回 -1 表示 EOF */</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (r </span><span style="color:#56B6C2;">==</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /* 切换读写 */</span></span>
<span class="line"><span style="color:#E5C07B;">        buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flip</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /* 把缓冲区的内容写入输出文件中 */</span></span>
<span class="line"><span style="color:#E5C07B;">        fcout</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(buffer);</span></span>
<span class="line"><span style="color:#E06C75;">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /* 清空缓冲区 */</span></span>
<span class="line"><span style="color:#E5C07B;">        buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器"><span><a href="#%E9%80%89%E6%8B%A9%E5%99%A8">#</a> 选择器</span></a></h2><p>NIO 常常被叫做非阻塞 IO，主要是因为 NIO 在网络通信中的非阻塞特性被广泛使用。</p><p>NIO 实现了 IO 多路复用中的 Reactor 模型，一个线程 Thread 使用一个选择器 Selector 通过轮询的方式去监听多个通道 Channel 上的事件，从而让一个线程就可以处理多个事件。</p><p>通过配置监听的通道 Channel 为非阻塞，那么当 Channel 上的 IO 事件还未到达时，就不会进入阻塞状态一直等待，而是继续轮询其它 Channel，找到 IO 事件已经到达的 Channel 执行。</p><p>因为创建和切换线程的开销很大，因此使用一个线程来处理多个事件而不是一个线程处理一个事件具有更好的性能。</p><p>应该注意的是，只有套接字 Channel 才能配置为非阻塞，而 FileChannel 不能，为 FileChannel 配置非阻塞也没有意义。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/4d930e22-f493-49ae-8dff-ea21cd6895dc.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="_1-创建选择器" tabindex="-1"><a class="header-anchor" href="#_1-创建选择器"><span><a href="#_1-%E5%88%9B%E5%BB%BA%E9%80%89%E6%8B%A9%E5%99%A8">#</a> 1. 创建选择器</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Selector</span><span style="color:#E06C75;"> selector </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Selector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-将通道注册到选择器上" tabindex="-1"><a class="header-anchor" href="#_2-将通道注册到选择器上"><span><a href="#_2-%E5%B0%86%E9%80%9A%E9%81%93%E6%B3%A8%E5%86%8C%E5%88%B0%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8A">#</a> 2. 将通道注册到选择器上</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">ServerSocketChannel</span><span style="color:#E06C75;"> ssChannel </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ServerSocketChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">ssChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">configureBlocking</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">ssChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">(selector, </span><span style="color:#E5C07B;">SelectionKey</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">OP_ACCEPT</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通道必须配置为非阻塞模式，否则使用选择器就没有任何意义了，因为如果通道在某个事件上被阻塞，那么服务器就不能响应其它事件，必须等待这个事件处理完毕才能去处理其它事件，显然这和选择器的作用背道而驰。</p><p>在将通道注册到选择器上时，还需要指定要注册的具体事件，主要有以下几类:</p><ul><li>SelectionKey.OP_CONNECT</li><li>SelectionKey.OP_ACCEPT</li><li>SelectionKey.OP_READ</li><li>SelectionKey.OP_WRITE</li></ul><p>它们在 SelectionKey 的定义如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> OP_READ </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> OP_WRITE </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> OP_CONNECT </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> OP_ACCEPT </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出每个事件可以被当成一个位域，从而组成事件集整数。例如:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> interestSet </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> SelectionKey</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">OP_READ</span><span style="color:#56B6C2;"> |</span><span style="color:#E5C07B;"> SelectionKey</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">OP_WRITE</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-监听事件" tabindex="-1"><a class="header-anchor" href="#_3-监听事件"><span><a href="#_3-%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6">#</a> 3. 监听事件</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> num </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> selector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">select</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 select() 来监听到达的事件，它会一直阻塞直到有至少一个事件到达。</p><h3 id="_4-获取到达的事件" tabindex="-1"><a class="header-anchor" href="#_4-获取到达的事件"><span><a href="#_4-%E8%8E%B7%E5%8F%96%E5%88%B0%E8%BE%BE%E7%9A%84%E4%BA%8B%E4%BB%B6">#</a> 4. 获取到达的事件</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Set</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">SelectionKey</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> keys </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> selector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">selectedKeys</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">Iterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">SelectionKey</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> keyIterator </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> keys</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iterator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">keyIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    SelectionKey</span><span style="color:#E06C75;"> key </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> keyIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">key</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isAcceptable</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ...</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">key</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isReadable</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ...</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    keyIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-事件循环" tabindex="-1"><a class="header-anchor" href="#_5-事件循环"><span><a href="#_5-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF">#</a> 5. 事件循环</span></a></h3><p>因为一次 select() 调用不能处理完所有的事件，并且服务器端有可能需要一直监听事件，因此服务器端处理事件的代码一般会放在一个死循环内。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">while</span><span style="color:#E06C75;"> (</span><span style="color:#D19A66;">true</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> num </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> selector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">select</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    Set</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">SelectionKey</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> keys </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> selector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">selectedKeys</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    Iterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">SelectionKey</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> keyIterator </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> keys</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iterator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">keyIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        SelectionKey</span><span style="color:#E06C75;"> key </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> keyIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">key</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isAcceptable</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // ...</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">key</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isReadable</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // ...</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        keyIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="套接字-nio-实例" tabindex="-1"><a class="header-anchor" href="#套接字-nio-实例"><span><a href="#%E5%A5%97%E6%8E%A5%E5%AD%97-nio-%E5%AE%9E%E4%BE%8B">#</a> 套接字 NIO 实例</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> NIOServer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        Selector</span><span style="color:#E06C75;"> selector</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Selector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        ServerSocketChannel</span><span style="color:#E06C75;"> ssChannel</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ServerSocketChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        ssChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">configureBlocking</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        ssChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">(selector, </span><span style="color:#E5C07B;">SelectionKey</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">OP_ACCEPT</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        ServerSocket</span><span style="color:#E06C75;"> serverSocket</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ssChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">socket</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        InetSocketAddress</span><span style="color:#E06C75;"> address</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InetSocketAddress</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;127.0.0.1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8888</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        serverSocket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(address);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">            selector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">select</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            Set</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">SelectionKey</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">keys</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">selectedKeys</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            Iterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">SelectionKey</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">keyIterator</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> keys</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iterator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">keyIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">                SelectionKey</span><span style="color:#E06C75;"> key</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> keyIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">key</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isAcceptable</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">                    ServerSocketChannel</span><span style="color:#E06C75;"> ssChannel1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (ServerSocketChannel) </span><span style="color:#E5C07B;">key</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">channel</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 服务器会为每个新连接创建一个 SocketChannel</span></span>
<span class="line"><span style="color:#E5C07B;">                    SocketChannel</span><span style="color:#E06C75;"> sChannel</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ssChannel1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                    sChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">configureBlocking</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 这个新连接主要用于从客户端读取数据</span></span>
<span class="line"><span style="color:#E5C07B;">                    sChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">(selector, </span><span style="color:#E5C07B;">SelectionKey</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">OP_READ</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">                } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">key</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isReadable</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">                    SocketChannel</span><span style="color:#E06C75;"> sChannel</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (SocketChannel) </span><span style="color:#E5C07B;">key</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">channel</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">readDataFromSocketChannel</span><span style="color:#ABB2BF;">(sChannel));</span></span>
<span class="line"><span style="color:#E5C07B;">                    sChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">                keyIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> readDataFromSocketChannel</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SocketChannel</span><span style="color:#E06C75;font-style:italic;"> sChannel</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        ByteBuffer</span><span style="color:#E06C75;"> buffer</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ByteBuffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allocate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1024</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        StringBuilder</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> StringBuilder</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">            buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> sChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(buffer);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (n </span><span style="color:#56B6C2;">==</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flip</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> limit</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">limit</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            char</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">dst</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> char</span><span style="color:#ABB2BF;">[limit];</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> limit; i++) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                dst[i] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(i);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(dst);</span></span>
<span class="line"><span style="color:#E5C07B;">            buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> NIOClient</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Socket</span><span style="color:#E06C75;"> socket</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Socket</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;127.0.0.1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8888</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        OutputStream</span><span style="color:#E06C75;"> out</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOutputStream</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;hello world&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getBytes</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">        out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内存映射文件" tabindex="-1"><a class="header-anchor" href="#内存映射文件"><span><a href="#%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6">#</a> 内存映射文件</span></a></h2><p>内存映射文件 I/O 是一种读和写文件数据的方法，它可以比常规的基于流或者基于通道的 I/O 快得多。</p><p>向内存映射文件写入可能是危险的，只是改变数组的单个元素这样的简单操作，就可能会直接修改磁盘上的文件。修改数据与将数据保存到磁盘是没有分开的。</p><p>下面代码行将文件的前 1024 个字节映射到内存中，map() 方法返回一个 MappedByteBuffer，它是 ByteBuffer 的子类。因此，可以像使用其他任何 ByteBuffer 一样使用新映射的缓冲区，操作系统会在需要时负责执行映射。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">MappedByteBuffer</span><span style="color:#E06C75;"> mbb </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> fc</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">FileChannel</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MapMode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">READ_WRITE</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1024</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span><a href="#%E5%AF%B9%E6%AF%94">#</a> 对比</span></a></h2><p>NIO 与普通 I/O 的区别主要有以下两点:</p><ul><li>NIO 是非阻塞的</li><li>NIO 面向块，I/O 面向流</li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</span></a></h2>`,72)]))}const i=n(p,[["render",o],["__file","NIO 体系详解.html.vue"]]),r=JSON.parse(`{"path":"/posts/Java/IO-NIO-AIO/NIO%20%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html","title":"NIO 体系详解","lang":"zh-CN","frontmatter":{"title":"NIO 体系详解","subtitle":"Java，Java开发，Java 体系","date":"2024-03-11T14:36:26.000Z","category":["Java"],"tag":["Java","IO"],"order":9,"description":"的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。 NIO 体系详解 流与块 通道与缓冲区 1. 通道 2. 缓冲区 缓冲区状态变量 文件 NIO 实例 选择器 1. 创建选择器 2. 将通道注册到选择器上 3. 监听事件 4. 获取到达的事件 5. 事件循环 套接字 NIO 实例...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/IO-NIO-AIO/NIO%20%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"NIO 体系详解"}],["meta",{"property":"og:description","content":"的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。 NIO 体系详解 流与块 通道与缓冲区 1. 通道 2. 缓冲区 缓冲区状态变量 文件 NIO 实例 选择器 1. 创建选择器 2. 将通道注册到选择器上 3. 监听事件 4. 获取到达的事件 5. 事件循环 套接字 NIO 实例..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/1bea398f-17a7-4f67-a90b-9e2d243eaa9a.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-17T09:29:14.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"IO"}],["meta",{"property":"article:published_time","content":"2024-03-11T14:36:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-17T09:29:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NIO 体系详解\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/1bea398f-17a7-4f67-a90b-9e2d243eaa9a.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/80804f52-8815-4096-b506-48eef3eed5c6.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/952e06bd-5a65-4cab-82e4-dd1536462f38.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/b5bdcbe2-b958-4aef-9151-6ad963cb28b4.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/67bf5487-c45d-49b6-b9c0-a058d8c68902.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/4d930e22-f493-49ae-8dff-ea21cd6895dc.png\\"],\\"datePublished\\":\\"2024-03-11T14:36:26.000Z\\",\\"dateModified\\":\\"2024-03-17T09:29:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 流与块","slug":"流与块","link":"#流与块","children":[]},{"level":2,"title":"# 通道与缓冲区","slug":"通道与缓冲区","link":"#通道与缓冲区","children":[{"level":3,"title":"# 1. 通道","slug":"_1-通道","link":"#_1-通道","children":[]},{"level":3,"title":"# 2. 缓冲区","slug":"_2-缓冲区","link":"#_2-缓冲区","children":[]}]},{"level":2,"title":"# 缓冲区状态变量","slug":"缓冲区状态变量","link":"#缓冲区状态变量","children":[]},{"level":2,"title":"# 文件 NIO 实例","slug":"文件-nio-实例","link":"#文件-nio-实例","children":[]},{"level":2,"title":"# 选择器","slug":"选择器","link":"#选择器","children":[{"level":3,"title":"# 1. 创建选择器","slug":"_1-创建选择器","link":"#_1-创建选择器","children":[]},{"level":3,"title":"# 2. 将通道注册到选择器上","slug":"_2-将通道注册到选择器上","link":"#_2-将通道注册到选择器上","children":[]},{"level":3,"title":"# 3. 监听事件","slug":"_3-监听事件","link":"#_3-监听事件","children":[]},{"level":3,"title":"# 4. 获取到达的事件","slug":"_4-获取到达的事件","link":"#_4-获取到达的事件","children":[]},{"level":3,"title":"# 5. 事件循环","slug":"_5-事件循环","link":"#_5-事件循环","children":[]}]},{"level":2,"title":"# 套接字 NIO 实例","slug":"套接字-nio-实例","link":"#套接字-nio-实例","children":[]},{"level":2,"title":"# 内存映射文件","slug":"内存映射文件","link":"#内存映射文件","children":[]},{"level":2,"title":"# 对比","slug":"对比","link":"#对比","children":[]},{"level":2,"title":"# 参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1710139794000,"updatedTime":1710667754000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":8.36,"words":2509},"filePathRelative":"posts/Java/IO-NIO-AIO/NIO 体系详解.md","localizedDate":"2024年3月11日","excerpt":"<blockquote>\\n<p>的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。</p>\\n</blockquote>\\n<ul>\\n<li>NIO 体系详解\\n<ul>\\n<li><a href=\\"#%E6%B5%81%E4%B8%8E%E5%9D%97\\">流与块</a></li>\\n<li>通道与缓冲区\\n<ul>\\n<li><a href=\\"#1-%E9%80%9A%E9%81%93\\">1. 通道</a></li>\\n<li><a href=\\"#2-%E7%BC%93%E5%86%B2%E5%8C%BA\\">2. 缓冲区</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E7%BC%93%E5%86%B2%E5%8C%BA%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F\\">缓冲区状态变量</a></li>\\n<li><a href=\\"#%E6%96%87%E4%BB%B6-nio-%E5%AE%9E%E4%BE%8B\\">文件 NIO 实例</a></li>\\n<li>选择器\\n<ul>\\n<li><a href=\\"#1-%E5%88%9B%E5%BB%BA%E9%80%89%E6%8B%A9%E5%99%A8\\">1. 创建选择器</a></li>\\n<li><a href=\\"#2-%E5%B0%86%E9%80%9A%E9%81%93%E6%B3%A8%E5%86%8C%E5%88%B0%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8A\\">2. 将通道注册到选择器上</a></li>\\n<li><a href=\\"#3-%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6\\">3. 监听事件</a></li>\\n<li><a href=\\"#4-%E8%8E%B7%E5%8F%96%E5%88%B0%E8%BE%BE%E7%9A%84%E4%BA%8B%E4%BB%B6\\">4. 获取到达的事件</a></li>\\n<li><a href=\\"#5-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF\\">5. 事件循环</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%A5%97%E6%8E%A5%E5%AD%97-nio-%E5%AE%9E%E4%BE%8B\\">套接字 NIO 实例</a></li>\\n<li><a href=\\"#%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6\\">内存映射文件</a></li>\\n<li><a href=\\"#%E5%AF%B9%E6%AF%94\\">对比</a></li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{i as comp,r as data};
