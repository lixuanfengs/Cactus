import{_ as a,c as l,f as n,o as e}from"./app-BD4p-b6Q.js";const o={};function p(i,s){return e(),l("div",null,s[0]||(s[0]=[n(`<blockquote><p>相比Sychronized(重量级锁，对系统性能影响较大)，volatile提供了另一种解决可见性和有序性问题的方案。@pdai</p></blockquote><ul><li>关键字 volatile 解析 <ul><li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3volatile">带着BAT大厂的面试问题去理解volatile</a></li><li>volatile的作用详解 <ul><li><a href="#%E9%98%B2%E9%87%8D%E6%8E%92%E5%BA%8F">防重排序</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%A7%81%E6%80%A7">实现可见性</a></li><li>保证原子性:单次读/写 <ul><li><a href="#%E9%97%AE%E9%A2%981-i%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E4%BF%9D%E8%AF%81%E5%8E%9F%E5%AD%90%E6%80%A7">问题1： i++为什么不能保证原子性?</a></li><li><a href="#%E9%97%AE%E9%A2%982-%E5%85%B1%E4%BA%AB%E7%9A%84long%E5%92%8Cdouble%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8volatile">问题2： 共享的long和double变量的为什么要用volatile?</a></li></ul></li></ul></li><li>volatile 的实现原理 <ul><li>volatile 可见性实现 <ul><li><a href="#lock-%E6%8C%87%E4%BB%A4">lock 指令</a></li><li><a href="#%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7">缓存一致性</a></li></ul></li><li>volatile 有序性实现 <ul><li><a href="#volatile-%E7%9A%84-happens-before-%E5%85%B3%E7%B3%BB">volatile 的 happens-before 关系</a></li><li><a href="#volatile-%E7%A6%81%E6%AD%A2%E9%87%8D%E6%8E%92%E5%BA%8F">volatile 禁止重排序</a></li></ul></li></ul></li><li>volatile 的应用场景 <ul><li><a href="#%E6%A8%A1%E5%BC%8F1%E7%8A%B6%E6%80%81%E6%A0%87%E5%BF%97">模式1：状态标志</a></li><li><a href="#%E6%A8%A1%E5%BC%8F2%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AE%89%E5%85%A8%E5%8F%91%E5%B8%83one-time-safe-publication">模式2：一次性安全发布(one-time safe publication)</a></li><li><a href="#%E6%A8%A1%E5%BC%8F3%E7%8B%AC%E7%AB%8B%E8%A7%82%E5%AF%9Findependent-observation">模式3：独立观察(independent observation)</a></li><li><a href="#%E6%A8%A1%E5%BC%8F4volatile-bean-%E6%A8%A1%E5%BC%8F">模式4：volatile bean 模式</a></li><li><a href="#%E6%A8%A1%E5%BC%8F5%E5%BC%80%E9%94%80%E8%BE%83%E4%BD%8E%E7%9A%84%E8%AF%BB%E5%86%99%E9%94%81%E7%AD%96%E7%95%A5">模式5：开销较低的读－写锁策略</a></li><li><a href="#%E6%A8%A1%E5%BC%8F6%E5%8F%8C%E9%87%8D%E6%A3%80%E6%9F%A5double-checked">模式6：双重检查(double-checked)</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="带着bat大厂的面试问题去理解volatile" tabindex="-1"><a class="header-anchor" href="#带着bat大厂的面试问题去理解volatile"><span><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3volatile">#</a> 带着BAT大厂的面试问题去理解volatile</span></a></h2><p>提示</p><p>请带着这些问题继续后文，会很大程度上帮助你更好的理解volatile。@pdai</p><ul><li>volatile关键字的作用是什么?</li><li>volatile能保证原子性吗?</li><li>之前32位机器上共享的long和double变量的为什么要用volatile? 现在64位机器上是否也要设置呢?</li><li>i++为什么不能保证原子性?</li><li>volatile是如何实现可见性的? 内存屏障。</li><li>volatile是如何实现有序性的? happens-before等</li><li>说下volatile的应用场景?</li></ul><h2 id="volatile的作用详解" tabindex="-1"><a class="header-anchor" href="#volatile的作用详解"><span><a href="#volatile%E7%9A%84%E4%BD%9C%E7%94%A8%E8%AF%A6%E8%A7%A3">#</a> volatile的作用详解</span></a></h2><h3 id="防重排序" tabindex="-1"><a class="header-anchor" href="#防重排序"><span><a href="#%E9%98%B2%E9%87%8D%E6%8E%92%E5%BA%8F">#</a> 防重排序</span></a></h3><p>我们从一个最经典的例子来分析重排序问题。大家应该都很熟悉单例模式的实现，而在并发环境下的单例实现方式，我们通常可以采用双重检查加锁(DCL)的方式来实现。其源码如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Singleton</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> volatile</span><span style="color:#E5C07B;"> Singleton</span><span style="color:#E06C75;"> singleton</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 构造函数私有，禁止外部实例化</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#61AFEF;"> Singleton</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> Singleton</span><span style="color:#61AFEF;"> getInstance</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (singleton </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            synchronized</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">singleton</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (singleton </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    singleton </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Singleton</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> singleton;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们分析一下为什么要在变量singleton之间加上volatile关键字。要理解这个问题，先要了解对象的构造过程，实例化一个对象其实可以分为三个步骤：</p><ul><li>分配内存空间。</li><li>初始化对象。</li><li>将内存空间的地址赋值给对应的引用。</li></ul><p>但是由于操作系统可以<code>对指令进行重排序</code>，所以上面的过程也可能会变成如下过程：</p><ul><li>分配内存空间。</li><li>将内存空间的地址赋值给对应的引用。</li><li>初始化对象</li></ul><p>如果是这个流程，多线程环境下就可能将一个未初始化的对象引用暴露出来，从而导致不可预料的结果。因此，为了防止这个过程的重排序，我们需要将变量设置为volatile类型的变量。</p><h3 id="实现可见性" tabindex="-1"><a class="header-anchor" href="#实现可见性"><span><a href="#%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%A7%81%E6%80%A7">#</a> 实现可见性</span></a></h3><p>可见性问题主要指一个线程修改了共享变量值，而另一个线程却看不到。引起可见性问题的主要原因是每个线程拥有自己的一个高速缓存区——线程工作内存。volatile关键字能有效的解决这个问题，我们看下下面的例子，就可以知道其作用：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> TestVolatile</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> stop </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Thread-A</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Thread A&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">stop) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; stopped&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Thread-main</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            TimeUnit</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SECONDS</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; after 1 seconds&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        stop </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行输出如下</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">Thread[main,5,main]</span><span style="color:#98C379;"> after</span><span style="color:#D19A66;"> 1</span><span style="color:#98C379;"> seconds</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">//</span><span style="color:#98C379;"> Thread</span><span style="color:#98C379;"> A一直在loop,</span><span style="color:#98C379;"> 因为Thread</span><span style="color:#98C379;"> A</span><span style="color:#98C379;"> 由于可见性原因看不到Thread</span><span style="color:#98C379;"> Main</span><span style="color:#98C379;"> 已经修改stop的值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 Thread-main 休眠1秒之后，设置 stop = ture，但是Thread A根本没停下来，这就是可见性问题。如果通过在stop变量前面加上volatile关键字则会真正stop:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">Thread[main,5,main]</span><span style="color:#98C379;"> after</span><span style="color:#D19A66;"> 1</span><span style="color:#98C379;"> seconds</span></span>
<span class="line"><span style="color:#61AFEF;">Thread[Thread</span><span style="color:#98C379;"> A,5,main]</span><span style="color:#98C379;"> stopped</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">Process</span><span style="color:#98C379;"> finished</span><span style="color:#98C379;"> with</span><span style="color:#98C379;"> exit</span><span style="color:#98C379;"> code</span><span style="color:#D19A66;"> 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="保证原子性-单次读-写" tabindex="-1"><a class="header-anchor" href="#保证原子性-单次读-写"><span><a href="#%E4%BF%9D%E8%AF%81%E5%8E%9F%E5%AD%90%E6%80%A7-%E5%8D%95%E6%AC%A1%E8%AF%BB-%E5%86%99">#</a> 保证原子性:单次读/写</span></a></h3><p>volatile不能保证完全的原子性，只能保证单次的读/写操作具有原子性。先从如下两个问题来理解（后文再从内存屏障的角度理解）：</p><h4 id="问题1-i-为什么不能保证原子性" tabindex="-1"><a class="header-anchor" href="#问题1-i-为什么不能保证原子性"><span><a href="#%E9%97%AE%E9%A2%981-i-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E4%BF%9D%E8%AF%81%E5%8E%9F%E5%AD%90%E6%80%A7">#</a> 问题1： i++为什么不能保证原子性?</span></a></h4><p>对于原子性，需要强调一点，也是大家容易误解的一点：对volatile变量的单次读/写操作可以保证原子性的，如long和double类型变量，但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作。</p><p>现在我们就通过下列程序来演示一下这个问题：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> VolatileTest01</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    volatile</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> addI</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">        i++;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;">  VolatileTest01</span><span style="color:#E06C75;"> test01</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VolatileTest01</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; n </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 1000</span><span style="color:#ABB2BF;">; n++) {</span></span>
<span class="line"><span style="color:#C678DD;">            new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Runnable</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">                @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">                public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                    try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                        Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                    } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                        e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                    }</span></span>
<span class="line"><span style="color:#E5C07B;">                    test01</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addI</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//等待10秒，保证上面程序执行完成</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">test01</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家可能会误认为对变量i加上关键字volatile后，这段程序就是线程安全的。大家可以尝试运行上面的程序。下面是我本地运行的结果：981 可能每个人运行的结果不相同。不过应该能看出，volatile是无法保证原子性的(否则结果应该是1000)。原因也很简单，i++其实是一个复合操作，包括三步骤：</p><ul><li>读取i的值。</li><li>对i加1。</li><li>将i的值写回内存。 volatile是无法保证这三个操作是具有原子性的，我们可以通过AtomicInteger或者Synchronized来保证+1操作的原子性。 注：上面几段代码中多处执行了Thread.sleep()方法，目的是为了增加并发问题的产生几率，无其他作用。</li></ul><h4 id="问题2-共享的long和double变量的为什么要用volatile" tabindex="-1"><a class="header-anchor" href="#问题2-共享的long和double变量的为什么要用volatile"><span><a href="#%E9%97%AE%E9%A2%982-%E5%85%B1%E4%BA%AB%E7%9A%84long%E5%92%8Cdouble%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8volatile">#</a> 问题2： 共享的long和double变量的为什么要用volatile?</span></a></h4><p>因为long和double两种数据类型的操作可分为高32位和低32位两部分，因此普通的long或double类型读/写可能不是原子的。因此，鼓励大家将共享的long和double变量设置为volatile类型，这样能保证任何情况下对long和double的单次读/写操作都具有原子性。</p><p>如下是JLS中的解释：</p><blockquote><p>17.7 Non-Atomic Treatment of double and long</p></blockquote><ul><li>For the purposes of the Java programming language memory model, a single write to a non-volatile long or double value is treated as two separate writes: one to each 32-bit half. This can result in a situation where a thread sees the first 32 bits of a 64-bit value from one write, and the second 32 bits from another write.</li><li>Writes and reads of volatile long and double values are always atomic.</li><li>Writes to and reads of references are always atomic, regardless of whether they are implemented as 32-bit or 64-bit values.</li><li>Some implementations may find it convenient to divide a single write action on a 64-bit long or double value into two write actions on adjacent 32-bit values. For efficiency’s sake, this behavior is implementation-specific; an implementation of the Java Virtual Machine is free to perform writes to long and double values atomically or in two parts.</li><li>Implementations of the Java Virtual Machine are encouraged to avoid splitting 64-bit values where possible. Programmers are encouraged to declare shared 64-bit values as volatile or synchronize their programs correctly to avoid possible complications.</li></ul><p>目前各种平台下的商用虚拟机都选择把 64 位数据的读写操作作为原子操作来对待，因此我们在编写代码时一般不把long 和 double 变量专门声明为 volatile多数情况下也是不会错的。</p><h2 id="volatile-的实现原理" tabindex="-1"><a class="header-anchor" href="#volatile-的实现原理"><span><a href="#volatile-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">#</a> volatile 的实现原理</span></a></h2><h3 id="volatile-可见性实现" tabindex="-1"><a class="header-anchor" href="#volatile-可见性实现"><span><a href="#volatile-%E5%8F%AF%E8%A7%81%E6%80%A7%E5%AE%9E%E7%8E%B0">#</a> volatile 可见性实现</span></a></h3><blockquote><p>volatile 变量的内存可见性是基于内存屏障(Memory Barrier)实现:</p></blockquote><ul><li>内存屏障，又称内存栅栏，是一个 CPU 指令。</li><li>在程序运行时，为了提高执行性能，编译器和处理器会对指令进行重排序，JMM 为了保证在不同的编译器和 CPU 上有相同的结果，通过插入特定类型的内存屏障来禁止+ 特定类型的编译器重排序和处理器重排序，插入一条内存屏障会告诉编译器和 CPU：不管什么指令都不能和这条 Memory Barrier 指令重排序。</li></ul><p>写一段简单的 Java 代码，声明一个 volatile 变量，并赋值。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Test</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> update</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        a </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Test</span><span style="color:#E06C75;"> test</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Test</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        test</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 hsdis 和 jitwatch 工具可以得到编译后的汇编代码:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2;">......</span></span>
<span class="line"><span style="color:#61AFEF;">  0x0000000002951563:</span><span style="color:#98C379;"> and</span><span style="color:#E06C75;">    $0xffffffffffffff87</span><span style="color:#98C379;">,%rdi</span></span>
<span class="line"><span style="color:#61AFEF;">  0x0000000002951567:</span><span style="color:#98C379;"> je</span><span style="color:#D19A66;">     0x00000000029515f8</span></span>
<span class="line"><span style="color:#61AFEF;">  0x000000000295156d:</span><span style="color:#98C379;"> test</span><span style="color:#E06C75;">   $0x7</span><span style="color:#98C379;">,%rdi</span></span>
<span class="line"><span style="color:#61AFEF;">  0x0000000002951574:</span><span style="color:#98C379;"> jne</span><span style="color:#D19A66;">    0x00000000029515bd</span></span>
<span class="line"><span style="color:#61AFEF;">  0x0000000002951576:</span><span style="color:#98C379;"> test</span><span style="color:#E06C75;">   $0x300</span><span style="color:#98C379;">,%rdi</span></span>
<span class="line"><span style="color:#61AFEF;">  0x000000000295157d:</span><span style="color:#98C379;"> jne</span><span style="color:#D19A66;">    0x000000000295159c</span></span>
<span class="line"><span style="color:#61AFEF;">  0x000000000295157f:</span><span style="color:#98C379;"> and</span><span style="color:#E06C75;">    $0x37f</span><span style="color:#98C379;">,%rax</span></span>
<span class="line"><span style="color:#61AFEF;">  0x0000000002951586:</span><span style="color:#98C379;"> mov</span><span style="color:#98C379;">    %rax,%rdi</span></span>
<span class="line"><span style="color:#61AFEF;">  0x0000000002951589:</span><span style="color:#98C379;"> or</span><span style="color:#98C379;">     %r15,%rdi</span></span>
<span class="line"><span style="color:#61AFEF;">  0x000000000295158c:</span><span style="color:#98C379;"> lock</span><span style="color:#98C379;"> cmpxchg</span><span style="color:#98C379;"> %rdi,</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">%rdx</span><span style="color:#ABB2BF;">)  </span><span style="color:#98C379;">//在</span><span style="color:#98C379;"> volatile</span><span style="color:#98C379;"> 修饰的共享变量进行写操作的时候会多出</span><span style="color:#98C379;"> lock</span><span style="color:#98C379;"> 前缀的指令</span></span>
<span class="line"><span style="color:#61AFEF;">  0x0000000002951591:</span><span style="color:#98C379;"> jne</span><span style="color:#D19A66;">    0x0000000002951a15</span></span>
<span class="line"><span style="color:#61AFEF;">  0x0000000002951597:</span><span style="color:#98C379;"> jmpq</span><span style="color:#D19A66;">   0x00000000029515f8</span></span>
<span class="line"><span style="color:#61AFEF;">  0x000000000295159c:</span><span style="color:#98C379;"> mov</span><span style="color:#D19A66;">    0x8</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">%rdx</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,%edi</span></span>
<span class="line"><span style="color:#61AFEF;">  0x000000000295159f:</span><span style="color:#98C379;"> shl</span><span style="color:#E06C75;">    $0x3</span><span style="color:#98C379;">,%rdi</span></span>
<span class="line"><span style="color:#61AFEF;">  0x00000000029515a3:</span><span style="color:#98C379;"> mov</span><span style="color:#D19A66;">    0xa8</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">%rdi</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">,%rdi</span></span>
<span class="line"><span style="color:#61AFEF;">  0x00000000029515aa:</span><span style="color:#98C379;"> or</span><span style="color:#98C379;">     %r15,%rdi</span></span>
<span class="line"><span style="color:#56B6C2;">......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lock 前缀的指令在多核处理器下会引发两件事情:</p><ul><li>将当前处理器缓存行的数据写回到系统内存。</li><li>写回内存的操作会使在其他 CPU 里缓存了该内存地址的数据无效。</li></ul><p>为了提高处理速度，处理器不直接和内存进行通信，而是先将系统内存的数据读到内部缓存(L1，L2 或其他)后再进行操作，但操作完不知道何时会写到内存。</p><p>如果对声明了 volatile 的变量进行写操作，JVM 就会向处理器发送一条 lock 前缀的指令，将这个变量所在缓存行的数据写回到系统内存。</p><p>为了保证各个处理器的缓存是一致的，实现了缓存一致性协议(MESI)，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里。</p><p>所有多核处理器下还会完成：当处理器发现本地缓存失效后，就会从内存中重读该变量数据，即可以获取当前最新值。</p><p>volatile 变量通过这样的机制就使得每个线程都能获得该变量的最新值。</p><h4 id="lock-指令" tabindex="-1"><a class="header-anchor" href="#lock-指令"><span><a href="#lock-%E6%8C%87%E4%BB%A4">#</a> lock 指令</span></a></h4><p>在 Pentium 和早期的 IA-32 处理器中，lock 前缀会使处理器执行当前指令时产生一个 LOCK# 信号，会对总线进行锁定，其它 CPU 对内存的读写请求都会被阻塞，直到锁释放。 后来的处理器，加锁操作是由高速缓存锁代替总线锁来处理。 因为锁总线的开销比较大，锁总线期间其他 CPU 没法访问内存。 这种场景多缓存的数据一致通过缓存一致性协议(MESI)来保证。</p><h4 id="缓存一致性" tabindex="-1"><a class="header-anchor" href="#缓存一致性"><span><a href="#%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7">#</a> 缓存一致性</span></a></h4><p>缓存是分段(line)的，一个段对应一块存储空间，称之为缓存行，它是 CPU 缓存中可分配的最小存储单元，大小 32 字节、64 字节、128 字节不等，这与 CPU 架构有关，通常来说是 64 字节。 LOCK# 因为锁总线效率太低，因此使用了多组缓存。 为了使其行为看起来如同一组缓存那样。因而设计了 缓存一致性协议。 缓存一致性协议有多种，但是日常处理的大多数计算机设备都属于 &quot; 嗅探(snooping)&quot; 协议。 所有内存的传输都发生在一条共享的总线上，而所有的处理器都能看到这条总线。 缓存本身是独立的，但是内存是共享资源，所有的内存访问都要经过仲裁(同一个指令周期中，只有一个 CPU 缓存可以读写内存)。 CPU 缓存不仅仅在做内存传输的时候才与总线打交道，而是不停在嗅探总线上发生的数据交换，跟踪其他缓存在做什么。 当一个缓存代表它所属的处理器去读写内存时，其它处理器都会得到通知，它们以此来使自己的缓存保持同步。 只要某个处理器写内存，其它处理器马上知道这块内存在它们的缓存段中已经失效。</p><h3 id="volatile-有序性实现" tabindex="-1"><a class="header-anchor" href="#volatile-有序性实现"><span><a href="#volatile-%E6%9C%89%E5%BA%8F%E6%80%A7%E5%AE%9E%E7%8E%B0">#</a> volatile 有序性实现</span></a></h3><h4 id="volatile-的-happens-before-关系" tabindex="-1"><a class="header-anchor" href="#volatile-的-happens-before-关系"><span><a href="#volatile-%E7%9A%84-happens-before-%E5%85%B3%E7%B3%BB">#</a> volatile 的 happens-before 关系</span></a></h4><p>happens-before 规则中有一条是 volatile 变量规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//假设线程A执行writer方法，线程B执行reader方法</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> VolatileExample</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> a </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    volatile</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> flag </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> writer</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        a </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;              </span><span style="color:#7F848E;font-style:italic;">// 1 线程A修改共享变量</span></span>
<span class="line"><span style="color:#ABB2BF;">        flag </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;        </span><span style="color:#7F848E;font-style:italic;">// 2 线程A写volatile变量</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> reader</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (flag) {         </span><span style="color:#7F848E;font-style:italic;">// 3 线程B读同一个volatile变量</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> a;          </span><span style="color:#7F848E;font-style:italic;">// 4 线程B读共享变量</span></span>
<span class="line"><span style="color:#ABB2BF;">        ……</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 happens-before 规则，上面过程会建立 3 类 happens-before 关系。</p><ul><li>根据程序次序规则：1 happens-before 2 且 3 happens-before 4。</li><li>根据 volatile 规则：2 happens-before 3。</li><li>根据 happens-before 的传递性规则：1 happens-before 4。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-volatile-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>因为以上规则，当线程 A 将 volatile 变量 flag 更改为 true 后，线程 B 能够迅速感知。</p><h4 id="volatile-禁止重排序" tabindex="-1"><a class="header-anchor" href="#volatile-禁止重排序"><span><a href="#volatile-%E7%A6%81%E6%AD%A2%E9%87%8D%E6%8E%92%E5%BA%8F">#</a> volatile 禁止重排序</span></a></h4><p>为了性能优化，JMM 在不改变正确语义的前提下，会允许编译器和处理器对指令序列进行重排序。JMM 提供了内存屏障阻止这种重排序。</p><p>Java 编译器会在生成指令系列时在适当的位置会插入内存屏障指令来禁止特定类型的处理器重排序。</p><p>JMM 会针对编译器制定 volatile 重排序规则表。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-volatile-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>&quot; NO &quot; 表示禁止重排序。</p><p>为了实现 volatile 内存语义时，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。</p><p>对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎是不可能的，为此，JMM 采取了保守的策略。</p><ul><li>在每个 volatile 写操作的前面插入一个 StoreStore 屏障。</li><li>在每个 volatile 写操作的后面插入一个 StoreLoad 屏障。</li><li>在每个 volatile 读操作的后面插入一个 LoadLoad 屏障。</li><li>在每个 volatile 读操作的后面插入一个 LoadStore 屏障。</li></ul><p>volatile 写是在前面和后面分别插入内存屏障，而 volatile 读操作是在后面插入两个内存屏障。</p><table><thead><tr><th>内存屏障</th><th>说明</th></tr></thead><tbody><tr><td>StoreStore 屏障</td><td>禁止上面的普通写和下面的 volatile 写重排序。</td></tr><tr><td>StoreLoad 屏障</td><td>防止上面的 volatile 写与下面可能有的 volatile 读/写重排序。</td></tr><tr><td>LoadLoad 屏障</td><td>禁止下面所有的普通读操作和上面的 volatile 读重排序。</td></tr><tr><td>LoadStore 屏障</td><td>禁止下面所有的普通写操作和上面的 volatile 读重排序。</td></tr></tbody></table><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-volatile-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-volatile-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="volatile-的应用场景" tabindex="-1"><a class="header-anchor" href="#volatile-的应用场景"><span><a href="#volatile-%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> volatile 的应用场景</span></a></h2><p>使用 volatile 必须具备的条件</p><ul><li>对变量的写操作不依赖于当前值。</li><li>该变量没有包含在具有其他变量的不变式中。</li><li>只有在状态真正独立于程序内其他内容时才能使用 volatile。</li></ul><h3 id="模式1-状态标志" tabindex="-1"><a class="header-anchor" href="#模式1-状态标志"><span><a href="#%E6%A8%A1%E5%BC%8F1-%E7%8A%B6%E6%80%81%E6%A0%87%E5%BF%97">#</a> 模式1：状态标志</span></a></h3><p>也许实现 volatile 变量的规范使用仅仅是使用一个布尔状态标志，用于指示发生了一个重要的一次性事件，例如完成初始化或请求停机。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">volatile</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> shutdownRequested</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">......</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> shutdown</span><span style="color:#E06C75;">() { shutdownRequested </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> }</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doWork</span><span style="color:#E06C75;">() { </span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">shutdownRequested) { </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // do stuff</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模式2-一次性安全发布-one-time-safe-publication" tabindex="-1"><a class="header-anchor" href="#模式2-一次性安全发布-one-time-safe-publication"><span><a href="#%E6%A8%A1%E5%BC%8F2-%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AE%89%E5%85%A8%E5%8F%91%E5%B8%83-one-time-safe-publication">#</a> 模式2：一次性安全发布(one-time safe publication)</span></a></h3><p>缺乏同步会导致无法实现可见性，这使得确定何时写入对象引用而不是原始值变得更加困难。在缺乏同步的情况下，可能会遇到某个对象引用的更新值(由另一个线程写入)和该对象状态的旧值同时存在。(这就是造成著名的双重检查锁定(double-checked-locking)问题的根源，其中对象引用在没有同步的情况下进行读操作，产生的问题是您可能会看到一个更新的引用，但是仍然会通过该引用看到不完全构造的对象)。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> BackgroundFloobleLoader</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> volatile</span><span style="color:#E5C07B;"> Flooble</span><span style="color:#E06C75;"> theFlooble</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> initInBackground</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // do lots of stuff</span></span>
<span class="line"><span style="color:#ABB2BF;">        theFlooble </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Flooble</span><span style="color:#ABB2BF;">();  </span><span style="color:#7F848E;font-style:italic;">// this is the only write to theFlooble</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> SomeOtherClass</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doWork</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) { </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // do some stuff...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // use the Flooble, but only if it is ready</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">floobleLoader</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">theFlooble</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#61AFEF;">                doSomething</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">floobleLoader</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">theFlooble</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模式3-独立观察-independent-observation" tabindex="-1"><a class="header-anchor" href="#模式3-独立观察-independent-observation"><span><a href="#%E6%A8%A1%E5%BC%8F3-%E7%8B%AC%E7%AB%8B%E8%A7%82%E5%AF%9F-independent-observation">#</a> 模式3：独立观察(independent observation)</span></a></h3><p>安全使用 volatile 的另一种简单模式是定期 发布 观察结果供程序内部使用。例如，假设有一种环境传感器能够感觉环境温度。一个后台线程可能会每隔几秒读取一次该传感器，并更新包含当前文档的 volatile 变量。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UserManager</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> volatile</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> lastUser</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> authenticate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> user</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> password</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        boolean</span><span style="color:#E06C75;"> valid</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> passwordIsValid</span><span style="color:#ABB2BF;">(user, password);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (valid) {</span></span>
<span class="line"><span style="color:#E5C07B;">            User</span><span style="color:#E06C75;"> u</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> User</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            activeUsers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(u);</span></span>
<span class="line"><span style="color:#ABB2BF;">            lastUser </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> user;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> valid;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模式4-volatile-bean-模式" tabindex="-1"><a class="header-anchor" href="#模式4-volatile-bean-模式"><span><a href="#%E6%A8%A1%E5%BC%8F4-volatile-bean-%E6%A8%A1%E5%BC%8F">#</a> 模式4：volatile bean 模式</span></a></h3><p>在 volatile bean 模式中，JavaBean 的所有数据成员都是 volatile 类型的，并且 getter 和 setter 方法必须非常普通 —— 除了获取或设置相应的属性外，不能包含任何逻辑。此外，对于对象引用的数据成员，引用的对象必须是有效不可变的。(这将禁止具有数组值的属性，因为当数组引用被声明为 volatile 时，只有引用而不是数组本身具有 volatile 语义)。对于任何 volatile 变量，不变式或约束都不能包含 JavaBean 属性。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">ThreadSafe</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> volatile</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> firstName</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> volatile</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> lastName</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> getFirstName</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> firstName; }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> getLastName</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> lastName; }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> getAge</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> age; }</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> setFirstName</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> firstName</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> { </span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">firstName</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> firstName;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> setLastName</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> lastName</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> { </span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lastName</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> lastName;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> setAge</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> age</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> { </span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> age;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模式5-开销较低的读-写锁策略" tabindex="-1"><a class="header-anchor" href="#模式5-开销较低的读-写锁策略"><span><a href="#%E6%A8%A1%E5%BC%8F5-%E5%BC%80%E9%94%80%E8%BE%83%E4%BD%8E%E7%9A%84%E8%AF%BB-%E5%86%99%E9%94%81%E7%AD%96%E7%95%A5">#</a> 模式5：开销较低的读－写锁策略</span></a></h3><p>volatile 的功能还不足以实现计数器。因为 ++x 实际上是三种操作(读、添加、存储)的简单组合，如果多个线程凑巧试图同时对 volatile 计数器执行增量操作，那么它的更新值有可能会丢失。 如果读操作远远超过写操作，可以结合使用内部锁和 volatile 变量来减少公共代码路径的开销。 安全的计数器使用 synchronized 确保增量操作是原子的，并使用 volatile 保证当前结果的可见性。如果更新不频繁的话，该方法可实现更好的性能，因为读路径的开销仅仅涉及 volatile 读操作，这通常要优于一个无竞争的锁获取的开销。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">ThreadSafe</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CheesyCounter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Employs the cheap read-write lock trick</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // All mutative operations MUST be done with the &#39;this&#39; lock held</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">GuardedBy</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;this&quot;</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> getValue</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> value; }</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> increment</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> value++;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模式6-双重检查-double-checked" tabindex="-1"><a class="header-anchor" href="#模式6-双重检查-double-checked"><span><a href="#%E6%A8%A1%E5%BC%8F6-%E5%8F%8C%E9%87%8D%E6%A3%80%E6%9F%A5-double-checked">#</a> 模式6：双重检查(double-checked)</span></a></h3><p>就是我们上文举的例子。</p><p>单例模式的一种实现方式，但很多人会忽略 volatile 关键字，因为没有该关键字，程序也可以很好的运行，只不过代码的稳定性总不是 100%，说不定在未来的某个时刻，隐藏的 bug 就出来了。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Singleton</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> Singleton</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#61AFEF;"> Singleton</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> Singleton</span><span style="color:#61AFEF;"> getInstance</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (instance </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">            syschronized</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Singleton</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (instance </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    instance </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Singleton</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> instance;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,98)]))}const r=a(o,[["render",p],["__file","关键字 volatile 解析.html.vue"]]),c=JSON.parse(`{"path":"/posts/Java/ThreadConcurrency/%E5%85%B3%E9%94%AE%E5%AD%97%20volatile%20%E8%A7%A3%E6%9E%90.html","title":"关键字 volatile 解析","lang":"zh-CN","frontmatter":{"title":"关键字 volatile 解析","subtitle":"Java，Java开发，Java 体系","date":"2024-03-07T10:15:26.000Z","category":["Java"],"tag":["Java","Thread","concurrency"],"order":6,"description":"相比Sychronized(重量级锁，对系统性能影响较大)，volatile提供了另一种解决可见性和有序性问题的方案。@pdai 关键字 volatile 解析 带着BAT大厂的面试问题去理解volatile volatile的作用详解 防重排序 实现可见性 保证原子性:单次读/写 问题1： i++为什么不能保证原子性? 问题2： 共享的long和do...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/ThreadConcurrency/%E5%85%B3%E9%94%AE%E5%AD%97%20volatile%20%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"关键字 volatile 解析"}],["meta",{"property":"og:description","content":"相比Sychronized(重量级锁，对系统性能影响较大)，volatile提供了另一种解决可见性和有序性问题的方案。@pdai 关键字 volatile 解析 带着BAT大厂的面试问题去理解volatile volatile的作用详解 防重排序 实现可见性 保证原子性:单次读/写 问题1： i++为什么不能保证原子性? 问题2： 共享的long和do..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-volatile-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T06:05:48.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:tag","content":"concurrency"}],["meta",{"property":"article:published_time","content":"2024-03-07T10:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T06:05:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关键字 volatile 解析\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-volatile-1.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-volatile-2.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-volatile-3.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-volatile-4.png\\"],\\"datePublished\\":\\"2024-03-07T10:15:26.000Z\\",\\"dateModified\\":\\"2024-03-08T06:05:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 带着BAT大厂的面试问题去理解volatile","slug":"带着bat大厂的面试问题去理解volatile","link":"#带着bat大厂的面试问题去理解volatile","children":[]},{"level":2,"title":"# volatile的作用详解","slug":"volatile的作用详解","link":"#volatile的作用详解","children":[{"level":3,"title":"# 防重排序","slug":"防重排序","link":"#防重排序","children":[]},{"level":3,"title":"# 实现可见性","slug":"实现可见性","link":"#实现可见性","children":[]},{"level":3,"title":"# 保证原子性:单次读/写","slug":"保证原子性-单次读-写","link":"#保证原子性-单次读-写","children":[]}]},{"level":2,"title":"# volatile 的实现原理","slug":"volatile-的实现原理","link":"#volatile-的实现原理","children":[{"level":3,"title":"# volatile 可见性实现","slug":"volatile-可见性实现","link":"#volatile-可见性实现","children":[]},{"level":3,"title":"# volatile 有序性实现","slug":"volatile-有序性实现","link":"#volatile-有序性实现","children":[]}]},{"level":2,"title":"# volatile 的应用场景","slug":"volatile-的应用场景","link":"#volatile-的应用场景","children":[{"level":3,"title":"# 模式1：状态标志","slug":"模式1-状态标志","link":"#模式1-状态标志","children":[]},{"level":3,"title":"# 模式2：一次性安全发布(one-time safe publication)","slug":"模式2-一次性安全发布-one-time-safe-publication","link":"#模式2-一次性安全发布-one-time-safe-publication","children":[]},{"level":3,"title":"# 模式3：独立观察(independent observation)","slug":"模式3-独立观察-independent-observation","link":"#模式3-独立观察-independent-observation","children":[]},{"level":3,"title":"# 模式4：volatile bean 模式","slug":"模式4-volatile-bean-模式","link":"#模式4-volatile-bean-模式","children":[]},{"level":3,"title":"# 模式5：开销较低的读－写锁策略","slug":"模式5-开销较低的读-写锁策略","link":"#模式5-开销较低的读-写锁策略","children":[]},{"level":3,"title":"# 模式6：双重检查(double-checked)","slug":"模式6-双重检查-double-checked","link":"#模式6-双重检查-double-checked","children":[]}]}],"git":{"createdTime":1709869916000,"updatedTime":1709877948000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":17.24,"words":5171},"filePathRelative":"posts/Java/ThreadConcurrency/关键字 volatile 解析.md","localizedDate":"2024年3月7日","excerpt":"<blockquote>\\n<p>相比Sychronized(重量级锁，对系统性能影响较大)，volatile提供了另一种解决可见性和有序性问题的方案。@pdai</p>\\n</blockquote>\\n<ul>\\n<li>关键字 volatile 解析\\n<ul>\\n<li><a href=\\"#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3volatile\\">带着BAT大厂的面试问题去理解volatile</a></li>\\n<li>volatile的作用详解\\n<ul>\\n<li><a href=\\"#%E9%98%B2%E9%87%8D%E6%8E%92%E5%BA%8F\\">防重排序</a></li>\\n<li><a href=\\"#%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%A7%81%E6%80%A7\\">实现可见性</a></li>\\n<li>保证原子性:单次读/写\\n<ul>\\n<li><a href=\\"#%E9%97%AE%E9%A2%981-i%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E4%BF%9D%E8%AF%81%E5%8E%9F%E5%AD%90%E6%80%A7\\">问题1： i++为什么不能保证原子性?</a></li>\\n<li><a href=\\"#%E9%97%AE%E9%A2%982-%E5%85%B1%E4%BA%AB%E7%9A%84long%E5%92%8Cdouble%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8volatile\\">问题2： 共享的long和double变量的为什么要用volatile?</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>volatile 的实现原理\\n<ul>\\n<li>volatile 可见性实现\\n<ul>\\n<li><a href=\\"#lock-%E6%8C%87%E4%BB%A4\\">lock 指令</a></li>\\n<li><a href=\\"#%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7\\">缓存一致性</a></li>\\n</ul>\\n</li>\\n<li>volatile 有序性实现\\n<ul>\\n<li><a href=\\"#volatile-%E7%9A%84-happens-before-%E5%85%B3%E7%B3%BB\\">volatile 的 happens-before 关系</a></li>\\n<li><a href=\\"#volatile-%E7%A6%81%E6%AD%A2%E9%87%8D%E6%8E%92%E5%BA%8F\\">volatile 禁止重排序</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>volatile 的应用场景\\n<ul>\\n<li><a href=\\"#%E6%A8%A1%E5%BC%8F1%E7%8A%B6%E6%80%81%E6%A0%87%E5%BF%97\\">模式1：状态标志</a></li>\\n<li><a href=\\"#%E6%A8%A1%E5%BC%8F2%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AE%89%E5%85%A8%E5%8F%91%E5%B8%83one-time-safe-publication\\">模式2：一次性安全发布(one-time safe publication)</a></li>\\n<li><a href=\\"#%E6%A8%A1%E5%BC%8F3%E7%8B%AC%E7%AB%8B%E8%A7%82%E5%AF%9Findependent-observation\\">模式3：独立观察(independent observation)</a></li>\\n<li><a href=\\"#%E6%A8%A1%E5%BC%8F4volatile-bean-%E6%A8%A1%E5%BC%8F\\">模式4：volatile bean 模式</a></li>\\n<li><a href=\\"#%E6%A8%A1%E5%BC%8F5%E5%BC%80%E9%94%80%E8%BE%83%E4%BD%8E%E7%9A%84%E8%AF%BB%E5%86%99%E9%94%81%E7%AD%96%E7%95%A5\\">模式5：开销较低的读－写锁策略</a></li>\\n<li><a href=\\"#%E6%A8%A1%E5%BC%8F6%E5%8F%8C%E9%87%8D%E6%A3%80%E6%9F%A5double-checked\\">模式6：双重检查(double-checked)</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{r as comp,c as data};
