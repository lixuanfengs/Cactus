import{_ as s,o as n,c as a,h as l}from"./app-BGJUA9Vz.js";const e={},p=l(`<blockquote><p>BIO就是: blocking IO。最容易理解、最容易实现的IO工作方式，应用程序向操作系统请求网络IO操作，这时应用程序会一直等待；另一方面，操作系统收到请求后，也会等待，直到网络上有数据传到监听端口；操作系统在收集数据后，会把数据发送给应用程序；最后应用程序受到数据，并解除等待状态。</p></blockquote><ul><li>IO 之 BIO 详解 <ul><li><a href="#%E5%87%A0%E4%B8%AA%E9%87%8D%E8%A6%81%E6%A6%82%E5%BF%B5">几个重要概念</a></li><li>传统的BIO通信方式简介 <ul><li><a href="#%E4%BC%A0%E7%BB%9F%E7%9A%84bio%E7%9A%84%E9%97%AE%E9%A2%98">传统的BIO的问题</a></li><li><a href="#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%96%B9%E5%BC%8F---%E4%BC%AA%E5%BC%82%E6%AD%A5%E6%96%B9%E5%BC%8F">多线程方式 - 伪异步方式</a></li></ul></li><li>BIO通信方式深入分析 <ul><li><a href="#%E6%A8%A1%E6%8B%9F20%E4%B8%AA%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BD%BF%E7%94%A8%E5%8D%95%E7%BA%BF%E7%A8%8B">模拟20个客户端并发请求，服务器端使用单线程: </a></li><li><a href="#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9D%A5%E4%BC%98%E5%8C%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF">多线程来优化服务器端</a></li><li><a href="#%E7%9C%8B%E7%9C%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%9A%84%E6%89%A7%E8%A1%8C%E6%95%88%E6%9E%9C">看看服务器端的执行效果</a></li><li><a href="#%E9%97%AE%E9%A2%98%E6%A0%B9%E6%BA%90">问题根源</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="几个重要概念" tabindex="-1"><a class="header-anchor" href="#几个重要概念"><span><a href="#%E5%87%A0%E4%B8%AA%E9%87%8D%E8%A6%81%E6%A6%82%E5%BF%B5">#</a> 几个重要概念</span></a></h2><ul><li><code>阻塞IO</code> 和 <code>非阻塞IO</code></li></ul><p>这两个概念是<code>程序级别</code>的。主要描述的是程序请求操作系统IO操作后，如果IO资源没有准备好，那么程序该如何处理的问题: 前者等待；后者继续执行(并且使用线程一直轮询，直到有IO资源准备好了)</p><ul><li><code>同步IO</code> 和 <code>非同步IO</code></li></ul><p>这两个概念是<code>操作系统级别</code>的。主要描述的是操作系统在收到程序请求IO操作后，如果IO资源没有准备好，该如何响应程序的问题: 前者不响应，直到IO资源准备好以后；后者返回一个标记(好让程序和自己知道以后的数据往哪里通知)，当IO资源准备好以后，再用事件机制返回给程序。</p><h2 id="传统的bio通信方式简介" tabindex="-1"><a class="header-anchor" href="#传统的bio通信方式简介"><span><a href="#%E4%BC%A0%E7%BB%9F%E7%9A%84bio%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E7%AE%80%E4%BB%8B">#</a> 传统的BIO通信方式简介</span></a></h2><p>以前大多数网络通信方式都是阻塞模式的，即:</p><ul><li>客户端向服务器端发出请求后，客户端会一直等待(不会再做其他事情)，直到服务器端返回结果或者网络出现问题。</li><li>服务器端同样的，当在处理某个客户端A发来的请求时，另一个客户端B发来的请求会等待，直到服务器端的这个处理线程完成上一个处理。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-bio-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="传统的bio的问题" tabindex="-1"><a class="header-anchor" href="#传统的bio的问题"><span><a href="#%E4%BC%A0%E7%BB%9F%E7%9A%84bio%E7%9A%84%E9%97%AE%E9%A2%98">#</a> 传统的BIO的问题</span></a></h3><ul><li>同一时间，服务器只能接受来自于客户端A的请求信息；虽然客户端A和客户端B的请求是同时进行的，但客户端B发送的请求信息只能等到服务器接受完A的请求数据后，才能被接受。</li><li>由于服务器一次只能处理一个客户端请求，当处理完成并返回后(或者异常时)，才能进行第二次请求的处理。很显然，这样的处理方式在高并发的情况下，是不能采用的。</li></ul><h3 id="多线程方式-伪异步方式" tabindex="-1"><a class="header-anchor" href="#多线程方式-伪异步方式"><span><a href="#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%96%B9%E5%BC%8F-%E4%BC%AA%E5%BC%82%E6%AD%A5%E6%96%B9%E5%BC%8F">#</a> 多线程方式 - 伪异步方式</span></a></h3><p>上面说的情况是服务器只有一个线程的情况，那么读者会直接提出我们可以使用多线程技术来解决这个问题:</p><ul><li>当服务器收到客户端X的请求后，(读取到所有请求数据后)将这个请求送入一个独立线程进行处理，然后主线程继续接受客户端Y的请求。</li><li>客户端一侧，也可以使用一个子线程和服务器端进行通信。这样客户端主线程的其他工作就不受影响了，当服务器端有响应信息的时候再由这个子线程通过 监听模式/观察模式(等其他设计模式)通知主线程。</li></ul><p>如下图所示:</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-bio-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>但是使用线程来解决这个问题实际上是有局限性的:</p><ul><li>虽然在服务器端，请求的处理交给了一个独立线程进行，但是操作系统通知accept()的方式还是单个的。也就是，实际上是服务器接收到数据报文后的“业务处理过程”可以多线程，但是数据报文的接受还是需要一个一个的来(下文的示例代码和debug过程我们可以明确看到这一点)</li><li>在linux系统中，可以创建的线程是有限的。我们可以通过cat /proc/sys/kernel/threads-max 命令查看可以创建的最大线程数。当然这个值是可以更改的，但是线程越多，CPU切换所需的时间也就越长，用来处理真正业务的需求也就越少。</li><li>创建一个线程是有较大的资源消耗的。JVM创建一个线程的时候，即使这个线程不做任何的工作，JVM都会分配一个堆栈空间。这个空间的大小默认为128K，您可以通过-Xss参数进行调整。当然您还可以使用ThreadPoolExecutor线程池来缓解线程的创建问题，但是又会造成BlockingQueue积压任务的持续增加，同样消耗了大量资源。</li><li>另外，如果您的应用程序大量使用长连接的话，线程是不会关闭的。这样系统资源的消耗更容易失控。 那么，如果你真想单纯使用线程解决阻塞的问题，那么您自己都可以算出来您一个服务器节点可以一次接受多大的并发了。看来，单纯使用线程解决这个问题不是最好的办法。</li></ul><h2 id="bio通信方式深入分析" tabindex="-1"><a class="header-anchor" href="#bio通信方式深入分析"><span><a href="#bio%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90">#</a> BIO通信方式深入分析</span></a></h2><p>BIO的问题关键不在于是否使用了多线程(包括线程池)处理这次请求，而在于accept()、read()的操作点都是被阻塞。要测试这个问题，也很简单。我们模拟了20个客户端(用20根线程模拟)，利用JAVA的同步计数器CountDownLatch，保证这20个客户都初始化完成后然后同时向服务器发送请求，然后我们来观察一下Server这边接受信息的情况。</p><h3 id="模拟20个客户端并发请求-服务器端使用单线程" tabindex="-1"><a class="header-anchor" href="#模拟20个客户端并发请求-服务器端使用单线程"><span><a href="#%E6%A8%A1%E6%8B%9F20%E4%B8%AA%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BD%BF%E7%94%A8%E5%8D%95%E7%BA%BF%E7%A8%8B">#</a> 模拟20个客户端并发请求，服务器端使用单线程:</span></a></h3><p>客户端代码(SocketClientDaemon)</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> test</span><span style="color:#FFFFFF;">BS</span><span style="color:#C678DD;">ocket</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.CountDownLatch</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> SocketClientDaemon</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Integer</span><span style="color:#E06C75;"> clientNumber</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        CountDownLatch</span><span style="color:#E06C75;"> countDownLatch</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> CountDownLatch</span><span style="color:#ABB2BF;">(clientNumber);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //分别开始启动这20个客户端</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;"> ; index </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> clientNumber ; index++ , </span><span style="color:#E5C07B;">countDownLatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">countDown</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">            SocketClientRequestThread</span><span style="color:#E06C75;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SocketClientRequestThread</span><span style="color:#ABB2BF;">(countDownLatch, index);</span></span>
<span class="line"><span style="color:#C678DD;">            new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(client).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //这个wait不涉及到具体的实验逻辑，只是为了保证守护线程在启动所有线程后，进入等待状态</span></span>
<span class="line"><span style="color:#C678DD;">        synchronized</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">SocketClientDaemon</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            SocketClientDaemon</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端代码(SocketClientRequestThread模拟请求)</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> test</span><span style="color:#FFFFFF;">BS</span><span style="color:#C678DD;">ocket</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.IOException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.InputStream</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.OutputStream</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.net.Socket</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.CountDownLatch</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.commons.logging.Log</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.commons.logging.LogFactory</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.log4j.BasicConfigurator</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 一个SocketClientRequestThread线程模拟一个客户端请求。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@author</span><span style="color:#7F848E;font-style:italic;"> yinwenjie</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> SocketClientRequestThread</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Runnable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        BasicConfigurator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">configure</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 日志</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Log</span><span style="color:#E06C75;"> LOGGER </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> LogFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLog</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SocketClientRequestThread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> CountDownLatch</span><span style="color:#E06C75;"> countDownLatch</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 这个线层的编号</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> countDownLatch</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Integer</span><span style="color:#E06C75;"> clientIndex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * countDownLatch是java提供的同步计数器。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 当计数器数值减为0时，所有受其影响而等待的线程将会被激活。这样保证模拟并发请求的真实性</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> countDownLatch</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> SocketClientRequestThread</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">CountDownLatch</span><span style="color:#E06C75;font-style:italic;"> countDownLatch</span><span style="color:#ABB2BF;"> , </span><span style="color:#E5C07B;">Integer</span><span style="color:#E06C75;font-style:italic;"> clientIndex</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">countDownLatch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> countDownLatch;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">clientIndex</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> clientIndex;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Socket</span><span style="color:#E06C75;"> socket</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        OutputStream</span><span style="color:#E06C75;"> clientRequest</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        InputStream</span><span style="color:#E06C75;"> clientResponse</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            socket </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Socket</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;localhost&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">83</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            clientRequest </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOutputStream</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            clientResponse </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInputStream</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //等待，直到SocketClientDaemon完成所有线程的启动，然后所有线程一起发送请求</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">countDownLatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">await</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //发送请求信息</span></span>
<span class="line"><span style="color:#E5C07B;">            clientRequest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">((</span><span style="color:#98C379;">&quot;这是第&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">clientIndex</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot; 个客户端的请求。&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getBytes</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">            clientRequest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flush</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //在这里等待，直到服务器返回信息</span></span>
<span class="line"><span style="color:#E5C07B;">            SocketClientRequestThread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">LOGGER</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;第&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">clientIndex</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;个客户端的请求发送完成，等待服务器返回信息&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> maxLen</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1024</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">contextBytes</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[maxLen];</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> realLen</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            String</span><span style="color:#E06C75;"> message</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //程序执行到这里，会一直等待服务器返回信息(注意，前提是in和out都不能close，如果close了就收不到服务器的反馈了)</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;">((realLen </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> clientResponse</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(contextBytes, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, maxLen)) </span><span style="color:#56B6C2;">!=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                message </span><span style="color:#56B6C2;">+=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(contextBytes , </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> , realLen);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            SocketClientRequestThread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">LOGGER</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;接收到来自服务器的信息:&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> message);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            SocketClientRequestThread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">LOGGER</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">(), e);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;">(clientRequest </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    clientRequest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;">(clientResponse </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    clientResponse</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">IOException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                SocketClientRequestThread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">LOGGER</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">(), e);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器端(SocketServer1)单个线程</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> test</span><span style="color:#FFFFFF;">BS</span><span style="color:#C678DD;">ocket</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.InputStream</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.OutputStream</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.net.ServerSocket</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.net.Socket</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.commons.logging.Log</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.commons.logging.LogFactory</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.log4j.BasicConfigurator</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> SocketServer1</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        BasicConfigurator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">configure</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 日志</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Log</span><span style="color:#E06C75;"> LOGGER </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> LogFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLog</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SocketServer1</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">        ServerSocket</span><span style="color:#E06C75;"> serverSocket</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ServerSocket</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">83</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                Socket</span><span style="color:#E06C75;"> socket</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> serverSocket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                //下面我们收取信息</span></span>
<span class="line"><span style="color:#E5C07B;">                InputStream</span><span style="color:#E06C75;"> in</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInputStream</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                OutputStream</span><span style="color:#E06C75;"> out</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOutputStream</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                Integer</span><span style="color:#E06C75;"> sourcePort</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPort</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                int</span><span style="color:#E06C75;"> maxLen</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2048</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">contextBytes</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[maxLen];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                //这里也会被阻塞，直到有数据准备好</span></span>
<span class="line"><span style="color:#C678DD;">                int</span><span style="color:#E06C75;"> realLen</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> in</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(contextBytes, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, maxLen);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                //读取信息</span></span>
<span class="line"><span style="color:#E5C07B;">                String</span><span style="color:#E06C75;"> message</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(contextBytes , </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> , realLen);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                //下面打印信息</span></span>
<span class="line"><span style="color:#E5C07B;">                SocketServer1</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">LOGGER</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;服务器收到来自于端口: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> sourcePort </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;的信息: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> message);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                //下面开始发送信息</span></span>
<span class="line"><span style="color:#E5C07B;">                out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;回发响应信息！&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getBytes</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                //关闭</span></span>
<span class="line"><span style="color:#E5C07B;">                out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                in</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            SocketServer1</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">LOGGER</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">(), e);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;">(serverSocket </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                serverSocket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多线程来优化服务器端" tabindex="-1"><a class="header-anchor" href="#多线程来优化服务器端"><span><a href="#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9D%A5%E4%BC%98%E5%8C%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF">#</a> 多线程来优化服务器端</span></a></h3><p>客户端代码和上文一样，最主要是更改服务器端的代码:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> test</span><span style="color:#FFFFFF;">BS</span><span style="color:#C678DD;">ocket</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.IOException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.InputStream</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.OutputStream</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.net.ServerSocket</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.net.Socket</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.commons.logging.Log</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.commons.logging.LogFactory</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> org.apache.log4j.BasicConfigurator</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> SocketServer2</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        BasicConfigurator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">configure</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Log</span><span style="color:#E06C75;"> LOGGER </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> LogFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLog</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SocketServer2</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">        ServerSocket</span><span style="color:#E06C75;"> serverSocket</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ServerSocket</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">83</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                Socket</span><span style="color:#E06C75;"> socket</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> serverSocket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                //当然业务处理过程可以交给一个线程(这里可以使用线程池),并且线程的创建是很耗资源的。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                //最终改变不了.accept()只能一个一个接受socket的情况,并且被阻塞的情况</span></span>
<span class="line"><span style="color:#E5C07B;">                SocketServerThread</span><span style="color:#E06C75;"> socketServerThread</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SocketServerThread</span><span style="color:#ABB2BF;">(socket);</span></span>
<span class="line"><span style="color:#C678DD;">                new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(socketServerThread).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            SocketServer2</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">LOGGER</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">(), e);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;">(serverSocket </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                serverSocket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 当然，接收到客户端的socket后，业务的处理过程可以交给一个线程来做。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 但还是改变不了socket被一个一个的做accept()的情况。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@author</span><span style="color:#7F848E;font-style:italic;"> yinwenjie</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> SocketServerThread</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Runnable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 日志</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Log</span><span style="color:#E06C75;"> LOGGER </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> LogFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLog</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SocketServerThread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Socket</span><span style="color:#E06C75;"> socket</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> SocketServerThread</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Socket</span><span style="color:#E06C75;font-style:italic;"> socket</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">socket</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> socket;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        InputStream</span><span style="color:#E06C75;"> in</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        OutputStream</span><span style="color:#E06C75;"> out</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //下面我们收取信息</span></span>
<span class="line"><span style="color:#ABB2BF;">            in </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInputStream</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            out </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOutputStream</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            Integer</span><span style="color:#E06C75;"> sourcePort</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPort</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> maxLen</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1024</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">contextBytes</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[maxLen];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //使用线程，同样无法解决read方法的阻塞问题，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //也就是说read方法处同样会被阻塞，直到操作系统有数据准备好</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> realLen</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> in</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(contextBytes, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, maxLen);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //读取信息</span></span>
<span class="line"><span style="color:#E5C07B;">            String</span><span style="color:#E06C75;"> message</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(contextBytes , </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> , realLen);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //下面打印信息</span></span>
<span class="line"><span style="color:#E5C07B;">            SocketServerThread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">LOGGER</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;服务器收到来自于端口: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> sourcePort </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;的信息: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> message);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //下面开始发送信息</span></span>
<span class="line"><span style="color:#E5C07B;">            out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;回发响应信息！&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getBytes</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            SocketServerThread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">LOGGER</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">(), e);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //试图关闭</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;">(in </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    in</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;">(out </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">socket</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">IOException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                SocketServerThread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">LOGGER</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">(), e);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="看看服务器端的执行效果" tabindex="-1"><a class="header-anchor" href="#看看服务器端的执行效果"><span><a href="#%E7%9C%8B%E7%9C%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%9A%84%E6%89%A7%E8%A1%8C%E6%95%88%E6%9E%9C">#</a> 看看服务器端的执行效果</span></a></h3><p>我们主要看一看服务器使用多线程处理时的情况:</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-bio-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="问题根源" tabindex="-1"><a class="header-anchor" href="#问题根源"><span><a href="#%E9%97%AE%E9%A2%98%E6%A0%B9%E6%BA%90">#</a> 问题根源</span></a></h3><p>那么重点的问题并不是“是否使用了多线程”，而是为什么accept()、read()方法会被阻塞。即: 异步IO模式 就是为了解决这样的并发性存在的。但是为了说清楚异步IO模式，在介绍IO模式的时候，我们就要首先了解清楚，什么是 阻塞式同步、非阻塞式同步、多路复用同步模式。</p><p>API文档中对于 serverSocket.accept() 方法的使用描述:</p><blockquote><p>Listens for a connection to be made to this socket and accepts it. The method blocks until a connection is made.</p></blockquote><p>serverSocket.accept()会被阻塞? 这里涉及到阻塞式同步IO的工作原理:</p><ul><li>服务器线程发起一个accept动作，询问操作系统 是否有新的socket套接字信息从端口X发送过来。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-bio-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>注意，是询问操作系统。也就是说socket套接字的IO模式支持是基于操作系统的，那么自然同步IO/异步IO的支持就是需要操作系统级别的了。如下图:</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-bio-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-bio-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果操作系统没有发现有套接字从指定的端口X来，那么操作系统就会等待。这样serverSocket.accept()方法就会一直等待。这就是为什么accept()方法为什么会阻塞: 它内部的实现是使用的操作系统级别的同步IO。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</span></a></h2>`,47),o=[p];function c(t,i){return n(),a("div",null,o)}const B=s(e,[["render",c],["__file","IO 之 BIO 详解.html.vue"]]),y=JSON.parse(`{"path":"/posts/Java/IO-NIO-AIO/IO%20%E4%B9%8B%20BIO%20%E8%AF%A6%E8%A7%A3.html","title":"IO 之 BIO 详解","lang":"zh-CN","frontmatter":{"title":"IO 之 BIO 详解","subtitle":"Java，Java开发，Java 体系","date":"2024-03-11T14:36:26.000Z","category":["Java"],"tag":["Java","IO"],"order":8,"description":"BIO就是: blocking IO。最容易理解、最容易实现的IO工作方式，应用程序向操作系统请求网络IO操作，这时应用程序会一直等待；另一方面，操作系统收到请求后，也会等待，直到网络上有数据传到监听端口；操作系统在收集数据后，会把数据发送给应用程序；最后应用程序受到数据，并解除等待状态。 IO 之 BIO 详解 几个重要概念 传统的BIO通信方式简介...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E4%B9%8B%20BIO%20%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"IO 之 BIO 详解"}],["meta",{"property":"og:description","content":"BIO就是: blocking IO。最容易理解、最容易实现的IO工作方式，应用程序向操作系统请求网络IO操作，这时应用程序会一直等待；另一方面，操作系统收到请求后，也会等待，直到网络上有数据传到监听端口；操作系统在收集数据后，会把数据发送给应用程序；最后应用程序受到数据，并解除等待状态。 IO 之 BIO 详解 几个重要概念 传统的BIO通信方式简介..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java-io-bio-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-17T09:29:14.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"IO"}],["meta",{"property":"article:published_time","content":"2024-03-11T14:36:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-17T09:29:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IO 之 BIO 详解\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-io-bio-1.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-io-bio-2.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-io-bio-3.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-io-bio-4.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-io-bio-5.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-io-bio-6.png\\"],\\"datePublished\\":\\"2024-03-11T14:36:26.000Z\\",\\"dateModified\\":\\"2024-03-17T09:29:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 几个重要概念","slug":"几个重要概念","link":"#几个重要概念","children":[]},{"level":2,"title":"# 传统的BIO通信方式简介","slug":"传统的bio通信方式简介","link":"#传统的bio通信方式简介","children":[{"level":3,"title":"# 传统的BIO的问题","slug":"传统的bio的问题","link":"#传统的bio的问题","children":[]},{"level":3,"title":"# 多线程方式 - 伪异步方式","slug":"多线程方式-伪异步方式","link":"#多线程方式-伪异步方式","children":[]}]},{"level":2,"title":"# BIO通信方式深入分析","slug":"bio通信方式深入分析","link":"#bio通信方式深入分析","children":[{"level":3,"title":"# 模拟20个客户端并发请求，服务器端使用单线程:","slug":"模拟20个客户端并发请求-服务器端使用单线程","link":"#模拟20个客户端并发请求-服务器端使用单线程","children":[]},{"level":3,"title":"# 多线程来优化服务器端","slug":"多线程来优化服务器端","link":"#多线程来优化服务器端","children":[]},{"level":3,"title":"# 看看服务器端的执行效果","slug":"看看服务器端的执行效果","link":"#看看服务器端的执行效果","children":[]},{"level":3,"title":"# 问题根源","slug":"问题根源","link":"#问题根源","children":[]}]},{"level":2,"title":"# 参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1710139794000,"updatedTime":1710667754000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":10.65,"words":3194},"filePathRelative":"posts/Java/IO-NIO-AIO/IO 之 BIO 详解.md","localizedDate":"2024年3月11日","excerpt":"<blockquote>\\n<p>BIO就是: blocking IO。最容易理解、最容易实现的IO工作方式，应用程序向操作系统请求网络IO操作，这时应用程序会一直等待；另一方面，操作系统收到请求后，也会等待，直到网络上有数据传到监听端口；操作系统在收集数据后，会把数据发送给应用程序；最后应用程序受到数据，并解除等待状态。</p>\\n</blockquote>\\n<ul>\\n<li>IO 之 BIO 详解\\n<ul>\\n<li><a href=\\"#%E5%87%A0%E4%B8%AA%E9%87%8D%E8%A6%81%E6%A6%82%E5%BF%B5\\">几个重要概念</a></li>\\n<li>传统的BIO通信方式简介\\n<ul>\\n<li><a href=\\"#%E4%BC%A0%E7%BB%9F%E7%9A%84bio%E7%9A%84%E9%97%AE%E9%A2%98\\">传统的BIO的问题</a></li>\\n<li><a href=\\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%96%B9%E5%BC%8F---%E4%BC%AA%E5%BC%82%E6%AD%A5%E6%96%B9%E5%BC%8F\\">多线程方式 - 伪异步方式</a></li>\\n</ul>\\n</li>\\n<li>BIO通信方式深入分析\\n<ul>\\n<li><a href=\\"#%E6%A8%A1%E6%8B%9F20%E4%B8%AA%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BD%BF%E7%94%A8%E5%8D%95%E7%BA%BF%E7%A8%8B\\">模拟20个客户端并发请求，服务器端使用单线程: </a></li>\\n<li><a href=\\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9D%A5%E4%BC%98%E5%8C%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF\\">多线程来优化服务器端</a></li>\\n<li><a href=\\"#%E7%9C%8B%E7%9C%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%9A%84%E6%89%A7%E8%A1%8C%E6%95%88%E6%9E%9C\\">看看服务器端的执行效果</a></li>\\n<li><a href=\\"#%E9%97%AE%E9%A2%98%E6%A0%B9%E6%BA%90\\">问题根源</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{B as comp,y as data};
