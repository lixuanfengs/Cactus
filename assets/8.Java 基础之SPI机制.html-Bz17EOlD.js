import{_ as p,r as o,o as c,c as r,a as s,f as n,b as l,e}from"./app-BPuVcIvv.js";const t={},i=e('<h1 id="java-基础之spi机制" tabindex="-1"><a class="header-anchor" href="#java-基础之spi机制"><span>Java 基础之SPI机制</span></a></h1><blockquote><p>SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用。</p></blockquote><ul><li>Java常用机制 - SPI机制 <ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFspi%E6%9C%BA%E5%88%B6">什么是SPI机制</a></li><li><a href="#spi%E6%9C%BA%E5%88%B6%E7%9A%84%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B">SPI机制的简单示例</a></li><li>SPI机制的广泛应用 <ul><li>SPI机制 - JDBC DriverManager <ul><li><a href="#jdbc%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89">JDBC接口定义</a></li><li><a href="#mysql%E5%AE%9E%E7%8E%B0">mysql实现</a></li><li><a href="#postgresql%E5%AE%9E%E7%8E%B0">postgresql实现</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95">使用方法</a></li><li><a href="#%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0">源码实现</a></li></ul></li><li><a href="#spi%E6%9C%BA%E5%88%B6---common-logging">SPI机制 - Common-Logging</a></li><li><a href="#spi%E6%9C%BA%E5%88%B6---%E6%8F%92%E4%BB%B6%E4%BD%93%E7%B3%BB">SPI机制 - 插件体系</a></li><li><a href="#spi%E6%9C%BA%E5%88%B6---spring%E4%B8%ADspi%E6%9C%BA%E5%88%B6">SPI机制 - Spring中SPI机制</a></li></ul></li><li>SPI机制深入理解 <ul><li>SPI机制通常怎么使用 <ul><li><a href="#%E5%AE%9A%E4%B9%89%E6%A0%87%E5%87%86">定义标准</a></li><li><a href="#%E5%85%B7%E4%BD%93%E5%8E%82%E5%95%86%E6%88%96%E8%80%85%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E8%80%85%E5%AE%9E%E7%8E%B0">具体厂商或者框架开发者实现</a></li><li><a href="#%E7%A8%8B%E5%BA%8F%E7%8C%BF%E4%BD%BF%E7%94%A8">程序猿使用</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83">使用规范</a></li></ul></li><li><a href="#spi%E5%92%8Capi%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88">SPI和API的区别是什么</a></li><li><a href="#spi%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">SPI机制实现原理</a></li><li><a href="#spi%E6%9C%BA%E5%88%B6%E7%9A%84%E7%BC%BA%E9%99%B7">SPI机制的缺陷</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="什么是spi机制" tabindex="-1"><a class="header-anchor" href="#什么是spi机制"><span><a href="#%E4%BB%80%E4%B9%88%E6%98%AFspi%E6%9C%BA%E5%88%B6">#</a> 什么是SPI机制</span></a></h2><p>SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，比如java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL和PostgreSQL都有不同的实现提供给用户，而Java的SPI机制可以为某个接口寻找服务实现。Java中SPI机制主要思想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是 <strong>解耦</strong>。</p><p>SPI整体机制图如下：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-advanced-spi-8.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当服务的提供者提供了一种接口的实现之后，需要在classpath下的<code>META-INF/services/</code>目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。当其他的程序需要这个服务的时候，就可以通过查找这个jar包（一般都是以jar包做依赖）的<code>META-INF/services/</code>中的配置文件，配置文件中有接口的具体实现类名，可以根据这个类名进行加载实例化，就可以使用该服务了。JDK中查找服务的实现的工具类是：<code>java.util.ServiceLoader</code>。</p><h2 id="spi机制的简单示例" tabindex="-1"><a class="header-anchor" href="#spi机制的简单示例"><span><a href="#spi%E6%9C%BA%E5%88%B6%E7%9A%84%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B">#</a> SPI机制的简单示例</span></a></h2>',9),B={href:"https://zhuanlan.zhihu.com/p/28909673",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>我们现在需要使用一个内容搜索接口，搜索的实现可能是基于文件系统的搜索，也可能是基于数据库的搜索。</p><ul><li>先定义好接口</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> Search</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> searchDoc</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> keyword</span><span style="color:#ABB2BF;">);</span><span style="color:#E06C75;">   </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>文件搜索实现</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> FileSearch</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Search</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> searchDoc</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> keyword</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;文件搜索 &quot;</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;">keyword);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数据库搜索实现</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> DatabaseSearch</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Search</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> searchDoc</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> keyword</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;数据搜索 &quot;</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;">keyword);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>resources 接下来可以在resources下新建META-INF/services/目录，然后新建接口全限定名的文件：<code>com.cainiao.ys.spi.learn.Search</code>，里面加上我们需要用到的实现类</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">com.cainiao.ys.spi.learn.FileSearch</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>测试方法</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> TestCase</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        ServiceLoader</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Search</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">s</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ServiceLoader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Search</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        Iterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Search</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">iterator</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iterator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">           Search</span><span style="color:#E06C75;"> search</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;">  iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">           search</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">searchDoc</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello world&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到输出结果：文件搜索 hello world</p><p>如果在<code>com.cainiao.ys.spi.learn.Search</code>文件里写上两个实现类，那最后的输出结果就是两行了。</p><p>这就是因为<code>ServiceLoader.load(Search.class)</code>在加载某接口时，会去<code>META-INF/services</code>下找接口的全限定名文件，再根据里面的内容加载相应的实现类。</p><p>这就是spi的思想，接口的实现由provider实现，provider只用在提交的jar包里的<code>META-INF/services</code>下根据平台定义的接口新建文件，并添加进相应的实现类内容就好。</p><h2 id="spi机制的广泛应用" tabindex="-1"><a class="header-anchor" href="#spi机制的广泛应用"><span><a href="#spi%E6%9C%BA%E5%88%B6%E7%9A%84%E5%B9%BF%E6%B3%9B%E5%BA%94%E7%94%A8">#</a> SPI机制的广泛应用</span></a></h2><h3 id="spi机制-jdbc-drivermanager" tabindex="-1"><a class="header-anchor" href="#spi机制-jdbc-drivermanager"><span><a href="#spi%E6%9C%BA%E5%88%B6-jdbc-drivermanager">#</a> SPI机制 - JDBC DriverManager</span></a></h3><blockquote><p>在JDBC4.0之前，我们开发有连接数据库的时候，通常会用Class.forName(&quot;com.mysql.jdbc.Driver&quot;)这句先加载数据库相关的驱动，然后再进行获取连接等的操作。<strong>而JDBC4.0之后不需要用Class.forName(&quot;com.mysql.jdbc.Driver&quot;)来加载驱动，直接获取连接就可以了，现在这种方式就是使用了Java的SPI扩展机制来实现</strong>。</p></blockquote><h4 id="jdbc接口定义" tabindex="-1"><a class="header-anchor" href="#jdbc接口定义"><span><a href="#jdbc%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89">#</a> JDBC接口定义</span></a></h4><p>首先在java中定义了接口<code>java.sql.Driver</code>，并没有具体的实现，具体的实现都是由不同厂商来提供的。</p><h4 id="mysql实现" tabindex="-1"><a class="header-anchor" href="#mysql实现"><span><a href="#mysql%E5%AE%9E%E7%8E%B0">#</a> mysql实现</span></a></h4><p>在mysql的jar包<code>mysql-connector-java-6.0.6.jar</code>中，可以找到<code>META-INF/services</code>目录，该目录下会有一个名字为<code>java.sql.Driver</code>的文件，文件内容是<code>com.mysql.cj.jdbc.Driver</code>，这里面的内容就是针对Java中定义的接口的实现。</p><h4 id="postgresql实现" tabindex="-1"><a class="header-anchor" href="#postgresql实现"><span><a href="#postgresql%E5%AE%9E%E7%8E%B0">#</a> postgresql实现</span></a></h4><p>同样在postgresql的jar包<code>postgresql-42.0.0.jar</code>中，也可以找到同样的配置文件，文件内容是<code>org.postgresql.Driver</code>，这是postgresql对Java的<code>java.sql.Driver</code>的实现。</p><h4 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span><a href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95">#</a> 使用方法</span></a></h4><p>上面说了，现在使用SPI扩展来加载具体的驱动，我们在Java中写连接数据库的代码的时候，不需要再使用<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>来加载驱动了，而是直接使用如下代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> url </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;jdbc:xxxx://xxxx:xxxx/xxxx&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">Connection</span><span style="color:#E06C75;"> conn </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> DriverManager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getConnection</span><span style="color:#ABB2BF;">(url,username,password);</span></span>
<span class="line"><span style="color:#ABB2BF;">.....</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里并没有涉及到spi的使用，接着看下面的解析。</p><h4 id="源码实现" tabindex="-1"><a class="header-anchor" href="#源码实现"><span><a href="#%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0">#</a> 源码实现</span></a></h4><p>上面的使用方法，就是我们普通的连接数据库的代码，并没有涉及到SPI的东西，但是有一点我们可以确定的是，我们没有写有关具体驱动的硬编码<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>！</p><p>上面的代码可以直接获取数据库连接进行操作，但是跟SPI有啥关系呢？上面代码没有了加载驱动的代码，我们怎么去确定使用哪个数据库连接的驱动呢？这里就涉及到使用Java的SPI扩展机制来查找相关驱动的东西了，关于驱动的查找其实都在<code>DriverManager</code>中，<code>DriverManager</code>是Java中的实现，用来获取数据库连接，在<code>DriverManager</code>中有一个静态代码块如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    loadInitialDrivers</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    println</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;JDBC DriverManager initialized&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到是加载实例化驱动的，接着看loadInitialDrivers方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> loadInitialDrivers</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    String</span><span style="color:#E06C75;"> drivers</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        drivers </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> AccessController</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doPrivileged</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> PrivilegedAction</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;() {</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;jdbc.drivers&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> ex</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">        drivers </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    AccessController</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doPrivileged</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> PrivilegedAction</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Void</span><span style="color:#ABB2BF;">&gt;() {</span></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#E5C07B;"> Void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//使用SPI的ServiceLoader来加载接口的实现</span></span>
<span class="line"><span style="color:#E5C07B;">            ServiceLoader</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Driver</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">loadedDrivers</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ServiceLoader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Driver</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            Iterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Driver</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">driversIterator</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> loadedDrivers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iterator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">                while</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">driversIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    driversIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Throwable</span><span style="color:#E06C75;font-style:italic;"> t</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // Do nothing</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;DriverManager.initialize: jdbc.drivers = &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> drivers)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (drivers </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> drivers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    String</span><span style="color:#E06C75;">[] driversList </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> drivers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;:&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;number of Drivers:&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> driversList</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> aDriver </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> driversList) {</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            println</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;DriverManager.Initialize: loading &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> aDriver)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            Class</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forName</span><span style="color:#ABB2BF;">(aDriver, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">                    ClassLoader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSystemClassLoader</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> ex</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">            println</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;DriverManager.Initialize: load failed: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> ex)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码主要步骤是：</p><ul><li>从系统变量中获取有关驱动的定义。</li><li>使用SPI来获取驱动的实现。</li><li>遍历使用SPI获取到的具体实现，实例化各个实现类。</li><li>根据第一步获取到的驱动列表来实例化具体实现类。</li></ul><p>我们主要关注2,3步，这两步是SPI的用法，首先看第二步，使用SPI来获取驱动的实现，对应的代码是：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ServiceLoader</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Driver</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> loadedDrivers </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ServiceLoader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Driver</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里没有去<code>META-INF/services</code>目录下查找配置文件，也没有加载具体实现类，做的事情就是封装了我们的接口类型和类加载器，并初始化了一个迭代器。</p><p>接着看第三步，遍历使用SPI获取到的具体实现，实例化各个实现类，对应的代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//获取迭代器</span></span>
<span class="line"><span style="color:#E5C07B;">Iterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Driver</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> driversIterator </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> loadedDrivers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iterator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//遍历所有的驱动实现</span></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">driversIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    driversIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在遍历的时候，首先调用<code>driversIterator.hasNext()</code>方法，这里会搜索classpath下以及jar包中所有的<code>META-INF/services</code>目录下的<code>java.sql.Driver</code>文件，并找到文件中的实现类的名字，此时并没有实例化具体的实现类（ServiceLoader具体的源码实现在下面）。</p><p>然后是调用<code>driversIterator.next();</code>方法，此时就会根据驱动名字具体实例化各个实现类了。现在驱动就被找到并实例化了。</p><p>可以看下截图，我在测试项目中添加了两个jar包，<code>mysql-connector-java-6.0.6.jar</code>和<code>postgresql-42.0.0.0.jar</code>，跟踪到DriverManager中之后：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-advanced-spi-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到此时迭代器中有两个驱动，mysql和postgresql的都被加载了。</p><h3 id="spi机制-common-logging" tabindex="-1"><a class="header-anchor" href="#spi机制-common-logging"><span><a href="#spi%E6%9C%BA%E5%88%B6-common-logging">#</a> SPI机制 - Common-Logging</span></a></h3><blockquote><p>common-logging（也称Jakarta Commons Logging，缩写 JCL）是常用的日志库门面，具体<a href="">日志库相关可以看这篇</a>。我们看下它是怎么解耦的。</p></blockquote><p>首先，日志实例是通过LogFactory的getLog(String)方法创建的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#61AFEF;"> getLog</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Class</span><span style="color:#E06C75;"> clazz) throws LogConfigurationException {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> getFactory</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInstance</span><span style="color:#ABB2BF;">(clazz);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LogFatory是一个抽象类，它负责加载具体的日志实现，分析其Factory getFactory()方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> org</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">apache</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">commons</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">logging</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">LogFactory</span><span style="color:#61AFEF;"> getFactory</span><span style="color:#E06C75;">() throws LogConfigurationException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Identify the class loader we will be using</span></span>
<span class="line"><span style="color:#E5C07B;">    ClassLoader</span><span style="color:#E06C75;"> contextClassLoader </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getContextClassLoaderInternal</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (contextClassLoader </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // This is an odd enough situation to report about. This</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // output will be a nuisance on JDK1.1, as the system</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // classloader is null in that environment.</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">            logDiagnostic</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;Context classloader is null.&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Return any previously registered factory for this class loader</span></span>
<span class="line"><span style="color:#E5C07B;">    org</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">apache</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">commons</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">logging</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">LogFactory</span><span style="color:#E06C75;"> factory </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getCachedFactory</span><span style="color:#E06C75;">(contextClassLoader)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (factory </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> factory</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">        logDiagnostic</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#98C379;">                &quot;[LOOKUP] LogFactory implementation requested for the first time for context classloader &quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#61AFEF;">                        objectId</span><span style="color:#E06C75;">(contextClassLoader))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        logHierarchy</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;[LOOKUP] &quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> contextClassLoader)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Load properties file.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // If the properties file exists, then its contents are used as</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // &quot;attributes&quot; on the LogFactory implementation class. One particular</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // property may also control which LogFactory concrete subclass is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // used, but only if other discovery mechanisms fail..</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // As the properties file (if it exists) will be used one way or</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // another in the end we may as well look for it first.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // classpath根目录下寻找commons-logging.properties</span></span>
<span class="line"><span style="color:#E5C07B;">    Properties</span><span style="color:#E06C75;"> props </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getConfigurationFile</span><span style="color:#E06C75;">(contextClassLoader</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> FACTORY_PROPERTIES)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Determine whether we will be using the thread context class loader to</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // load logging classes or not by checking the loaded properties file (if any).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // classpath根目录下commons-logging.properties是否配置use_tccl</span></span>
<span class="line"><span style="color:#E5C07B;">    ClassLoader</span><span style="color:#E06C75;"> baseClassLoader </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> contextClassLoader</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (props </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> useTCCLStr </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> props</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getProperty</span><span style="color:#ABB2BF;">(TCCL_KEY);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (useTCCLStr </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // The Boolean.valueOf(useTCCLStr).booleanValue() formulation</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // is required for Java 1.2 compatibility.</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Boolean</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">valueOf</span><span style="color:#ABB2BF;">(useTCCLStr).</span><span style="color:#61AFEF;">booleanValue</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> false</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // Don&#39;t use current context classloader when locating any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // LogFactory or Log classes, just use the class that loaded</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // this abstract class. When this class is deployed in a shared</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // classpath of a container, it means webapps cannot deploy their</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // own logging implementations. It also means that it is up to the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // implementation whether to load library-specific config files</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // from the TCCL or not.</span></span>
<span class="line"><span style="color:#E06C75;">                baseClassLoader </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> thisClassLoader</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这里真正开始决定使用哪个factory</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 首先，尝试查找vm系统属性org.apache.commons.logging.LogFactory，其是否指定factory</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Determine which concrete LogFactory subclass to use.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // First, try a global system property</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">        logDiagnostic</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;[LOOKUP] Looking for system property [&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> FACTORY_PROPERTY </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                &quot;] to define the LogFactory subclass to use...&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> factoryClass </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getSystemProperty</span><span style="color:#E06C75;">(FACTORY_PROPERTY</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (factoryClass </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">                logDiagnostic</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;[LOOKUP] Creating an instance of LogFactory class &#39;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> factoryClass </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                        &quot;&#39; as specified by system property &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> FACTORY_PROPERTY)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">            factory </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> newFactory</span><span style="color:#E06C75;">(factoryClass</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> baseClassLoader</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> contextClassLoader)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">                logDiagnostic</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;[LOOKUP] No system property [&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> FACTORY_PROPERTY </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;] defined.&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">SecurityException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">            logDiagnostic</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;[LOOKUP] A security exception occurred while trying to create an&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">                    &quot; instance of the custom factory class&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;: [&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#61AFEF;"> trim</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                    &quot;]. Trying alternative implementations...&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ignore</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">RuntimeException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // This is not consistent with the behaviour when a bad LogFactory class is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // specified in a services file.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // One possible exception that can occur here is a ClassCastException when</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // the specified class wasn&#39;t castable to this LogFactory type.</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">            logDiagnostic</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;[LOOKUP] An exception occurred while trying to create an&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">                    &quot; instance of the custom factory class&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;: [&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#61AFEF;">                    trim</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                    &quot;] as specified by a system property.&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 第二，尝试使用java spi服务发现机制，载META-INF/services下寻找org.apache.commons.logging.LogFactory实现</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Second, try to find a service by using the JDK1.3 class</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // discovery mechanism, which involves putting a file with the name</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // of an interface class in the META-INF/services directory, where the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // contents of the file is a single line specifying a concrete class</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // that implements the desired interface.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (factory </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">            logDiagnostic</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;[LOOKUP] Looking for a resource file of name [&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> SERVICE_ID </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                    &quot;] to define the LogFactory subclass to use...&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // META-INF/services/org.apache.commons.logging.LogFactory, SERVICE_ID</span></span>
<span class="line"><span style="color:#C678DD;">            final</span><span style="color:#E5C07B;"> InputStream</span><span style="color:#E06C75;"> is </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getResourceAsStream</span><span style="color:#E06C75;">(contextClassLoader</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> SERVICE_ID)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (is </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // This code is needed by EBCDIC and other strange systems.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // It&#39;s a fix for bugs reported in xerces</span></span>
<span class="line"><span style="color:#E5C07B;">                BufferedReader</span><span style="color:#E06C75;"> rd</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                    rd </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BufferedReader</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> InputStreamReader</span><span style="color:#E06C75;">(is</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;UTF-8&quot;</span><span style="color:#E06C75;">))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">java.io.UnsupportedEncodingException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                    rd </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BufferedReader</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> InputStreamReader</span><span style="color:#E06C75;">(is))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">                String</span><span style="color:#E06C75;"> factoryClassName </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> rd</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readLine</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                rd</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (factoryClassName </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(factoryClassName)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                    if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">                        logDiagnostic</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;[LOOKUP]  Creating an instance of LogFactory class &quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#E06C75;">                                factoryClassName </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                                &quot; as specified by file &#39;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> SERVICE_ID </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                                &quot;&#39; which was present in the path of the context classloader.&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                    }</span></span>
<span class="line"><span style="color:#E06C75;">                    factory </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> newFactory</span><span style="color:#E06C75;">(factoryClassName</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> baseClassLoader</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> contextClassLoader)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E06C75;">            } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // is == null</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">                    logDiagnostic</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;[LOOKUP] No resource file with name &#39;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> SERVICE_ID </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;&#39; found.&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> ex</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // note: if the specified LogFactory class wasn&#39;t compatible with LogFactory</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // for some reason, a ClassCastException will be caught here, and attempts will</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // continue to find a compatible class.</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">                logDiagnostic</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#98C379;">                        &quot;[LOOKUP] A security exception occurred while trying to create an&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">                                &quot; instance of the custom factory class&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">                                &quot;: [&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#61AFEF;"> trim</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">ex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                                &quot;]. Trying alternative implementations...&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // ignore</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 第三，尝试从classpath根目录下的commons-logging.properties中查找org.apache.commons.logging.LogFactory属性指定的factory</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Third try looking into the properties file read earlier (if found)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (factory </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (props </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">                logDiagnostic</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#98C379;">                        &quot;[LOOKUP] Looking in properties file for entry with key &#39;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> FACTORY_PROPERTY </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                                &quot;&#39; to define the LogFactory subclass to use...&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            String</span><span style="color:#E06C75;"> factoryClass </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> props</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getProperty</span><span style="color:#ABB2BF;">(FACTORY_PROPERTY);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (factoryClass </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">                    logDiagnostic</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#98C379;">                            &quot;[LOOKUP] Properties file specifies LogFactory subclass &#39;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> factoryClass </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;&#39;&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E06C75;">                factory </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> newFactory</span><span style="color:#E06C75;">(factoryClass</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> baseClassLoader</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> contextClassLoader)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // TODO: think about whether we need to handle exceptions from newFactory</span></span>
<span class="line"><span style="color:#E06C75;">            } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">                    logDiagnostic</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;[LOOKUP] Properties file has no entry specifying LogFactory subclass.&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">                logDiagnostic</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;[LOOKUP] No properties file available to determine&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot; LogFactory subclass from..&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 最后，使用后备factory实现，org.apache.commons.logging.impl.LogFactoryImpl</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Fourth, try the fallback implementation class</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (factory </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isDiagnosticsEnabled</span><span style="color:#E06C75;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">            logDiagnostic</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#98C379;">                    &quot;[LOOKUP] Loading the default LogFactory implementation &#39;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> FACTORY_DEFAULT </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">                            &quot;&#39; via the same classloader that loaded this LogFactory&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">                            &quot; class (ie not looking in the context classloader).&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Note: unlike the above code which can try to load custom LogFactory</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // implementations via the TCCL, we don&#39;t try to load the default LogFactory</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // implementation via the context classloader because:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // * that can cause problems (see comments in newFactory method)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // * no-one should be customising the code of the default class</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Yes, we do give up the ability for the child to ship a newer</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // version of the LogFactoryImpl class and have it used dynamically</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // by an old LogFactory class in the parent, but that isn&#39;t</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // necessarily a good idea anyway.</span></span>
<span class="line"><span style="color:#E06C75;">        factory </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> newFactory</span><span style="color:#E06C75;">(FACTORY_DEFAULT</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> thisClassLoader</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> contextClassLoader)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (factory </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            * Always cache using context class loader.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            */</span></span>
<span class="line"><span style="color:#61AFEF;">        cacheFactory</span><span style="color:#E06C75;">(contextClassLoader</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> factory)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (props </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            Enumeration</span><span style="color:#E06C75;"> names </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> props</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">propertyNames</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">names</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasMoreElements</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                String</span><span style="color:#E06C75;"> name </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (String) </span><span style="color:#E5C07B;">names</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextElement</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                String</span><span style="color:#E06C75;"> value </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> props</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getProperty</span><span style="color:#ABB2BF;">(name);</span></span>
<span class="line"><span style="color:#E5C07B;">                factory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setAttribute</span><span style="color:#ABB2BF;">(name, value);</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> factory</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，抽象类LogFactory加载具体实现的步骤如下：</p><ul><li>从vm系统属性org.apache.commons.logging.LogFactory</li><li>使用SPI服务发现机制，发现org.apache.commons.logging.LogFactory的实现</li><li>查找classpath根目录commons-logging.properties的org.apache.commons.logging.LogFactory属性是否指定factory实现</li><li>使用默认factory实现，org.apache.commons.logging.impl.LogFactoryImpl</li></ul><blockquote><p>LogFactory的getLog()方法返回类型是org.apache.commons.logging.Log接口，提供了从trace到fatal方法。可以确定，如果日志实现提供者只要实现该接口，并且使用继承自org.apache.commons.logging.LogFactory的子类创建Log，必然可以构建一个松耦合的日志系统。</p></blockquote><h3 id="spi机制-插件体系" tabindex="-1"><a class="header-anchor" href="#spi机制-插件体系"><span><a href="#spi%E6%9C%BA%E5%88%B6-%E6%8F%92%E4%BB%B6%E4%BD%93%E7%B3%BB">#</a> SPI机制 - 插件体系</span></a></h3><blockquote><p>其实最具spi思想的应该属于插件开发，我们项目中也用到的这种思想，后面再说，这里具体说一下eclipse的插件思想。</p></blockquote><p>Eclipse使用OSGi作为插件系统的基础，动态添加新插件和停止现有插件，以动态的方式管理组件生命周期。</p><p>一般来说，插件的文件结构必须在指定目录下包含以下三个文件：</p><ul><li><code>META-INF/MANIFEST.MF</code>: 项目基本配置信息，版本、名称、启动器等</li><li><code>build.properties</code>: 项目的编译配置信息，包括，源代码路径、输出路径</li><li><code>plugin.xml</code>：插件的操作配置信息，包含弹出菜单及点击菜单后对应的操作执行类等</li></ul><p>当eclipse启动时，会遍历plugins文件夹中的目录，扫描每个插件的清单文件<code>MANIFEST.MF</code>，并建立一个内部模型来记录它所找到的每个插件的信息，就实现了动态添加新的插件。</p><p>这也意味着是eclipse制定了一系列的规则，像是文件结构、类型、参数等。插件开发者遵循这些规则去开发自己的插件，eclipse并不需要知道插件具体是怎样开发的，只需要在启动的时候根据配置文件解析、加载到系统里就好了，是spi思想的一种体现。</p><h3 id="spi机制-spring中spi机制" tabindex="-1"><a class="header-anchor" href="#spi机制-spring中spi机制"><span><a href="#spi%E6%9C%BA%E5%88%B6-spring%E4%B8%ADspi%E6%9C%BA%E5%88%B6">#</a> SPI机制 - Spring中SPI机制</span></a></h3><p>在springboot的自动装配过程中，最终会加载<code>META-INF/spring.factories</code>文件，而加载的过程是由<code>SpringFactoriesLoader</code>加载的。从CLASSPATH下的每个Jar包中搜寻所有<code>META-INF/spring.factories</code>配置文件，然后将解析properties文件，找到指定名称的配置后返回。需要注意的是，其实这里不仅仅是会去ClassPath路径下查找，会扫描所有路径下的Jar包，只不过这个文件只会在Classpath下的jar包中。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> FACTORIES_RESOURCE_LOCATION </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;META-INF/spring.factories&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// spring.factories文件的格式为：key=value1,value2,value3</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 从所有的jar包中找到META-INF/spring.factories文件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 然后从文件中解析出key=factoryClass类名称的所有value值</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> List</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">String</span><span style="color:#56B6C2;">&gt;</span><span style="color:#61AFEF;"> loadFactoryNames</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Class</span><span style="color:#56B6C2;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> factoryClass</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> ClassLoader</span><span style="color:#E06C75;"> classLoader) {</span></span>
<span class="line"><span style="color:#E5C07B;">    String</span><span style="color:#E06C75;"> factoryClassName </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> factoryClass</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 取得资源文件的URL</span></span>
<span class="line"><span style="color:#E5C07B;">    Enumeration</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> urls </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (classLoader </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> classLoader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getResources</span><span style="color:#ABB2BF;">(FACTORIES_RESOURCE_LOCATION)</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> ClassLoader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSystemResources</span><span style="color:#ABB2BF;">(FACTORIES_RESOURCE_LOCATION)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> result </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 遍历所有的URL</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">urls</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasMoreElements</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        URL</span><span style="color:#E06C75;"> url </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> urls</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextElement</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 根据资源文件URL解析properties文件，得到对应的一组@Configuration类</span></span>
<span class="line"><span style="color:#E5C07B;">        Properties</span><span style="color:#E06C75;"> properties </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> PropertiesLoaderUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">loadProperties</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> UrlResource</span><span style="color:#ABB2BF;">(url));</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> factoryClassNames </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> properties</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getProperty</span><span style="color:#ABB2BF;">(factoryClassName);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 组装数据，并返回</span></span>
<span class="line"><span style="color:#E5C07B;">        result</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addAll</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asList</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commaDelimitedListToStringArray</span><span style="color:#ABB2BF;">(factoryClassNames)));</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spi机制深入理解" tabindex="-1"><a class="header-anchor" href="#spi机制深入理解"><span><a href="#spi%E6%9C%BA%E5%88%B6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">#</a> SPI机制深入理解</span></a></h2><p>提示</p><p>接下来，我们深入理解下SPI相关内容</p><h3 id="spi机制通常怎么使用" tabindex="-1"><a class="header-anchor" href="#spi机制通常怎么使用"><span><a href="#spi%E6%9C%BA%E5%88%B6%E9%80%9A%E5%B8%B8%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8">#</a> SPI机制通常怎么使用</span></a></h3><p>看完上面的几个例子解析，应该都能知道大概的流程了：</p><ul><li>有关组织或者公司定义标准。</li><li>具体厂商或者框架开发者实现。</li><li>程序猿使用。</li></ul><h4 id="定义标准" tabindex="-1"><a class="header-anchor" href="#定义标准"><span><a href="#%E5%AE%9A%E4%B9%89%E6%A0%87%E5%87%86">#</a> 定义标准</span></a></h4><p>定义标准，就是定义接口。比如接口<code>java.sql.Driver</code></p><h4 id="具体厂商或者框架开发者实现" tabindex="-1"><a class="header-anchor" href="#具体厂商或者框架开发者实现"><span><a href="#%E5%85%B7%E4%BD%93%E5%8E%82%E5%95%86%E6%88%96%E8%80%85%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E8%80%85%E5%AE%9E%E7%8E%B0">#</a> 具体厂商或者框架开发者实现</span></a></h4><p>厂商或者框架开发者开发具体的实现：</p><p>在<code>META-INF/services</code>目录下定义一个名字为接口全限定名的文件，比如<code>java.sql.Driver</code>文件，文件内容是具体的实现名字，比如<code>me.cxis.sql.MyDriver</code>。</p><p>写具体的实现<code>me.cxis.sql.MyDriver</code>，都是对接口Driver的实现。</p><h4 id="程序猿使用" tabindex="-1"><a class="header-anchor" href="#程序猿使用"><span><a href="#%E7%A8%8B%E5%BA%8F%E7%8C%BF%E4%BD%BF%E7%94%A8">#</a> 程序猿使用</span></a></h4><p>我们会引用具体厂商的jar包来实现我们的功能：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ServiceLoader</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Driver</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> loadedDrivers </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ServiceLoader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Driver</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//获取迭代器</span></span>
<span class="line"><span style="color:#E5C07B;">Iterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Driver</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> driversIterator </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> loadedDrivers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iterator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//遍历</span></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">driversIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    driversIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //可以做具体的业务逻辑</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用规范" tabindex="-1"><a class="header-anchor" href="#使用规范"><span><a href="#%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83">#</a> 使用规范</span></a></h4><p>最后总结一下jdk spi需要遵循的规范</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-advanced-spi-2.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="spi和api的区别是什么" tabindex="-1"><a class="header-anchor" href="#spi和api的区别是什么"><span><a href="#spi%E5%92%8Capi%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88">#</a> SPI和API的区别是什么</span></a></h3><blockquote><p>这里实际包含两个问题，第一个SPI和API的区别？第二个什么时候用API，什么时候用SPI？</p></blockquote><blockquote><p>SPI - “接口”位于“调用方”所在的“包”中</p></blockquote><ul><li>概念上更依赖调用方。</li><li>组织上位于调用方所在的包中。</li><li>实现位于独立的包中。</li><li>常见的例子是：插件模式的插件。</li></ul><blockquote><p>API - “接口”位于“实现方”所在的“包”中</p></blockquote><ul><li>概念上更接近实现方。</li><li>组织上位于实现方所在的包中。</li><li>实现和接口在一个包中。</li></ul><p>参考：</p>`,90),d={href:"https://stackoverflow.com/questions/2954372/difference-between-spi-and-api?answertab=votes#tab-top",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.cnblogs.com/happyframework/archive/2013/09/17/3325560.html",target:"_blank",rel:"noopener noreferrer"},E=e(`<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-advanced-spi-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-advanced-spi-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="spi机制实现原理" tabindex="-1"><a class="header-anchor" href="#spi机制实现原理"><span><a href="#spi%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">#</a> SPI机制实现原理</span></a></h3><p>不妨看下JDK中<code>ServiceLoader&lt;S&gt;</code>方法的具体实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//ServiceLoader实现了Iterable接口，可以遍历所有的服务实现者</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ServiceLoader</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    implements</span><span style="color:#E5C07B;"> Iterable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //查找配置文件的目录</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> PREFIX </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;META-INF/services/&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //表示要被加载的服务的类或接口</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> service</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //这个ClassLoader用来定位，加载，实例化服务提供者</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> ClassLoader</span><span style="color:#E06C75;"> loader</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 访问控制上下文</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> AccessControlContext</span><span style="color:#E06C75;"> acc</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 缓存已经被实例化的服务提供者，按照实例化的顺序存储</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> LinkedHashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> providers </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> LinkedHashMap</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 迭代器</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> LazyIterator</span><span style="color:#E06C75;"> lookupIterator</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //重新加载，就相当于重新创建ServiceLoader了，用于新的服务提供者安装到正在运行的Java虚拟机中的情况。</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> reload</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //清空缓存中所有已实例化的服务提供者</span></span>
<span class="line"><span style="color:#E5C07B;">        providers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //新建一个迭代器，该迭代器会从头查找和实例化服务提供者</span></span>
<span class="line"><span style="color:#ABB2BF;">        lookupIterator </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> LazyIterator</span><span style="color:#ABB2BF;">(service, loader);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //私有构造器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //使用指定的类加载器和服务创建服务加载器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //如果没有指定类加载器，使用系统类加载器，就是应用类加载器。</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#61AFEF;"> ServiceLoader</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">svc</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ClassLoader</span><span style="color:#E06C75;font-style:italic;"> cl</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        service </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Objects</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">requireNonNull</span><span style="color:#ABB2BF;">(svc, </span><span style="color:#98C379;">&quot;Service interface cannot be null&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        loader </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (cl </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> ClassLoader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSystemClassLoader</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> cl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        acc </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSecurityManager</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> AccessController</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getContext</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        reload</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //解析失败处理的方法</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> fail</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">service</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> msg</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Throwable</span><span style="color:#E06C75;font-style:italic;"> cause</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        throws</span><span style="color:#E5C07B;"> ServiceConfigurationError</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ServiceConfigurationError</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">service</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> msg,</span></span>
<span class="line"><span style="color:#ABB2BF;">                                            cause);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> fail</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">service</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> msg</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        throws</span><span style="color:#E5C07B;"> ServiceConfigurationError</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ServiceConfigurationError</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">service</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> msg);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> fail</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">service</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">URL</span><span style="color:#E06C75;font-style:italic;"> u</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> line</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> msg</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        throws</span><span style="color:#E5C07B;"> ServiceConfigurationError</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#61AFEF;">        fail</span><span style="color:#ABB2BF;">(service, u </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;:&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> line </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> msg);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //解析服务提供者配置文件中的一行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //首先去掉注释校验，然后保存</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //返回下一行行号</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //重复的配置项和已经被实例化的配置项不会被保存</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> parseLine</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">service</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">URL</span><span style="color:#E06C75;font-style:italic;"> u</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">BufferedReader</span><span style="color:#E06C75;font-style:italic;"> r</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> lc</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">                          List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">names</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> ServiceConfigurationError</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //读取一行</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> ln</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> r</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readLine</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (ln </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //#号代表注释行</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> ci</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ln</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (ci </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) ln </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ln</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, ci);</span></span>
<span class="line"><span style="color:#ABB2BF;">        ln </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ln</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trim</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ln</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">length</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (n </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> ((</span><span style="color:#E5C07B;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39; &#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ln</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;</span><span style="color:#56B6C2;">\\t</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#61AFEF;">                fail</span><span style="color:#ABB2BF;">(service, u, lc, </span><span style="color:#98C379;">&quot;Illegal configuration-file syntax&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> cp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ln</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">codePointAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">Character</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isJavaIdentifierStart</span><span style="color:#ABB2BF;">(cp))</span></span>
<span class="line"><span style="color:#61AFEF;">                fail</span><span style="color:#ABB2BF;">(service, u, lc, </span><span style="color:#98C379;">&quot;Illegal provider-class name: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> ln);</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Character</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charCount</span><span style="color:#ABB2BF;">(cp); i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> n; i </span><span style="color:#56B6C2;">+=</span><span style="color:#E5C07B;"> Character</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charCount</span><span style="color:#ABB2BF;">(cp)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                cp </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ln</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">codePointAt</span><span style="color:#ABB2BF;">(i);</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">Character</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isJavaIdentifierPart</span><span style="color:#ABB2BF;">(cp) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> (cp </span><span style="color:#56B6C2;">!=</span><span style="color:#98C379;"> &#39;.&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#61AFEF;">                    fail</span><span style="color:#ABB2BF;">(service, u, lc, </span><span style="color:#98C379;">&quot;Illegal provider-class name: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> ln);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">providers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">containsKey</span><span style="color:#ABB2BF;">(ln) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">names</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">contains</span><span style="color:#ABB2BF;">(ln))</span></span>
<span class="line"><span style="color:#E5C07B;">                names</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(ln);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> lc </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //解析配置文件，解析指定的url配置文件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //使用parseLine方法进行解析，未被实例化的服务提供者会被保存到缓存中去</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Iterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">service</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">URL</span><span style="color:#E06C75;font-style:italic;"> u</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        throws</span><span style="color:#E5C07B;"> ServiceConfigurationError</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#E5C07B;">        InputStream</span><span style="color:#E06C75;"> in</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        BufferedReader</span><span style="color:#E06C75;"> r</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        ArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">names</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ArrayList</span><span style="color:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            in </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> u</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">openStream</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            r </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BufferedReader</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> InputStreamReader</span><span style="color:#ABB2BF;">(in, </span><span style="color:#98C379;">&quot;utf-8&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> lc</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> ((lc </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> parseLine</span><span style="color:#ABB2BF;">(service, u, r, lc, names)) </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> names</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iterator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //服务提供者查找的迭代器</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> LazyIterator</span></span>
<span class="line"><span style="color:#C678DD;">        implements</span><span style="color:#E5C07B;"> Iterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> service</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//服务提供者接口</span></span>
<span class="line"><span style="color:#E5C07B;">        ClassLoader</span><span style="color:#E06C75;"> loader</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//类加载器</span></span>
<span class="line"><span style="color:#E5C07B;">        Enumeration</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> configs </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//保存实现类的url</span></span>
<span class="line"><span style="color:#E5C07B;">        Iterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> pending </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//保存实现类的全名</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> nextName </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//迭代器中下一个实现类的全名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#61AFEF;"> LazyIterator</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">service</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ClassLoader</span><span style="color:#E06C75;font-style:italic;"> loader</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">service</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> service;</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">loader</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> loader;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> hasNextService</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (nextName </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (configs </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                    String</span><span style="color:#E06C75;"> fullName</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> PREFIX </span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;"> service</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                    if</span><span style="color:#ABB2BF;"> (loader </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                        configs </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ClassLoader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSystemResources</span><span style="color:#ABB2BF;">(fullName);</span></span>
<span class="line"><span style="color:#C678DD;">                    else</span></span>
<span class="line"><span style="color:#ABB2BF;">                        configs </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> loader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getResources</span><span style="color:#ABB2BF;">(fullName);</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> ((pending </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">pending</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">configs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasMoreElements</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">                pending </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> parse</span><span style="color:#ABB2BF;">(service, </span><span style="color:#E5C07B;">configs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextElement</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">            nextName </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> pending</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#E5C07B;"> S</span><span style="color:#61AFEF;"> nextService</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">hasNextService</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#C678DD;">                throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NoSuchElementException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            String</span><span style="color:#E06C75;"> cn</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> nextName;</span></span>
<span class="line"><span style="color:#ABB2BF;">            nextName </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                c </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Class</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forName</span><span style="color:#ABB2BF;">(cn, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, loader);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">service</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isAssignableFrom</span><span style="color:#ABB2BF;">(c)) {</span></span>
<span class="line"><span style="color:#61AFEF;">                fail</span><span style="color:#ABB2BF;">(service, </span><span style="color:#98C379;">&quot;Provider &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> cn  </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; not a subtype&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                S</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> service</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cast</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newInstance</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">                providers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(cn, p);</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#ABB2BF;"> p;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> hasNext</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (acc </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#61AFEF;"> hasNextService</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                PrivilegedAction</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Boolean</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">action</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> PrivilegedAction</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Boolean</span><span style="color:#ABB2BF;">&gt;() {</span></span>
<span class="line"><span style="color:#C678DD;">                    public</span><span style="color:#E5C07B;"> Boolean</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#61AFEF;"> hasNextService</span><span style="color:#ABB2BF;">(); }</span></span>
<span class="line"><span style="color:#ABB2BF;">                };</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E5C07B;"> AccessController</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doPrivileged</span><span style="color:#ABB2BF;">(action, acc);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#E5C07B;"> S</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (acc </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#61AFEF;"> nextService</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                PrivilegedAction</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">action</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> PrivilegedAction</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;() {</span></span>
<span class="line"><span style="color:#C678DD;">                    public</span><span style="color:#E5C07B;"> S</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#61AFEF;"> nextService</span><span style="color:#ABB2BF;">(); }</span></span>
<span class="line"><span style="color:#ABB2BF;">                };</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E5C07B;"> AccessController</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doPrivileged</span><span style="color:#ABB2BF;">(action, acc);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> remove</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> UnsupportedOperationException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //获取迭代器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //返回遍历服务提供者的迭代器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //以懒加载的方式加载可用的服务提供者</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //懒加载的实现是：解析配置文件和实例化服务提供者的工作由迭代器本身完成</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> Iterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> iterator</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Iterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //按照实例化顺序返回已经缓存的服务提供者实例</span></span>
<span class="line"><span style="color:#E5C07B;">            Iterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Entry</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;&gt; knownProviders</span></span>
<span class="line"><span style="color:#56B6C2;">                =</span><span style="color:#E5C07B;"> providers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">entrySet</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">iterator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> hasNext</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">knownProviders</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E5C07B;"> lookupIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#E5C07B;"> S</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">knownProviders</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#E5C07B;"> knownProviders</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E5C07B;"> lookupIterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> remove</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> UnsupportedOperationException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        };</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //为指定的服务使用指定的类加载器来创建一个ServiceLoader</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E5C07B;"> ServiceLoader</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> load</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">service</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">                                            ClassLoader</span><span style="color:#E06C75;font-style:italic;"> loader</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ServiceLoader</span><span style="color:#ABB2BF;">&lt;&gt;(service, loader);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //使用线程上下文的类加载器来创建ServiceLoader</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E5C07B;"> ServiceLoader</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> load</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">service</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        ClassLoader</span><span style="color:#E06C75;"> cl</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getContextClassLoader</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> ServiceLoader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(service, cl);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //使用扩展类加载器为指定的服务创建ServiceLoader</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //只能找到并加载已经安装到当前Java虚拟机中的服务提供者，应用程序类路径中的服务提供者将被忽略</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E5C07B;"> ServiceLoader</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> loadInstalled</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">service</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        ClassLoader</span><span style="color:#E06C75;"> cl</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ClassLoader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSystemClassLoader</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        ClassLoader</span><span style="color:#E06C75;"> prev</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (cl </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            prev </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> cl;</span></span>
<span class="line"><span style="color:#ABB2BF;">            cl </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> cl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getParent</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> ServiceLoader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(service, prev);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> toString</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#98C379;"> &quot;java.util.ServiceLoader[&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> service</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;]&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>首先</strong>，ServiceLoader实现了<code>Iterable</code>接口，所以它有迭代器的属性，这里主要都是实现了迭代器的<code>hasNext</code>和<code>next</code>方法。这里主要都是调用的<code>lookupIterator</code>的相应<code>hasNext</code>和<code>next</code>方法，<code>lookupIterator</code>是懒加载迭代器。</p><p><strong>其次</strong>，<code>LazyIterator</code>中的<code>hasNext</code>方法，静态变量PREFIX就是<code>”META-INF/services/”</code>目录，这也就是为什么需要在<code>classpath</code>下的<code>META-INF/services/</code>目录里创建一个以服务接口命名的文件。</p><p><strong>最后</strong>，通过反射方法<code>Class.forName()</code>加载类对象，并用<code>newInstance</code>方法将类实例化，并把实例化后的类缓存到<code>providers</code>对象中，(<code>LinkedHashMap&lt;String,S&gt;</code>类型）然后返回实例对象。</p><p>所以我们可以看到<code>ServiceLoader</code>不是实例化以后，就去读取配置文件中的具体实现，并进行实例化。而是等到使用迭代器去遍历的时候，才会加载对应的配置文件去解析，调用<code>hasNext</code>方法的时候会去加载配置文件进行解析，调用<code>next</code>方法的时候进行实例化并缓存。</p><p>所有的配置文件只会加载一次，服务提供者也只会被实例化一次，重新加载配置文件可使用<code>reload</code>方法。</p><h3 id="spi机制的缺陷" tabindex="-1"><a class="header-anchor" href="#spi机制的缺陷"><span><a href="#spi%E6%9C%BA%E5%88%B6%E7%9A%84%E7%BC%BA%E9%99%B7">#</a> SPI机制的缺陷</span></a></h3><p>通过上面的解析，可以发现，我们使用SPI机制的缺陷：</p><ul><li>不能按需加载，需要遍历所有的实现，并实例化，然后在循环中才能找到我们需要的实现。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费。</li><li>获取某个实现类的方式不够灵活，只能通过 Iterator 形式获取，不能根据某个参数来获取对应的实现类。</li><li>多个并发多线程使用 ServiceLoader 类的实例是不安全的。</li></ul><hr>`,14);function C(F,u){const a=o("ExternalLinkIcon");return c(),r("div",null,[i,s("blockquote",null,[s("p",null,[n("网上找了个例子："),s("a",B,[n("这里在新窗口打开"),l(a)])])]),y,s("ul",null,[s("li",null,[s("a",d,[n("difference-between-spi-and-api在新窗口打开"),l(a)])]),s("li",null,[s("a",v,[n("设计原则：小议 SPI 和 API在新窗口打开"),l(a)])])]),E])}const m=p(t,[["render",C],["__file","8.Java 基础之SPI机制.html.vue"]]),b=JSON.parse(`{"path":"/posts/Java/Foundation/8.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8BSPI%E6%9C%BA%E5%88%B6.html","title":"8.Java 基础之SPI机制","lang":"zh-CN","frontmatter":{"title":"8.Java 基础之SPI机制","subtitle":"Java，Java开发，Java 体系","date":"2024-03-05T18:06:22.000Z","category":["Java"],"tag":["Java"],"description":"Java 基础之SPI机制 SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用。 Java常用机制 - SPI机制 什么是SPI机制 SPI机制的简单示例 SPI机制的广泛应用 SPI机制 - JDBC DriverManager JDBC接口...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/Foundation/8.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8BSPI%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"8.Java 基础之SPI机制"}],["meta",{"property":"og:description","content":"Java 基础之SPI机制 SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用。 Java常用机制 - SPI机制 什么是SPI机制 SPI机制的简单示例 SPI机制的广泛应用 SPI机制 - JDBC DriverManager JDBC接口..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java-advanced-spi-8.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-06T07:41:39.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"8.Java 基础之SPI机制"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-03-05T18:06:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-06T07:41:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8.Java 基础之SPI机制\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-advanced-spi-8.jpg\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-advanced-spi-1.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-advanced-spi-2.jpg\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-advanced-spi-7.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-advanced-spi-6.png\\"],\\"datePublished\\":\\"2024-03-05T18:06:22.000Z\\",\\"dateModified\\":\\"2024-03-06T07:41:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 什么是SPI机制","slug":"什么是spi机制","link":"#什么是spi机制","children":[]},{"level":2,"title":"# SPI机制的简单示例","slug":"spi机制的简单示例","link":"#spi机制的简单示例","children":[]},{"level":2,"title":"# SPI机制的广泛应用","slug":"spi机制的广泛应用","link":"#spi机制的广泛应用","children":[{"level":3,"title":"# SPI机制 - JDBC DriverManager","slug":"spi机制-jdbc-drivermanager","link":"#spi机制-jdbc-drivermanager","children":[]},{"level":3,"title":"# SPI机制 - Common-Logging","slug":"spi机制-common-logging","link":"#spi机制-common-logging","children":[]},{"level":3,"title":"# SPI机制 - 插件体系","slug":"spi机制-插件体系","link":"#spi机制-插件体系","children":[]},{"level":3,"title":"# SPI机制 - Spring中SPI机制","slug":"spi机制-spring中spi机制","link":"#spi机制-spring中spi机制","children":[]}]},{"level":2,"title":"# SPI机制深入理解","slug":"spi机制深入理解","link":"#spi机制深入理解","children":[{"level":3,"title":"# SPI机制通常怎么使用","slug":"spi机制通常怎么使用","link":"#spi机制通常怎么使用","children":[]},{"level":3,"title":"# SPI和API的区别是什么","slug":"spi和api的区别是什么","link":"#spi和api的区别是什么","children":[]},{"level":3,"title":"# SPI机制实现原理","slug":"spi机制实现原理","link":"#spi机制实现原理","children":[]},{"level":3,"title":"# SPI机制的缺陷","slug":"spi机制的缺陷","link":"#spi机制的缺陷","children":[]}]}],"git":{"createdTime":1709710899000,"updatedTime":1709710899000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":21.3,"words":6389},"filePathRelative":"posts/Java/Foundation/8.Java 基础之SPI机制.md","localizedDate":"2024年3月5日","excerpt":"\\n<blockquote>\\n<p>SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用。</p>\\n</blockquote>\\n<ul>\\n<li>Java常用机制 - SPI机制\\n<ul>\\n<li><a href=\\"#%E4%BB%80%E4%B9%88%E6%98%AFspi%E6%9C%BA%E5%88%B6\\">什么是SPI机制</a></li>\\n<li><a href=\\"#spi%E6%9C%BA%E5%88%B6%E7%9A%84%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B\\">SPI机制的简单示例</a></li>\\n<li>SPI机制的广泛应用\\n<ul>\\n<li>SPI机制 - JDBC DriverManager\\n<ul>\\n<li><a href=\\"#jdbc%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89\\">JDBC接口定义</a></li>\\n<li><a href=\\"#mysql%E5%AE%9E%E7%8E%B0\\">mysql实现</a></li>\\n<li><a href=\\"#postgresql%E5%AE%9E%E7%8E%B0\\">postgresql实现</a></li>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\\">使用方法</a></li>\\n<li><a href=\\"#%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0\\">源码实现</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#spi%E6%9C%BA%E5%88%B6---common-logging\\">SPI机制 - Common-Logging</a></li>\\n<li><a href=\\"#spi%E6%9C%BA%E5%88%B6---%E6%8F%92%E4%BB%B6%E4%BD%93%E7%B3%BB\\">SPI机制 - 插件体系</a></li>\\n<li><a href=\\"#spi%E6%9C%BA%E5%88%B6---spring%E4%B8%ADspi%E6%9C%BA%E5%88%B6\\">SPI机制 - Spring中SPI机制</a></li>\\n</ul>\\n</li>\\n<li>SPI机制深入理解\\n<ul>\\n<li>SPI机制通常怎么使用\\n<ul>\\n<li><a href=\\"#%E5%AE%9A%E4%B9%89%E6%A0%87%E5%87%86\\">定义标准</a></li>\\n<li><a href=\\"#%E5%85%B7%E4%BD%93%E5%8E%82%E5%95%86%E6%88%96%E8%80%85%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E8%80%85%E5%AE%9E%E7%8E%B0\\">具体厂商或者框架开发者实现</a></li>\\n<li><a href=\\"#%E7%A8%8B%E5%BA%8F%E7%8C%BF%E4%BD%BF%E7%94%A8\\">程序猿使用</a></li>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83\\">使用规范</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#spi%E5%92%8Capi%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88\\">SPI和API的区别是什么</a></li>\\n<li><a href=\\"#spi%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\\">SPI机制实现原理</a></li>\\n<li><a href=\\"#spi%E6%9C%BA%E5%88%B6%E7%9A%84%E7%BC%BA%E9%99%B7\\">SPI机制的缺陷</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{m as comp,b as data};
