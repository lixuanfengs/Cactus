import{_ as s,e as r,o as p,c as o,b as a,g as e,f as n,h as i}from"./app-UW0BsEad.js";const t={},E=i(`<blockquote><p>垃圾收集主要是针对堆和方法区进行；程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。</p></blockquote><ul><li>GC 垃圾回收基础知识 <ul><li>判断一个对象是否可被回收 <ul><li><a href="#1-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%AE%97%E6%B3%95">1. 引用计数算法</a></li><li><a href="#2-%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95">2. 可达性分析算法</a></li><li><a href="#3-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E5%9B%9E%E6%94%B6">3. 方法区的回收</a></li><li><a href="#4-finalize">4. finalize()</a></li></ul></li><li>引用类型 <ul><li><a href="#1-%E5%BC%BA%E5%BC%95%E7%94%A8">1. 强引用</a></li><li><a href="#2-%E8%BD%AF%E5%BC%95%E7%94%A8">2. 软引用</a></li><li><a href="#3-%E5%BC%B1%E5%BC%95%E7%94%A8">3. 弱引用</a></li><li><a href="#4-%E8%99%9A%E5%BC%95%E7%94%A8">4. 虚引用</a></li></ul></li><li>垃圾回收算法 <ul><li><a href="#1-%E6%A0%87%E8%AE%B0---%E6%B8%85%E9%99%A4">1. 标记 - 清除</a></li><li><a href="#2-%E6%A0%87%E8%AE%B0---%E6%95%B4%E7%90%86">2. 标记 - 整理</a></li><li><a href="#3-%E5%A4%8D%E5%88%B6">3. 复制</a></li><li><a href="#4-%E5%88%86%E4%BB%A3%E6%94%B6%E9%9B%86">4. 分代收集</a></li></ul></li><li>垃圾收集器 <ul><li><a href="#1-serial-%E6%94%B6%E9%9B%86%E5%99%A8">1. Serial 收集器</a></li><li><a href="#2-parnew-%E6%94%B6%E9%9B%86%E5%99%A8">2. ParNew 收集器</a></li><li><a href="#3-parallel-scavenge-%E6%94%B6%E9%9B%86%E5%99%A8">3. Parallel Scavenge 收集器</a></li><li><a href="#4-serial-old-%E6%94%B6%E9%9B%86%E5%99%A8">4. Serial Old 收集器</a></li><li><a href="#5-parallel-old-%E6%94%B6%E9%9B%86%E5%99%A8">5. Parallel Old 收集器</a></li><li><a href="#6-cms-%E6%94%B6%E9%9B%86%E5%99%A8">6. CMS 收集器</a></li><li><a href="#7-g1-%E6%94%B6%E9%9B%86%E5%99%A8">7. G1 收集器</a></li></ul></li><li>内存分配与回收策略 <ul><li><a href="#minor-gcmajor-gcfull-gc">Minor GC、Major GC、Full GC</a></li><li>内存分配策略 <ul><li><a href="#1-%E5%AF%B9%E8%B1%A1%E4%BC%98%E5%85%88%E5%9C%A8-eden-%E5%88%86%E9%85%8D">1. 对象优先在 Eden 分配</a></li><li><a href="#2-%E5%A4%A7%E5%AF%B9%E8%B1%A1%E7%9B%B4%E6%8E%A5%E8%BF%9B%E5%85%A5%E8%80%81%E5%B9%B4%E4%BB%A3">2. 大对象直接进入老年代</a></li><li><a href="#3-%E9%95%BF%E6%9C%9F%E5%AD%98%E6%B4%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%E8%BF%9B%E5%85%A5%E8%80%81%E5%B9%B4%E4%BB%A3">3. 长期存活的对象进入老年代</a></li><li><a href="#4-%E5%8A%A8%E6%80%81%E5%AF%B9%E8%B1%A1%E5%B9%B4%E9%BE%84%E5%88%A4%E5%AE%9A">4. 动态对象年龄判定</a></li><li><a href="#5-%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E6%8B%85%E4%BF%9D">5. 空间分配担保</a></li></ul></li><li>Full GC 的触发条件 <ul><li><a href="#1-%E8%B0%83%E7%94%A8-systemgc">1. 调用 System.gc()</a></li><li><a href="#2-%E8%80%81%E5%B9%B4%E4%BB%A3%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3">2. 老年代空间不足</a></li><li><a href="#3-%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E6%8B%85%E4%BF%9D%E5%A4%B1%E8%B4%A5">3. 空间分配担保失败</a></li><li><a href="#4-jdk-17-%E5%8F%8A%E4%BB%A5%E5%89%8D%E7%9A%84%E6%B0%B8%E4%B9%85%E4%BB%A3%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3">4. JDK 1.7 及以前的永久代空间不足</a></li><li><a href="#5-concurrent-mode-failure">5. Concurrent Mode Failure</a></li></ul></li></ul></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul></li></ul><h2 id="判断一个对象是否可被回收" tabindex="-1"><a class="header-anchor" href="#判断一个对象是否可被回收"><span><a href="#%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E5%8F%AF%E8%A2%AB%E5%9B%9E%E6%94%B6">#</a> 判断一个对象是否可被回收</span></a></h2><h3 id="_1-引用计数算法" tabindex="-1"><a class="header-anchor" href="#_1-引用计数算法"><span><a href="#_1-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%AE%97%E6%B3%95">#</a> 1. 引用计数算法</span></a></h3><p>给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。</p><p>两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。</p><p>正因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ReferenceCountingGC</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;"> instance </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        ReferenceCountingGC</span><span style="color:#E06C75;"> objectA</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReferenceCountingGC</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        ReferenceCountingGC</span><span style="color:#E06C75;"> objectB</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReferenceCountingGC</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        objectA</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">instance</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> objectB;</span></span>
<span class="line"><span style="color:#E5C07B;">        objectB</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">instance</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> objectA;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-可达性分析算法" tabindex="-1"><a class="header-anchor" href="#_2-可达性分析算法"><span><a href="#_2-%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95">#</a> 2. 可达性分析算法</span></a></h3><p>通过 GC Roots 作为起始点进行搜索，能够到达到的对象都是存活的，不可达的对象可被回收。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/0635cbe8.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>Java 虚拟机使用该算法来判断对象是否可被回收，在 Java 中 GC Roots 一般包含以下内容:</p><ul><li>虚拟机栈中引用的对象</li><li>本地方法栈中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中的常量引用的对象</li></ul><h3 id="_3-方法区的回收" tabindex="-1"><a class="header-anchor" href="#_3-方法区的回收"><span><a href="#_3-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E5%9B%9E%E6%94%B6">#</a> 3. 方法区的回收</span></a></h3><p>因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，因此在方法区上进行回收性价比不高。</p><p>主要是对常量池的回收和对类的卸载。</p><p>在大量使用反射、动态代理、CGLib 等 ByteCode 框架、动态生成 JSP 以及 OSGi 这类频繁自定义 ClassLoader 的场景都需要虚拟机具备类卸载功能，以保证不会出现内存溢出。</p><p>类的卸载条件很多，需要满足以下三个条件，并且满足了也不一定会被卸载:</p><ul><li>该类所有的实例都已经被回收，也就是堆中不存在该类的任何实例。</li><li>加载该类的 ClassLoader 已经被回收。</li><li>该类对应的 Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。</li></ul><p>可以通过 -Xnoclassgc 参数来控制是否对类进行卸载。</p><h3 id="_4-finalize" tabindex="-1"><a class="header-anchor" href="#_4-finalize"><span><a href="#_4-finalize">#</a> 4. finalize()</span></a></h3><p>finalize() 类似 C++ 的析构函数，用来做关闭外部资源等工作。但是 try-finally 等方式可以做的更好，并且该方法运行代价高昂，不确定性大，无法保证各个对象的调用顺序，因此最好不要使用。</p><p>当一个对象可被回收时，如果需要执行该对象的 finalize() 方法，那么就有可能通过在该方法中让对象重新被引用，从而实现自救。自救只能进行一次，如果回收的对象之前调用了 finalize() 方法自救，后面回收时不会调用 finalize() 方法。</p><h2 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型"><span><a href="#%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B">#</a> 引用类型</span></a></h2><p>无论是通过引用计算算法判断对象的引用数量，还是通过可达性分析算法判断对象是否可达，判定对象是否可被回收都与引用有关。</p><p>Java 具有四种强度不同的引用类型。</p><h3 id="_1-强引用" tabindex="-1"><a class="header-anchor" href="#_1-强引用"><span><a href="#_1-%E5%BC%BA%E5%BC%95%E7%94%A8">#</a> 1. 强引用</span></a></h3><p>被强引用关联的对象不会被回收。</p><p>使用 new 一个新对象的方式来创建强引用。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> obj </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Object</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-软引用" tabindex="-1"><a class="header-anchor" href="#_2-软引用"><span><a href="#_2-%E8%BD%AF%E5%BC%95%E7%94%A8">#</a> 2. 软引用</span></a></h3><p>被软引用关联的对象只有在内存不够的情况下才会被回收。</p><p>使用 SoftReference 类来创建软引用。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> obj </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Object</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">SoftReference</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> sf </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> SoftReference</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">(obj)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">obj </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">  // 使对象只被软引用关联</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-弱引用" tabindex="-1"><a class="header-anchor" href="#_3-弱引用"><span><a href="#_3-%E5%BC%B1%E5%BC%95%E7%94%A8">#</a> 3. 弱引用</span></a></h3><p>被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。</p><p>使用 WeakReference 类来实现弱引用。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> obj </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Object</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">WeakReference</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> wf </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> WeakReference</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">(obj)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">obj </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-虚引用" tabindex="-1"><a class="header-anchor" href="#_4-虚引用"><span><a href="#_4-%E8%99%9A%E5%BC%95%E7%94%A8">#</a> 4. 虚引用</span></a></h3><p>又称为幽灵引用或者幻影引用。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象。</p><p>为一个对象设置虚引用关联的唯一目的就是能在这个对象被回收时收到一个系统通知。</p><p>使用 PhantomReference 来实现虚引用。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> obj </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Object</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">PhantomReference</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> pf </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> PhantomReference</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">(obj)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">obj </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#垃圾回收算法"><span><a href="#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95">#</a> 垃圾回收算法</span></a></h2><h3 id="_1-标记-清除" tabindex="-1"><a class="header-anchor" href="#_1-标记-清除"><span><a href="#_1-%E6%A0%87%E8%AE%B0-%E6%B8%85%E9%99%A4">#</a> 1. 标记 - 清除</span></a></h3><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/a4248c4b-6c1d-4fb8-a557-86da92d3a294.jpg" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>将存活的对象进行标记，然后清理掉未被标记的对象。</p><p>不足:</p><ul><li>标记和清除过程效率都不高；</li><li>会产生大量不连续的内存碎片，导致无法给大对象分配内存。</li></ul><h3 id="_2-标记-整理" tabindex="-1"><a class="header-anchor" href="#_2-标记-整理"><span><a href="#_2-%E6%A0%87%E8%AE%B0-%E6%95%B4%E7%90%86">#</a> 2. 标记 - 整理</span></a></h3><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/902b83ab-8054-4bd2-898f-9a4a0fe52830.jpg" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><h3 id="_3-复制" tabindex="-1"><a class="header-anchor" href="#_3-复制"><span><a href="#_3-%E5%A4%8D%E5%88%B6">#</a> 3. 复制</span></a></h3><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/e6b733ad-606d-4028-b3e8-83c3a73a3797.jpg" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。</p><p>主要不足是只使用了内存的一半。</p><p>现在的商业虚拟机都采用这种收集算法来回收新生代，但是并不是将新生代划分为大小相等的两块，而是分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 空间和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象一次性复制到另一块 Survivor 空间上，最后清理 Eden 和使用过的那一块 Survivor。</p><p>HotSpot 虚拟机的 Eden 和 Survivor 的大小比例默认为 8:1，保证了内存的利用率达到 90%。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 空间就不够用了，此时需要依赖于老年代进行分配担保，也就是借用老年代的空间存储放不下的对象。</p><h3 id="_4-分代收集" tabindex="-1"><a class="header-anchor" href="#_4-分代收集"><span><a href="#_4-%E5%88%86%E4%BB%A3%E6%94%B6%E9%9B%86">#</a> 4. 分代收集</span></a></h3><p>现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p><p>一般将堆分为新生代和老年代。</p><ul><li>新生代使用: 复制算法</li><li>老年代使用: 标记 - 清除 或者 标记 - 整理 算法</li></ul><h2 id="垃圾收集器" tabindex="-1"><a class="header-anchor" href="#垃圾收集器"><span><a href="#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 垃圾收集器</span></a></h2><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/c625baa0-dde6-449e-93df-c3a67f2f430f.jpg" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。</p><ul><li>单线程与多线程: 单线程指的是垃圾收集器只使用一个线程进行收集，而多线程使用多个线程；</li><li>串行与并行: 串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并形指的是垃圾收集器和用户程序同时执行。除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。</li></ul><h3 id="_1-serial-收集器" tabindex="-1"><a class="header-anchor" href="#_1-serial-收集器"><span><a href="#_1-serial-%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 1. Serial 收集器</span></a></h3><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/22fda4ae-4dd5-489d-ab10-9ebfdad22ae0.jpg" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>Serial 翻译为串行，也就是说它以串行的方式执行。</p><p>它是单线程的收集器，只会使用一个线程进行垃圾收集工作。</p><p>它的优点是简单高效，对于单个 CPU 环境来说，由于没有线程交互的开销，因此拥有最高的单线程收集效率。</p><p>它是 Client 模式下的默认新生代收集器，因为在用户的桌面应用场景下，分配给虚拟机管理的内存一般来说不会很大。Serial 收集器收集几十兆甚至一两百兆的新生代停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿是可以接受的。</p><h3 id="_2-parnew-收集器" tabindex="-1"><a class="header-anchor" href="#_2-parnew-收集器"><span><a href="#_2-parnew-%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 2. ParNew 收集器</span></a></h3><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/81538cd5-1bcf-4e31-86e5-e198df1e013b.jpg" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>它是 Serial 收集器的多线程版本。</p><p>是 Server 模式下的虚拟机首选新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合工作。</p><p>默认开启的线程数量与 CPU 数量相同，可以使用 -XX:ParallelGCThreads 参数来设置线程数。</p><h3 id="_3-parallel-scavenge-收集器" tabindex="-1"><a class="header-anchor" href="#_3-parallel-scavenge-收集器"><span><a href="#_3-parallel-scavenge-%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 3. Parallel Scavenge 收集器</span></a></h3><p>与 ParNew 一样是多线程收集器。</p><p>其它收集器关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，它被称为“吞吐量优先”收集器。这里的吞吐量指 CPU 用于运行用户代码的时间占总时间的比值。</p><p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</p><p>缩短停顿时间是以牺牲吞吐量和新生代空间来换取的: 新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。</p><p>可以通过一个开关参数打开 GC 自适应的调节策略(GC Ergonomics)，就不需要手动指定新生代的大小(-Xmn)、Eden 和 Survivor 区的比例、晋升老年代对象年龄等细节参数了。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。</p><h3 id="_4-serial-old-收集器" tabindex="-1"><a class="header-anchor" href="#_4-serial-old-收集器"><span><a href="#_4-serial-old-%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 4. Serial Old 收集器</span></a></h3><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/08f32fd3-f736-4a67-81ca-295b2a7972f2.jpg" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>是 Serial 收集器的老年代版本，也是给 Client 模式下的虚拟机使用。如果用在 Server 模式下，它有两大用途:</p><ul><li>在 JDK 1.5 以及之前版本(Parallel Old 诞生以前)中与 Parallel Scavenge 收集器搭配使用。</li><li>作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。</li></ul><h3 id="_5-parallel-old-收集器" tabindex="-1"><a class="header-anchor" href="#_5-parallel-old-收集器"><span><a href="#_5-parallel-old-%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 5. Parallel Old 收集器</span></a></h3><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/278fe431-af88-4a95-a895-9c3b80117de3.jpg" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>是 Parallel Scavenge 收集器的老年代版本。</p><p>在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器。</p><h3 id="_6-cms-收集器" tabindex="-1"><a class="header-anchor" href="#_6-cms-收集器"><span><a href="#_6-cms-%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 6. CMS 收集器</span></a></h3><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/62e77997-6957-4b68-8d12-bfd609bb2c68.jpg" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>CMS(Concurrent Mark Sweep)，Mark Sweep 指的是标记 - 清除算法。</p><p>分为以下四个流程:</p><ul><li>初始标记: 仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。</li><li>并发标记: 进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。</li><li>重新标记: 为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。</li><li>并发清除: 不需要停顿。</li></ul><p>在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。</p><p>具有以下缺点:</p><ul><li>吞吐量低: 低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。</li><li>无法处理浮动垃圾，可能出现 Concurrent Mode Failure。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS。</li><li>标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。</li></ul><h3 id="_7-g1-收集器" tabindex="-1"><a class="header-anchor" href="#_7-g1-收集器"><span><a href="#_7-g1-%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 7. G1 收集器</span></a></h3><p>G1(Garbage-First)，它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。</p><p>堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/4cf711a8-7ab2-4152-b85c-d5c226733807.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>G1 把堆划分成多个大小相等的独立区域(Region)，新生代和老年代不再物理隔离。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/9bbddeeb-e939-41f0-8e8e-2b1a0aa7e0a7.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间(这两个值是通过过去回收的经验获得)，并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。</p><p>每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/f99ee771-c56f-47fb-9148-c0036695b5fe.jpg" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤:</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记: 为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。</li><li>筛选回收: 首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。</li></ul><p>具备如下特点:</p><ul><li>空间整合: 整体来看是基于“标记 - 整理”算法实现的收集器，从局部(两个 Region 之间)上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</li><li>可预测的停顿: 能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。</li></ul>`,112),c={href:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html",target:"_blank",rel:"noopener noreferrer"},B=i('<h2 id="内存分配与回收策略" tabindex="-1"><a class="header-anchor" href="#内存分配与回收策略"><span><a href="#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5">#</a> 内存分配与回收策略</span></a></h2><h3 id="minor-gc、major-gc、full-gc" tabindex="-1"><a class="header-anchor" href="#minor-gc、major-gc、full-gc"><span><a href="#minor-gc%E3%80%81major-gc%E3%80%81full-gc">#</a> Minor GC、Major GC、Full GC</span></a></h3><p>JVM 在进行 GC 时，并非每次都对堆内存（新生代、老年代；方法区）区域一起回收的，大部分时候回收的都是指新生代。</p><p>针对 HotSpot VM 的实现，它里面的 GC 按照回收区域又分为两大类：部分收集（Partial GC），整堆收集（Full GC）</p><ul><li>部分收集：不是完整收集整个 Java 堆的垃圾收集。其中又分为： <ul><li>新生代收集（Minor GC/Young GC）：只是新生代的垃圾收集</li><li>老年代收集（Major GC/Old GC）：只是老年代的垃圾收集 <ul><li>目前，只有 CMS GC 会有单独收集老年代的行为</li><li>很多时候 Major GC 会和 Full GC 混合使用，需要具体分辨是老年代回收还是整堆回收</li></ul></li><li>混合收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集 <ul><li>目前只有 G1 GC 会有这种行为</li></ul></li></ul></li><li>整堆收集（Full GC）：收集整个 Java 堆和方法区的垃圾</li></ul><h3 id="内存分配策略" tabindex="-1"><a class="header-anchor" href="#内存分配策略"><span><a href="#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5">#</a> 内存分配策略</span></a></h3><h4 id="_1-对象优先在-eden-分配" tabindex="-1"><a class="header-anchor" href="#_1-对象优先在-eden-分配"><span><a href="#_1-%E5%AF%B9%E8%B1%A1%E4%BC%98%E5%85%88%E5%9C%A8-eden-%E5%88%86%E9%85%8D">#</a> 1. 对象优先在 Eden 分配</span></a></h4><p>大多数情况下，对象在新生代 Eden 区分配，当 Eden 区空间不够时，发起 Minor GC。</p><h4 id="_2-大对象直接进入老年代" tabindex="-1"><a class="header-anchor" href="#_2-大对象直接进入老年代"><span><a href="#_2-%E5%A4%A7%E5%AF%B9%E8%B1%A1%E7%9B%B4%E6%8E%A5%E8%BF%9B%E5%85%A5%E8%80%81%E5%B9%B4%E4%BB%A3">#</a> 2. 大对象直接进入老年代</span></a></h4><p>大对象是指需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组。</p><p>经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。</p><p>-XX:PretenureSizeThreshold，大于此值的对象直接在老年代分配，避免在 Eden 区和 Survivor 区之间的大量内存复制。</p><h4 id="_3-长期存活的对象进入老年代" tabindex="-1"><a class="header-anchor" href="#_3-长期存活的对象进入老年代"><span><a href="#_3-%E9%95%BF%E6%9C%9F%E5%AD%98%E6%B4%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%E8%BF%9B%E5%85%A5%E8%80%81%E5%B9%B4%E4%BB%A3">#</a> 3. 长期存活的对象进入老年代</span></a></h4><p>为对象定义年龄计数器，对象在 Eden 出生并经过 Minor GC 依然存活，将移动到 Survivor 中，年龄就增加 1 岁，增加到一定年龄则移动到老年代中。</p><p>-XX:MaxTenuringThreshold 用来定义年龄的阈值。</p><h4 id="_4-动态对象年龄判定" tabindex="-1"><a class="header-anchor" href="#_4-动态对象年龄判定"><span><a href="#_4-%E5%8A%A8%E6%80%81%E5%AF%B9%E8%B1%A1%E5%B9%B4%E9%BE%84%E5%88%A4%E5%AE%9A">#</a> 4. 动态对象年龄判定</span></a></h4><p>虚拟机并不是永远地要求对象的年龄必须达到 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 MaxTenuringThreshold 中要求的年龄。</p><h4 id="_5-空间分配担保" tabindex="-1"><a class="header-anchor" href="#_5-空间分配担保"><span><a href="#_5-%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E6%8B%85%E4%BF%9D">#</a> 5. 空间分配担保</span></a></h4><p>在发生 Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果条件成立的话，那么 Minor GC 可以确认是安全的。</p><p>如果不成立的话虚拟机会查看 HandlePromotionFailure 设置值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC；如果小于，或者 HandlePromotionFailure 设置不允许冒险，那么就要进行一次 Full GC。</p><h3 id="full-gc-的触发条件" tabindex="-1"><a class="header-anchor" href="#full-gc-的触发条件"><span><a href="#full-gc-%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6">#</a> Full GC 的触发条件</span></a></h3><p>对于 Minor GC，其触发条件非常简单，当 Eden 空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件:</p><h4 id="_1-调用-system-gc" tabindex="-1"><a class="header-anchor" href="#_1-调用-system-gc"><span><a href="#_1-%E8%B0%83%E7%94%A8-system-gc">#</a> 1. 调用 System.gc()</span></a></h4><p>只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。</p><h4 id="_2-老年代空间不足" tabindex="-1"><a class="header-anchor" href="#_2-老年代空间不足"><span><a href="#_2-%E8%80%81%E5%B9%B4%E4%BB%A3%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3">#</a> 2. 老年代空间不足</span></a></h4><p>老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等。</p><p>为了避免以上原因引起的 Full GC，应当尽量不要创建过大的对象以及数组。除此之外，可以通过 -Xmn 虚拟机参数调大新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。还可以通过 -XX:MaxTenuringThreshold 调大对象进入老年代的年龄，让对象在新生代多存活一段时间。</p><h4 id="_3-空间分配担保失败" tabindex="-1"><a class="header-anchor" href="#_3-空间分配担保失败"><span><a href="#_3-%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E6%8B%85%E4%BF%9D%E5%A4%B1%E8%B4%A5">#</a> 3. 空间分配担保失败</span></a></h4><p>使用复制算法的 Minor GC 需要老年代的内存空间作担保，如果担保失败会执行一次 Full GC。具体内容请参考上面的第五小节。</p><h4 id="_4-jdk-1-7-及以前的永久代空间不足" tabindex="-1"><a class="header-anchor" href="#_4-jdk-1-7-及以前的永久代空间不足"><span><a href="#_4-jdk-1-7-%E5%8F%8A%E4%BB%A5%E5%89%8D%E7%9A%84%E6%B0%B8%E4%B9%85%E4%BB%A3%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3">#</a> 4. JDK 1.7 及以前的永久代空间不足</span></a></h4><p>在 JDK 1.7 及以前，HotSpot 虚拟机中的方法区是用永久代实现的，永久代中存放的为一些 Class 的信息、常量、静态变量等数据。</p><p>当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么虚拟机会抛出 java.lang.OutOfMemoryError。</p><p>为避免以上原因引起的 Full GC，可采用的方法为增大永久代空间或转为使用 CMS GC。</p><h4 id="_5-concurrent-mode-failure" tabindex="-1"><a class="header-anchor" href="#_5-concurrent-mode-failure"><span><a href="#_5-concurrent-mode-failure">#</a> 5. Concurrent Mode Failure</span></a></h4><p>执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足(可能是 GC 过程中浮动垃圾过多导致暂时性的空间不足)，便会报 Concurrent Mode Failure 错误，并触发 Full GC。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span><a href="#%E5%8F%82%E8%80%83">#</a> 参考</span></a></h2>',36),d={href:"https://mp.weixin.qq.com/s/olNXcRAT3PTK-hV_ehtmtw",target:"_blank",rel:"noopener noreferrer"};function h(g,f){const l=r("ExternalLinkIcon");return p(),o("div",null,[E,a("p",null,[e("更详细内容请参考: "),a("a",c,[e("Getting Started with the G1 Garbage Collector在新窗口打开"),n(l)])]),B,a("ul",null,[a("li",null,[a("a",d,[e("GC算法 垃圾收集器"),n(l)])])])])}const A=s(t,[["render",h],["__file","GC 垃圾回收基础知识.html.vue"]]),b=JSON.parse(`{"path":"/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html","title":"GC 垃圾回收基础知识","lang":"zh-CN","frontmatter":{"title":"GC 垃圾回收基础知识","subtitle":"Java，Java开发，Java 体系","date":"2024-03-17T17:08:41.000Z","category":["Java"],"tag":["Java","JVM"],"order":8,"description":"垃圾收集主要是针对堆和方法区进行；程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。 GC 垃圾回收基础知识 判断一个对象是否可被回收 1. 引用计数算法 2. 可达性分析算法 3. 方法区的回收 4. finalize() 引用类型 1. 强引用 2. 软引用...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"GC 垃圾回收基础知识"}],["meta",{"property":"og:description","content":"垃圾收集主要是针对堆和方法区进行；程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。 GC 垃圾回收基础知识 判断一个对象是否可被回收 1. 引用计数算法 2. 可达性分析算法 3. 方法区的回收 4. finalize() 引用类型 1. 强引用 2. 软引用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/0635cbe8.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T05:15:06.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2024-03-17T17:08:41.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T05:15:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GC 垃圾回收基础知识\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/0635cbe8.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/a4248c4b-6c1d-4fb8-a557-86da92d3a294.jpg\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/902b83ab-8054-4bd2-898f-9a4a0fe52830.jpg\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/e6b733ad-606d-4028-b3e8-83c3a73a3797.jpg\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/c625baa0-dde6-449e-93df-c3a67f2f430f.jpg\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/22fda4ae-4dd5-489d-ab10-9ebfdad22ae0.jpg\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/81538cd5-1bcf-4e31-86e5-e198df1e013b.jpg\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/08f32fd3-f736-4a67-81ca-295b2a7972f2.jpg\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/278fe431-af88-4a95-a895-9c3b80117de3.jpg\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/62e77997-6957-4b68-8d12-bfd609bb2c68.jpg\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/4cf711a8-7ab2-4152-b85c-d5c226733807.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/9bbddeeb-e939-41f0-8e8e-2b1a0aa7e0a7.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/f99ee771-c56f-47fb-9148-c0036695b5fe.jpg\\"],\\"datePublished\\":\\"2024-03-17T17:08:41.000Z\\",\\"dateModified\\":\\"2024-03-22T05:15:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 判断一个对象是否可被回收","slug":"判断一个对象是否可被回收","link":"#判断一个对象是否可被回收","children":[{"level":3,"title":"# 1. 引用计数算法","slug":"_1-引用计数算法","link":"#_1-引用计数算法","children":[]},{"level":3,"title":"# 2. 可达性分析算法","slug":"_2-可达性分析算法","link":"#_2-可达性分析算法","children":[]},{"level":3,"title":"# 3. 方法区的回收","slug":"_3-方法区的回收","link":"#_3-方法区的回收","children":[]},{"level":3,"title":"# 4. finalize()","slug":"_4-finalize","link":"#_4-finalize","children":[]}]},{"level":2,"title":"# 引用类型","slug":"引用类型","link":"#引用类型","children":[{"level":3,"title":"# 1. 强引用","slug":"_1-强引用","link":"#_1-强引用","children":[]},{"level":3,"title":"# 2. 软引用","slug":"_2-软引用","link":"#_2-软引用","children":[]},{"level":3,"title":"# 3. 弱引用","slug":"_3-弱引用","link":"#_3-弱引用","children":[]},{"level":3,"title":"# 4. 虚引用","slug":"_4-虚引用","link":"#_4-虚引用","children":[]}]},{"level":2,"title":"# 垃圾回收算法","slug":"垃圾回收算法","link":"#垃圾回收算法","children":[{"level":3,"title":"# 1. 标记 - 清除","slug":"_1-标记-清除","link":"#_1-标记-清除","children":[]},{"level":3,"title":"# 2. 标记 - 整理","slug":"_2-标记-整理","link":"#_2-标记-整理","children":[]},{"level":3,"title":"# 3. 复制","slug":"_3-复制","link":"#_3-复制","children":[]},{"level":3,"title":"# 4. 分代收集","slug":"_4-分代收集","link":"#_4-分代收集","children":[]}]},{"level":2,"title":"# 垃圾收集器","slug":"垃圾收集器","link":"#垃圾收集器","children":[{"level":3,"title":"# 1. Serial 收集器","slug":"_1-serial-收集器","link":"#_1-serial-收集器","children":[]},{"level":3,"title":"# 2. ParNew 收集器","slug":"_2-parnew-收集器","link":"#_2-parnew-收集器","children":[]},{"level":3,"title":"# 3. Parallel Scavenge 收集器","slug":"_3-parallel-scavenge-收集器","link":"#_3-parallel-scavenge-收集器","children":[]},{"level":3,"title":"# 4. Serial Old 收集器","slug":"_4-serial-old-收集器","link":"#_4-serial-old-收集器","children":[]},{"level":3,"title":"# 5. Parallel Old 收集器","slug":"_5-parallel-old-收集器","link":"#_5-parallel-old-收集器","children":[]},{"level":3,"title":"# 6. CMS 收集器","slug":"_6-cms-收集器","link":"#_6-cms-收集器","children":[]},{"level":3,"title":"# 7. G1 收集器","slug":"_7-g1-收集器","link":"#_7-g1-收集器","children":[]}]},{"level":2,"title":"# 内存分配与回收策略","slug":"内存分配与回收策略","link":"#内存分配与回收策略","children":[{"level":3,"title":"# Minor GC、Major GC、Full GC","slug":"minor-gc、major-gc、full-gc","link":"#minor-gc、major-gc、full-gc","children":[]},{"level":3,"title":"# 内存分配策略","slug":"内存分配策略","link":"#内存分配策略","children":[]},{"level":3,"title":"# Full GC 的触发条件","slug":"full-gc-的触发条件","link":"#full-gc-的触发条件","children":[]}]},{"level":2,"title":"# 参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1710667754000,"updatedTime":1711084506000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":19.47,"words":5841},"filePathRelative":"posts/Java/JVM/GC 垃圾回收基础知识.md","localizedDate":"2024年3月17日","excerpt":"<blockquote>\\n<p>垃圾收集主要是针对堆和方法区进行；程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。</p>\\n</blockquote>\\n<ul>\\n<li>GC 垃圾回收基础知识\\n<ul>\\n<li>判断一个对象是否可被回收\\n<ul>\\n<li><a href=\\"#1-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%AE%97%E6%B3%95\\">1. 引用计数算法</a></li>\\n<li><a href=\\"#2-%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95\\">2. 可达性分析算法</a></li>\\n<li><a href=\\"#3-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E5%9B%9E%E6%94%B6\\">3. 方法区的回收</a></li>\\n<li><a href=\\"#4-finalize\\">4. finalize()</a></li>\\n</ul>\\n</li>\\n<li>引用类型\\n<ul>\\n<li><a href=\\"#1-%E5%BC%BA%E5%BC%95%E7%94%A8\\">1. 强引用</a></li>\\n<li><a href=\\"#2-%E8%BD%AF%E5%BC%95%E7%94%A8\\">2. 软引用</a></li>\\n<li><a href=\\"#3-%E5%BC%B1%E5%BC%95%E7%94%A8\\">3. 弱引用</a></li>\\n<li><a href=\\"#4-%E8%99%9A%E5%BC%95%E7%94%A8\\">4. 虚引用</a></li>\\n</ul>\\n</li>\\n<li>垃圾回收算法\\n<ul>\\n<li><a href=\\"#1-%E6%A0%87%E8%AE%B0---%E6%B8%85%E9%99%A4\\">1. 标记 - 清除</a></li>\\n<li><a href=\\"#2-%E6%A0%87%E8%AE%B0---%E6%95%B4%E7%90%86\\">2. 标记 - 整理</a></li>\\n<li><a href=\\"#3-%E5%A4%8D%E5%88%B6\\">3. 复制</a></li>\\n<li><a href=\\"#4-%E5%88%86%E4%BB%A3%E6%94%B6%E9%9B%86\\">4. 分代收集</a></li>\\n</ul>\\n</li>\\n<li>垃圾收集器\\n<ul>\\n<li><a href=\\"#1-serial-%E6%94%B6%E9%9B%86%E5%99%A8\\">1. Serial 收集器</a></li>\\n<li><a href=\\"#2-parnew-%E6%94%B6%E9%9B%86%E5%99%A8\\">2. ParNew 收集器</a></li>\\n<li><a href=\\"#3-parallel-scavenge-%E6%94%B6%E9%9B%86%E5%99%A8\\">3. Parallel Scavenge 收集器</a></li>\\n<li><a href=\\"#4-serial-old-%E6%94%B6%E9%9B%86%E5%99%A8\\">4. Serial Old 收集器</a></li>\\n<li><a href=\\"#5-parallel-old-%E6%94%B6%E9%9B%86%E5%99%A8\\">5. Parallel Old 收集器</a></li>\\n<li><a href=\\"#6-cms-%E6%94%B6%E9%9B%86%E5%99%A8\\">6. CMS 收集器</a></li>\\n<li><a href=\\"#7-g1-%E6%94%B6%E9%9B%86%E5%99%A8\\">7. G1 收集器</a></li>\\n</ul>\\n</li>\\n<li>内存分配与回收策略\\n<ul>\\n<li><a href=\\"#minor-gcmajor-gcfull-gc\\">Minor GC、Major GC、Full GC</a></li>\\n<li>内存分配策略\\n<ul>\\n<li><a href=\\"#1-%E5%AF%B9%E8%B1%A1%E4%BC%98%E5%85%88%E5%9C%A8-eden-%E5%88%86%E9%85%8D\\">1. 对象优先在 Eden 分配</a></li>\\n<li><a href=\\"#2-%E5%A4%A7%E5%AF%B9%E8%B1%A1%E7%9B%B4%E6%8E%A5%E8%BF%9B%E5%85%A5%E8%80%81%E5%B9%B4%E4%BB%A3\\">2. 大对象直接进入老年代</a></li>\\n<li><a href=\\"#3-%E9%95%BF%E6%9C%9F%E5%AD%98%E6%B4%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%E8%BF%9B%E5%85%A5%E8%80%81%E5%B9%B4%E4%BB%A3\\">3. 长期存活的对象进入老年代</a></li>\\n<li><a href=\\"#4-%E5%8A%A8%E6%80%81%E5%AF%B9%E8%B1%A1%E5%B9%B4%E9%BE%84%E5%88%A4%E5%AE%9A\\">4. 动态对象年龄判定</a></li>\\n<li><a href=\\"#5-%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E6%8B%85%E4%BF%9D\\">5. 空间分配担保</a></li>\\n</ul>\\n</li>\\n<li>Full GC 的触发条件\\n<ul>\\n<li><a href=\\"#1-%E8%B0%83%E7%94%A8-systemgc\\">1. 调用 System.gc()</a></li>\\n<li><a href=\\"#2-%E8%80%81%E5%B9%B4%E4%BB%A3%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3\\">2. 老年代空间不足</a></li>\\n<li><a href=\\"#3-%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E6%8B%85%E4%BF%9D%E5%A4%B1%E8%B4%A5\\">3. 空间分配担保失败</a></li>\\n<li><a href=\\"#4-jdk-17-%E5%8F%8A%E4%BB%A5%E5%89%8D%E7%9A%84%E6%B0%B8%E4%B9%85%E4%BB%A3%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3\\">4. JDK 1.7 及以前的永久代空间不足</a></li>\\n<li><a href=\\"#5-concurrent-mode-failure\\">5. Concurrent Mode Failure</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83\\">参考</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{A as comp,b as data};
