import{_ as p,e as o,o as t,c,b as s,g as n,f as l,h as e}from"./app-CF_zTObI.js";const i={},r=e(`<blockquote><p>注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它是框架学习和设计者必须掌握的基础。</p></blockquote><ul><li>Java 基础之注解机制 <ul><li>注解基础 <ul><li>Java内置注解 <ul><li><a href="#%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3---override">内置注解 - @Override</a></li><li><a href="#%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3---deprecated">内置注解 - @Deprecated</a></li><li><a href="#%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3---suppresswarnings">内置注解 - @SuppressWarnings</a></li></ul></li><li>元注解 <ul><li><a href="#%E5%85%83%E6%B3%A8%E8%A7%A3---target">元注解 - @Target</a></li><li><a href="#%E5%85%83%E6%B3%A8%E8%A7%A3---retention--retentiontarget">元注解 - @Retention &amp; @RetentionTarget</a></li><li><a href="#%E5%85%83%E6%B3%A8%E8%A7%A3---documented">元注解 - @Documented</a></li><li><a href="#%E5%85%83%E6%B3%A8%E8%A7%A3---inherited">元注解 - @Inherited</a></li><li><a href="#%E5%85%83%E6%B3%A8%E8%A7%A3---repeatable-java8">元注解 - @Repeatable (Java8)</a></li><li><a href="#%E5%85%83%E6%B3%A8%E8%A7%A3---native-java8">元注解 - @Native (Java8)</a></li></ul></li><li><a href="#%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84%E6%8E%A5%E5%8F%A3">注解与反射接口</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3">自定义注解</a></li></ul></li><li>深入理解注解 <ul><li><a href="#java8%E6%8F%90%E4%BE%9B%E4%BA%86%E5%93%AA%E4%BA%9B%E6%96%B0%E7%9A%84%E6%B3%A8%E8%A7%A3">Java8提供了哪些新的注解？</a></li><li><a href="#%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81%E7%BB%A7%E6%89%BF%E5%90%97">注解支持继承吗？</a></li><li><a href="#%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8E%9F%E7%90%86">注解实现的原理？</a></li></ul></li><li>注解的应用场景 <ul><li><a href="#%E9%85%8D%E7%BD%AE%E5%8C%96%E5%88%B0%E6%B3%A8%E8%A7%A3%E5%8C%96---%E6%A1%86%E6%9E%B6%E7%9A%84%E6%BC%94%E8%BF%9B">配置化到注解化 - 框架的演进</a></li><li><a href="#%E7%BB%A7%E6%89%BF%E5%AE%9E%E7%8E%B0%E5%88%B0%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0---junit3%E5%88%B0junit4">继承实现到注解实现 - Junit3到Junit4</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%92%8Caop---%E9%80%9A%E8%BF%87%E5%88%87%E9%9D%A2%E5%AE%9E%E7%8E%B0%E8%A7%A3%E8%80%A6">自定义注解和AOP - 通过切面实现解耦</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="注解基础" tabindex="-1"><a class="header-anchor" href="#注解基础"><span><a href="#%E6%B3%A8%E8%A7%A3%E5%9F%BA%E7%A1%80">#</a> 注解基础</span></a></h2><p>注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它主要的作用有以下四方面：</p><ul><li>生成文档，通过代码里标识的元数据生成javadoc文档。</li><li>编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。</li><li>编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。</li><li>运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。</li></ul><p>这么来说是比较抽象的，我们具体看下注解的常见分类：</p><ul><li><strong>Java自带的标准注解</strong>，包括<code>@Override</code>、<code>@Deprecated</code>和<code>@SuppressWarnings</code>，分别用于标明重写某个方法、标明某个类或方法过时、标明要忽略的警告，用这些注解标明后编译器就会进行检查。</li><li><strong>元注解</strong>，元注解是用于定义注解的注解，包括<code>@Retention</code>、<code>@Target</code>、<code>@Inherited</code>、<code>@Documented</code>，<code>@Retention</code>用于标明注解被保留的阶段，<code>@Target</code>用于标明注解使用的范围，<code>@Inherited</code>用于标明注解可继承，<code>@Documented</code>用于标明是否生成javadoc文档。</li><li><strong>自定义注解</strong>，可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解。</li></ul><p>接下来我们通过这个分类角度来理解注解。</p><h3 id="java内置注解" tabindex="-1"><a class="header-anchor" href="#java内置注解"><span><a href="#java%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3">#</a> Java内置注解</span></a></h3><p>我们从最为常见的Java内置的注解开始说起，先看下下面的代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> A</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> B</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> A</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * 重载父类的test方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * 被弃用的方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Deprecated</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> oldMethod</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * 忽略告警</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@return</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">SuppressWarnings</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;rawtypes&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> List</span><span style="color:#61AFEF;"> processList</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        List</span><span style="color:#E06C75;"> list</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ArrayList</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> list;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 1.5开始自带的标准注解，包括<code>@Override</code>、<code>@Deprecated</code>和<code>@SuppressWarnings</code>：</p><ul><li><code>@Override</code>：表示当前的方法定义将覆盖父类中的方法</li><li><code>@Deprecated</code>：表示代码被弃用，如果使用了被@Deprecated注解的代码则编译器将发出警告</li><li><code>@SuppressWarnings</code>：表示关闭编译器警告信息</li></ul><p>我们再具体看下这几个内置注解，同时通过这几个内置注解中的元注解的定义来引出元注解。</p><h4 id="内置注解-override" tabindex="-1"><a class="header-anchor" href="#内置注解-override"><span><a href="#%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3-override">#</a> 内置注解 - @Override</span></a></h4><p>我们先来看一下这个注解类型的定义：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Target</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">ElementType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">METHOD</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Retention</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">RetentionPolicy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SOURCE</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> @</span><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Override</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从它的定义我们可以看到，这个注解可以被用来修饰方法，并且它只在编译时有效，在编译后的class文件中便不再存在。这个注解的作用我们大家都不陌生，那就是告诉编译器被修饰的方法是重写的父类的中的相同签名的方法，编译器会对此做出检查，若发现父类中不存在这个方法或是存在的方法签名不同，则会报错。</p><h4 id="内置注解-deprecated" tabindex="-1"><a class="header-anchor" href="#内置注解-deprecated"><span><a href="#%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3-deprecated">#</a> 内置注解 - @Deprecated</span></a></h4><p>这个注解的定义如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Documented</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Retention</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">RetentionPolicy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">RUNTIME</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Target</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">value</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">{CONSTRUCTOR</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> FIELD</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> LOCAL_VARIABLE</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> METHOD</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> PACKAGE</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> PARAMETER</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> TYPE})</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> @</span><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Deprecated</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从它的定义我们可以知道，它会被文档化，能够保留到运行时，能够修饰构造方法、属性、局部变量、方法、包、参数、类型。这个注解的作用是告诉编译器被修饰的程序元素已被“废弃”，不再建议用户使用。</p><h4 id="内置注解-suppresswarnings" tabindex="-1"><a class="header-anchor" href="#内置注解-suppresswarnings"><span><a href="#%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3-suppresswarnings">#</a> 内置注解 - @SuppressWarnings</span></a></h4><p>这个注解我们也比较常用到，先来看下它的定义：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Target</span><span style="color:#E06C75;">({TYPE</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> FIELD</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> METHOD</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> PARAMETER</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> CONSTRUCTOR</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> LOCAL_VARIABLE})</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Retention</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">RetentionPolicy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SOURCE</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> @</span><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> SuppressWarnings</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    String</span><span style="color:#E06C75;">[] </span><span style="color:#61AFEF;">value</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它能够修饰的程序元素包括类型、属性、方法、参数、构造器、局部变量，只能存活在源码时，取值为String[]。它的作用是告诉编译器忽略指定的警告信息，它可以取的值如下所示：</p><table><thead><tr><th>参数</th><th>作用</th><th>原描述</th></tr></thead><tbody><tr><td>all</td><td>抑制所有警告</td><td>to suppress all warnings</td></tr><tr><td>boxing</td><td>抑制装箱、拆箱操作时候的警告</td><td>to suppress warnings relative to boxing/unboxing operations</td></tr><tr><td>cast</td><td>抑制映射相关的警告</td><td>to suppress warnings relative to cast operations</td></tr><tr><td>dep-ann</td><td>抑制启用注释的警告</td><td>to suppress warnings relative to deprecated annotation</td></tr><tr><td>deprecation</td><td>抑制过期方法警告</td><td>to suppress warnings relative to deprecation</td></tr><tr><td>fallthrough</td><td>抑制确在switch中缺失breaks的警告</td><td>to suppress warnings relative to missing breaks in switch statements</td></tr><tr><td>finally</td><td>抑制finally模块没有返回的警告</td><td>to suppress warnings relative to finally block that don’t return</td></tr><tr><td>hiding</td><td>抑制与隐藏变数的区域变数相关的警告</td><td>to suppress warnings relative to locals that hide variable（）</td></tr><tr><td>incomplete-switch</td><td>忽略没有完整的switch语句</td><td>to suppress warnings relative to missing entries in a switch statement (enum case)</td></tr><tr><td>nls</td><td>忽略非nls格式的字符</td><td>to suppress warnings relative to non-nls string literals</td></tr><tr><td>null</td><td>忽略对null的操作</td><td>to suppress warnings relative to null analysis</td></tr><tr><td>rawtype</td><td>使用generics时忽略没有指定相应的类型</td><td>to suppress warnings relative to un-specific types when using</td></tr><tr><td>restriction</td><td>抑制与使用不建议或禁止参照相关的警告</td><td>to suppress warnings relative to usage of discouraged or</td></tr><tr><td>serial</td><td>忽略在serializable类中没有声明serialVersionUID变量</td><td>to suppress warnings relative to missing serialVersionUID field for a serializable class</td></tr><tr><td>static-access</td><td>抑制不正确的静态访问方式警告</td><td>to suppress warnings relative to incorrect static access</td></tr><tr><td>synthetic-access</td><td>抑制子类没有按最优方法访问内部类的警告</td><td>to suppress warnings relative to unoptimized access from inner classes</td></tr><tr><td>unchecked</td><td>抑制没有进行类型检查操作的警告</td><td>to suppress warnings relative to unchecked operations</td></tr><tr><td>unqualified-field-access</td><td>抑制没有权限访问的域的警告</td><td>to suppress warnings relative to field access unqualified</td></tr><tr><td>unused</td><td>抑制没被使用过的代码的警告</td><td>to suppress warnings relative to unused code</td></tr></tbody></table><h3 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解"><span><a href="#%E5%85%83%E6%B3%A8%E8%A7%A3">#</a> 元注解</span></a></h3><p>上述内置注解的定义中使用了一些元注解（注解类型进行注解的注解类），在JDK 1.5中提供了4个标准的元注解：<code>@Target</code>，<code>@Retention</code>，<code>@Documented</code>，<code>@Inherited</code>, 在JDK 1.8中提供了两个元注解 <code>@Repeatable</code>和<code>@Native</code>。</p><h4 id="元注解-target" tabindex="-1"><a class="header-anchor" href="#元注解-target"><span><a href="#%E5%85%83%E6%B3%A8%E8%A7%A3-target">#</a> 元注解 - @Target</span></a></h4><blockquote><p>Target注解的作用是：描述注解的使用范围（即：被修饰的注解可以用在什么地方） 。</p></blockquote><p>Target注解用来说明那些被它所注解的注解类可修饰的对象范围：注解可以用于修饰 packages、types（类、接口、枚举、注解类）、类成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数），在定义注解类时使用了@Target 能够更加清晰的知道它能够被用来修饰哪些对象，它的取值范围定义在ElementType 枚举中。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> enum</span><span style="color:#E5C07B;"> ElementType</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#D19A66;">    TYPE</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;"> // 类、接口、枚举类</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#D19A66;">    FIELD</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;"> // 成员变量（包括：枚举常量）</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#D19A66;">    METHOD</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;"> // 成员方法</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#D19A66;">    PARAMETER</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;"> // 方法参数</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#D19A66;">    CONSTRUCTOR</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;"> // 构造方法</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#D19A66;">    LOCAL_VARIABLE</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;"> // 局部变量</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#D19A66;">    ANNOTATION_TYPE</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;"> // 注解类</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#D19A66;">    PACKAGE</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;"> // 可用于修饰：包</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#D19A66;">    TYPE_PARAMETER</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;"> // 类型参数，JDK 1.8 新增</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#D19A66;">    TYPE_USE</span><span style="color:#7F848E;font-style:italic;"> // 使用类型的任何地方，JDK 1.8 新增</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="元注解-retention-retentiontarget" tabindex="-1"><a class="header-anchor" href="#元注解-retention-retentiontarget"><span><a href="#%E5%85%83%E6%B3%A8%E8%A7%A3-retention-retentiontarget">#</a> 元注解 - @Retention &amp; @RetentionTarget</span></a></h4><blockquote><p>Reteniton注解的作用是：描述注解保留的时间范围（即：被描述的注解在它所修饰的类中可以被保留到何时） 。</p></blockquote><p>Reteniton注解用来限定那些被它所注解的注解类在注解到其他类上以后，可被保留到何时，一共有三种策略，定义在RetentionPolicy枚举中。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> enum</span><span style="color:#E5C07B;"> RetentionPolicy</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#D19A66;">    SOURCE</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">    // 源文件保留</span></span>
<span class="line"><span style="color:#D19A66;">    CLASS</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">       // 编译期保留，默认值</span></span>
<span class="line"><span style="color:#D19A66;">    RUNTIME</span><span style="color:#7F848E;font-style:italic;">   // 运行期保留，可通过反射去获取注解信息</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了验证应用了这三种策略的注解类有何区别，分别使用三种策略各定义一个注解类做测试。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Retention</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">RetentionPolicy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SOURCE</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> @</span><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> SourcePolicy</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Retention</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">RetentionPolicy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">CLASS</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> @</span><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> ClassPolicy</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Retention</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">RetentionPolicy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">RUNTIME</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> @</span><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> RuntimePolicy</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用定义好的三个注解类分别去注解一个方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> RetentionTest</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#E5C07B;">SourcePolicy</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> sourcePolicy</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#E5C07B;">ClassPolicy</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> classPolicy</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#E5C07B;">RuntimePolicy</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> runtimePolicy</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过执行 <code>javap -verbose RetentionTest</code>命令获取到的RetentionTest 的 class 字节码内容如下。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">{</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#E5C07B;"> retention</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">RetentionTest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    flags</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> ACC_PUBLIC</span></span>
<span class="line"><span style="color:#E06C75;">    Code</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#E06C75;">      stack</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> locals</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> args_size</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#D19A66;">         0</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> aload_0</span></span>
<span class="line"><span style="color:#D19A66;">         1</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> invokespecial #</span><span style="color:#D19A66;">1</span><span style="color:#7F848E;font-style:italic;">                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#D19A66;">         4</span><span style="color:#C678DD;">:</span><span style="color:#C678DD;"> return</span></span>
<span class="line"><span style="color:#E06C75;">      LineNumberTable</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#E06C75;">        line </span><span style="color:#D19A66;">3</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> sourcePolicy</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    flags</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> ACC_PUBLIC</span></span>
<span class="line"><span style="color:#E06C75;">    Code</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#E06C75;">      stack</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> locals</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> args_size</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#D19A66;">         0</span><span style="color:#C678DD;">:</span><span style="color:#C678DD;"> return</span></span>
<span class="line"><span style="color:#E06C75;">      LineNumberTable</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#E06C75;">        line </span><span style="color:#D19A66;">7</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> classPolicy</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    flags</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> ACC_PUBLIC</span></span>
<span class="line"><span style="color:#E06C75;">    Code</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#E06C75;">      stack</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> locals</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> args_size</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#D19A66;">         0</span><span style="color:#C678DD;">:</span><span style="color:#C678DD;"> return</span></span>
<span class="line"><span style="color:#E06C75;">      LineNumberTable</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#E06C75;">        line </span><span style="color:#D19A66;">11</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#E06C75;">    RuntimeInvisibleAnnotations</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#D19A66;">      0</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> #</span><span style="color:#D19A66;">11</span><span style="color:#E06C75;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> runtimePolicy</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    flags</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> ACC_PUBLIC</span></span>
<span class="line"><span style="color:#E06C75;">    Code</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#E06C75;">      stack</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> locals</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> args_size</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#D19A66;">         0</span><span style="color:#C678DD;">:</span><span style="color:#C678DD;"> return</span></span>
<span class="line"><span style="color:#E06C75;">      LineNumberTable</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#E06C75;">        line </span><span style="color:#D19A66;">15</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#E06C75;">    RuntimeVisibleAnnotations</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#D19A66;">      0</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> #</span><span style="color:#D19A66;">14</span><span style="color:#E06C75;">()</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 RetentionTest 的字节码内容我们可以得出以下两点结论：</p><ul><li>编译器并没有记录下 sourcePolicy() 方法的注解信息；</li><li>编译器分别使用了 <code>RuntimeInvisibleAnnotations</code> 和 <code>RuntimeVisibleAnnotations</code> 属性去记录了<code>classPolicy()</code>方法 和 <code>runtimePolicy()</code>方法 的注解信息；</li></ul><h4 id="元注解-documented" tabindex="-1"><a class="header-anchor" href="#元注解-documented"><span><a href="#%E5%85%83%E6%B3%A8%E8%A7%A3-documented">#</a> 元注解 - @Documented</span></a></h4><blockquote><p>Documented注解的作用是：描述在使用 javadoc 工具为类生成帮助文档时是否要保留其注解信息。</p></blockquote><p>以下代码在使用Javadoc工具可以生成<code>@TestDocAnnotation</code>注解信息。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.lang.annotation.Documented</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.lang.annotation.ElementType</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.lang.annotation.Target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Documented</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Target</span><span style="color:#E06C75;">({</span><span style="color:#E5C07B;">ElementType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">TYPE</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">ElementType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">METHOD</span><span style="color:#E06C75;">})</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> @</span><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> TestDocAnnotation</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> value</span><span style="color:#E06C75;">() </span><span style="color:#C678DD;">default</span><span style="color:#98C379;"> &quot;default&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">TestDocAnnotation</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;myMethodDoc&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> testDoc</span><span style="color:#E06C75;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="元注解-inherited" tabindex="-1"><a class="header-anchor" href="#元注解-inherited"><span><a href="#%E5%85%83%E6%B3%A8%E8%A7%A3-inherited">#</a> 元注解 - @Inherited</span></a></h4><blockquote><p>Inherited注解的作用：被它修饰的Annotation将具有继承性。如果某个类使用了被@Inherited修饰的Annotation，则其子类将自动具有该注解。</p></blockquote><p>我们来测试下这个注解：</p><ul><li>定义<code>@Inherited</code>注解：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Inherited</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Retention</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">RetentionPolicy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">RUNTIME</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Target</span><span style="color:#E06C75;">({</span><span style="color:#E5C07B;">ElementType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">TYPE</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">ElementType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">METHOD</span><span style="color:#E06C75;">})</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> @</span><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> TestInheritedAnnotation</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    String</span><span style="color:#E06C75;"> [] </span><span style="color:#61AFEF;">values</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#61AFEF;"> number</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用这个注解</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">TestInheritedAnnotation</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">values</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> {</span><span style="color:#98C379;">&quot;value&quot;</span><span style="color:#E06C75;">}</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Student</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">        Class</span><span style="color:#E06C75;"> clazz</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Student</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        Annotation</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">annotations</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> clazz</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAnnotations</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Annotation</span><span style="color:#E06C75;"> annotation</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> annotations) {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">annotation</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">xxxxxxx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">TestInheritedAnnotation</span><span style="color:#ABB2BF;">(values</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">[value], number</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>即使Student类没有显示地被注解<code>@TestInheritedAnnotation</code>，但是它的父类Person被注解，而且<code>@TestInheritedAnnotation</code>被<code>@Inherited</code>注解，因此Student类自动有了该注解。</p><h4 id="元注解-repeatable-java8" tabindex="-1"><a class="header-anchor" href="#元注解-repeatable-java8"><span><a href="#%E5%85%83%E6%B3%A8%E8%A7%A3-repeatable-java8">#</a> 元注解 - @Repeatable (Java8)</span></a></h4><p><code>@Repeatable</code>请参考<a href="">Java 8 - 重复注解</a></p><h4 id="元注解-native-java8" tabindex="-1"><a class="header-anchor" href="#元注解-native-java8"><span><a href="#%E5%85%83%E6%B3%A8%E8%A7%A3-native-java8">#</a> 元注解 - @Native (Java8)</span></a></h4><p>使用 @Native 注解修饰成员变量，则表示这个变量可以被本地代码引用，常常被代码生成工具使用。对于 @Native 注解不常使用，了解即可</p><h3 id="注解与反射接口" tabindex="-1"><a class="header-anchor" href="#注解与反射接口"><span><a href="#%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84%E6%8E%A5%E5%8F%A3">#</a> 注解与反射接口</span></a></h3><blockquote><p>定义注解后，如何获取注解中的内容呢？反射包java.lang.reflect下的AnnotatedElement接口提供这些方法。这里注意：只有注解被定义为RUNTIME后，该注解才能是运行时可见，当class文件被装载时被保存在class文件中的Annotation才会被虚拟机读取。</p></blockquote><p>AnnotatedElement 接口是所有程序元素（Class、Method和Constructor）的父接口，所以程序通过反射获取了某个类的AnnotatedElement对象之后，程序就可以调用该对象的方法来访问Annotation信息。我们看下具体的先关接口</p><ul><li><code>boolean isAnnotationPresent(Class&lt;?extends Annotation&gt; annotationClass)</code></li></ul><p>判断该程序元素上是否包含指定类型的注解，存在则返回true，否则返回false。注意：此方法会忽略注解对应的注解容器。</p><ul><li><code>&lt;T extends Annotation&gt; T getAnnotation(Class&lt;T&gt; annotationClass)</code></li></ul><p>返回该程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回null。</p><ul><li><code>Annotation[] getAnnotations()</code></li></ul><p>返回该程序元素上存在的所有注解，若没有注解，返回长度为0的数组。</p><ul><li><code>&lt;T extends Annotation&gt; T[] getAnnotationsByType(Class&lt;T&gt; annotationClass)</code></li></ul><p>返回该程序元素上存在的、指定类型的注解数组。没有注解对应类型的注解时，返回长度为0的数组。该方法的调用者可以随意修改返回的数组，而不会对其他调用者返回的数组产生任何影响。<code>getAnnotationsByType</code>方法与 <code>getAnnotation</code>的区别在于，<code>getAnnotationsByType</code>会检测注解对应的重复注解容器。若程序元素为类，当前类上找不到注解，且该注解为可继承的，则会去父类上检测对应的注解。</p><ul><li><code>&lt;T extends Annotation&gt; T getDeclaredAnnotation(Class&lt;T&gt; annotationClass)</code></li></ul><p>返回直接存在于此元素上的所有注解。与此接口中的其他方法不同，该方法将忽略继承的注释。如果没有注释直接存在于此元素上，则返回null</p><ul><li><code>&lt;T extends Annotation&gt; T[] getDeclaredAnnotationsByType(Class&lt;T&gt; annotationClass)</code></li></ul><p>返回直接存在于此元素上的所有注解。与此接口中的其他方法不同，该方法将忽略继承的注释</p><ul><li><code>Annotation[] getDeclaredAnnotations()</code></li></ul><p>返回直接存在于此元素上的所有注解及注解对应的重复注解容器。与此接口中的其他方法不同，该方法将忽略继承的注解。如果没有注释直接存在于此元素上，则返回长度为零的一个数组。该方法的调用者可以随意修改返回的数组，而不会对其他调用者返回的数组产生任何影响。</p><h3 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解"><span><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3">#</a> 自定义注解</span></a></h3><blockquote><p>当我们理解了内置注解, 元注解和获取注解的反射接口后，我们便可以开始自定义注解了。这个例子我把上述的知识点全部融入进来, 代码很简单：</p></blockquote><ul><li>定义自己的注解</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> com.pdai.java.annotation</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.lang.annotation.ElementType</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.lang.annotation.Retention</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.lang.annotation.RetentionPolicy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.lang.annotation.Target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Target</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">ElementType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">METHOD</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Retention</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">RetentionPolicy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">RUNTIME</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> @</span><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> MyMethodAnnotation</span><span style="color:#E06C75;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> title</span><span style="color:#E06C75;">() </span><span style="color:#C678DD;">default</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> description</span><span style="color:#E06C75;">() </span><span style="color:#C678DD;">default</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用注解</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> com.pdai.java.annotation</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.FileNotFoundException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.lang.annotation.Annotation</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.lang.reflect.Method</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.ArrayList</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.List</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> TestMethodAnnotation</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">MyMethodAnnotation</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">title</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;toStringMethod&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> description</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;override toString method&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> toString</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#98C379;"> &quot;Override toString method&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Deprecated</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">MyMethodAnnotation</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">title</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;old static method&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> description</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;deprecated old static method&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> oldMethod</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;old method, don&#39;t use it.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">SuppressWarnings</span><span style="color:#E06C75;">({</span><span style="color:#98C379;">&quot;unchecked&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;deprecation&quot;</span><span style="color:#E06C75;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">MyMethodAnnotation</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">title</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;test method&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> description</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;suppress warning static method&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> genericsTest</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> FileNotFoundException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        List</span><span style="color:#E06C75;"> l</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ArrayList</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        l</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;abc&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">        oldMethod</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用反射接口获取注解信息</li></ul><p>在TestMethodAnnotation中添加Main方法进行测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取所有methods</span></span>
<span class="line"><span style="color:#E5C07B;">        Method</span><span style="color:#E06C75;">[] methods </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> TestMethodAnnotation</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getClassLoader</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">loadClass</span><span style="color:#ABB2BF;">((</span><span style="color:#98C379;">&quot;com.pdai.java.annotation.TestMethodAnnotation&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">getMethods</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 遍历</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Method</span><span style="color:#E06C75;"> method </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> methods) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 方法上是否有MyMethodAnnotation注解</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">method</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isAnnotationPresent</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MyMethodAnnotation</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 获取并遍历方法上的所有注解</span></span>
<span class="line"><span style="color:#C678DD;">                    for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Annotation</span><span style="color:#E06C75;"> anno </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> method</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeclaredAnnotations</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Annotation in Method &#39;&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">                                +</span><span style="color:#ABB2BF;"> method </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;&#39; : &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> anno);</span></span>
<span class="line"><span style="color:#E06C75;">                    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 获取MyMethodAnnotation对象信息</span></span>
<span class="line"><span style="color:#E5C07B;">                    MyMethodAnnotation</span><span style="color:#E06C75;"> methodAnno </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> method</span></span>
<span class="line"><span style="color:#ABB2BF;">                            .</span><span style="color:#61AFEF;">getAnnotation</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MyMethodAnnotation</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">                    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">methodAnno</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">title</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">                } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Throwable</span><span style="color:#E06C75;font-style:italic;"> ex</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    ex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">SecurityException</span><span style="color:#E06C75;"> | </span><span style="color:#E5C07B;">ClassNotFoundException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试的输出</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Annotation</span><span style="color:#E06C75;"> in Method </span><span style="color:#98C379;">&#39;public static void com.pdai.java.annotation.TestMethodAnnotation.oldMethod()&#39;</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> @</span><span style="color:#E5C07B;">java.lang.Deprecated</span><span style="color:#E06C75;">()</span></span>
<span class="line"><span style="color:#E5C07B;">Annotation</span><span style="color:#E06C75;"> in Method </span><span style="color:#98C379;">&#39;public static void com.pdai.java.annotation.TestMethodAnnotation.oldMethod()&#39;</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> @</span><span style="color:#E5C07B;">com.pdai.java.annotation.MyMethodAnnotation</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">title</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">old </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> method</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> description</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">deprecated old </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> method)</span></span>
<span class="line"><span style="color:#E06C75;">old </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> method</span></span>
<span class="line"><span style="color:#E5C07B;">Annotation</span><span style="color:#E06C75;"> in Method </span><span style="color:#98C379;">&#39;public static void com.pdai.java.annotation.TestMethodAnnotation.genericsTest() throws java.io.FileNotFoundException&#39;</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> @</span><span style="color:#E5C07B;">com.pdai.java.annotation.MyMethodAnnotation</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">title</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">test method</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> description</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">suppress warning </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> method)</span></span>
<span class="line"><span style="color:#E06C75;">test method</span></span>
<span class="line"><span style="color:#E5C07B;">Annotation</span><span style="color:#E06C75;"> in Method </span><span style="color:#98C379;">&#39;public java.lang.String com.pdai.java.annotation.TestMethodAnnotation.toString()&#39;</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> @</span><span style="color:#E5C07B;">com.pdai.java.annotation.MyMethodAnnotation</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">title</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">toStringMethod</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> description</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">override toString method)</span></span>
<span class="line"><span style="color:#E06C75;">toStringMethod</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="深入理解注解" tabindex="-1"><a class="header-anchor" href="#深入理解注解"><span><a href="#%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3">#</a> 深入理解注解</span></a></h2><p>提示</p><p>接下来，我们从其它角度深入理解注解</p><h3 id="java8提供了哪些新的注解" tabindex="-1"><a class="header-anchor" href="#java8提供了哪些新的注解"><span><a href="#java8%E6%8F%90%E4%BE%9B%E4%BA%86%E5%93%AA%E4%BA%9B%E6%96%B0%E7%9A%84%E6%B3%A8%E8%A7%A3">#</a> Java8提供了哪些新的注解？</span></a></h3><ul><li><code>@Repeatable</code></li></ul><p>请参考<a href="">Java 8 - 重复注解</a></p><ul><li><code>ElementType.TYPE_USE</code></li></ul><p>请参考<a href="">Java 8 - 类型注解</a></p><ul><li><code>ElementType.TYPE_PARAMETER</code></li></ul><p><code>ElementType.TYPE_USE</code>(此类型包括类型声明和类型参数声明，是为了方便设计者进行类型检查)包含了<code>ElementType.TYPE</code>(类、接口（包括注解类型）和枚举的声明)和<code>ElementType.TYPE_PARAMETER</code>(类型参数声明), 不妨再看个例子</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 自定义ElementType.TYPE_PARAMETER注解</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Retention</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">RetentionPolicy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">RUNTIME</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Target</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">ElementType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">TYPE_PARAMETER</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> @</span><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> MyNotEmpty</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 自定义ElementType.TYPE_USE注解</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Retention</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">RetentionPolicy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">RUNTIME</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Target</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">ElementType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">TYPE_USE</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> @</span><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> MyNotNull</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 测试类</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> TypeParameterAndTypeUseAnnotation</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">@</span><span style="color:#E5C07B;">MyNotEmpty</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">&gt;{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //使用TYPE_PARAMETER类型，会编译不通过</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//		public @MyNotEmpty T test(@MyNotEmpty T a){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//			new ArrayList&lt;@MyNotEmpty String&gt;();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//				return a;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //使用TYPE_USE类型，编译通过</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#61AFEF;"> @</span><span style="color:#E5C07B;">MyNotNull</span><span style="color:#E5C07B;"> T</span><span style="color:#61AFEF;"> test2</span><span style="color:#ABB2BF;">(@</span><span style="color:#E5C07B;">MyNotNull</span><span style="color:#E5C07B;"> T</span><span style="color:#E06C75;font-style:italic;"> a</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    new</span><span style="color:#E5C07B;"> ArrayList</span><span style="color:#ABB2BF;">&lt;@</span><span style="color:#E5C07B;">MyNotNull</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> a;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注解支持继承吗" tabindex="-1"><a class="header-anchor" href="#注解支持继承吗"><span><a href="#%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81%E7%BB%A7%E6%89%BF%E5%90%97">#</a> 注解支持继承吗？</span></a></h3><blockquote><p>注解是不支持继承的</p></blockquote><p>不能使用关键字extends来继承某个@interface，但注解在编译后，编译器会自动继承java.lang.annotation.Annotation接口.</p><p>虽然反编译后发现注解继承了Annotation接口，请记住，即使Java的接口可以实现多继承，但定义注解时依然无法使用extends关键字继承@interface。</p><p>区别于注解的继承，被注解的子类继承父类注解可以用@Inherited： 如果某个类使用了被@Inherited修饰的Annotation，则其子类将自动具有该注解。</p><h3 id="注解实现的原理" tabindex="-1"><a class="header-anchor" href="#注解实现的原理"><span><a href="#%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8E%9F%E7%90%86">#</a> 注解实现的原理？</span></a></h3><blockquote><p>网上很多标注解的原理文章根本没有说到点子上。</p></blockquote><p>这里推荐你两篇文章：</p>`,110),B={href:"https://blog.csdn.net/qq_20009015/article/details/106038023",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.race604.com/annotation-processing/",target:"_blank",rel:"noopener noreferrer"},d=e(`<h2 id="注解的应用场景" tabindex="-1"><a class="header-anchor" href="#注解的应用场景"><span><a href="#%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 注解的应用场景</span></a></h2><p>提示</p><p>最后我们再看看实际开发中注解的一些应用场景。</p><h3 id="配置化到注解化-框架的演进" tabindex="-1"><a class="header-anchor" href="#配置化到注解化-框架的演进"><span><a href="#%E9%85%8D%E7%BD%AE%E5%8C%96%E5%88%B0%E6%B3%A8%E8%A7%A3%E5%8C%96-%E6%A1%86%E6%9E%B6%E7%9A%84%E6%BC%94%E8%BF%9B">#</a> 配置化到注解化 - 框架的演进</span></a></h3><p>Spring 框架 配置化到注解化的转变。</p><h3 id="继承实现到注解实现-junit3到junit4" tabindex="-1"><a class="header-anchor" href="#继承实现到注解实现-junit3到junit4"><span><a href="#%E7%BB%A7%E6%89%BF%E5%AE%9E%E7%8E%B0%E5%88%B0%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0-junit3%E5%88%B0junit4">#</a> 继承实现到注解实现 - Junit3到Junit4</span></a></h3><blockquote><p>一个模块的封装大多数人都是通过继承和组合等模式来实现的，但是如果结合注解将可以极大程度提高实现的优雅度（降低耦合度）。而Junit3 到Junit4的演化就是最好的一个例子。</p></blockquote><ul><li>被测试类</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> HelloWorld</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> 	</span></span>
<span class="line"><span style="color:#C678DD;"> 	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> sayHello</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;"> 		System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello....&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;"> 		throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NumberFormatException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	}</span></span>
<span class="line"><span style="color:#E06C75;"> 	</span></span>
<span class="line"><span style="color:#C678DD;"> 	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> sayWorld</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;"> 		System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;world....&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	}</span></span>
<span class="line"><span style="color:#E06C75;"> 	</span></span>
<span class="line"><span style="color:#C678DD;"> 	public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> say</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;"> 		return</span><span style="color:#98C379;"> &quot;hello world!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	}</span></span>
<span class="line"><span style="color:#E06C75;"> 	</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Junit 3 实现UT</li></ul><p>通过继承 TestCase来实现，初始化是通过Override父类方法来进行，测试方式通过test的前缀方法获取。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> HelloWorldTest</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> TestCase</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;"> 	private</span><span style="color:#E5C07B;"> HelloWorld</span><span style="color:#E06C75;"> hw</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;"> 	</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;"> 	protected</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> setUp</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;"> 		super</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setUp</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> 		hw</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> HelloWorld</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	}</span></span>
<span class="line"><span style="color:#E06C75;"> 	</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> 	//1.测试没有返回值</span></span>
<span class="line"><span style="color:#C678DD;"> 	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> testHello</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;"> 		try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;"> 			hw</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> 		} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;"> 			System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;发生异常.....&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> 		}</span></span>
<span class="line"><span style="color:#ABB2BF;"> 		</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	}</span></span>
<span class="line"><span style="color:#C678DD;"> 	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> testWorld</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;"> 		hw</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayWorld</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> 	//2.测试有返回值的方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> 	// 返回字符串</span></span>
<span class="line"><span style="color:#C678DD;"> 	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> testSay</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#61AFEF;"> 		assertEquals</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试失败&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">hw</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">say</span><span style="color:#ABB2BF;">(), </span><span style="color:#98C379;">&quot;hello world!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> 	//返回对象</span></span>
<span class="line"><span style="color:#C678DD;"> 	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> testObj</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#61AFEF;"> 		assertNull</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试对象不为空&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;"> 		assertNotNull</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试对象为空&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	}</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;"> 	protected</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> tearDown</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;"> 		super</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tearDown</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> 		hw</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	}</span><span style="color:#E06C75;">	</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Junit 4 实现UT</li></ul><p>通过定义@Before，@Test，@After等等注解来实现。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> HelloWorldTest</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;"> 	private</span><span style="color:#E5C07B;"> HelloWorld</span><span style="color:#E06C75;"> hw</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#ABB2BF;"> 	@</span><span style="color:#E5C07B;">Before</span></span>
<span class="line"><span style="color:#C678DD;"> 	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> setUp</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;"> 		hw </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> HelloWorld</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	}</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#ABB2BF;"> 	@</span><span style="color:#E5C07B;">Test</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">expected</span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;">NumberFormatException</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> 	// 1.测试没有返回值,有别于junit3的使用，更加方便</span></span>
<span class="line"><span style="color:#C678DD;"> 	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> testHello</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;"> 		hw</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	}</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	@</span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#C678DD;"> 	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> testWorld</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;"> 		hw</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayWorld</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	}</span></span>
<span class="line"><span style="color:#E06C75;"> 	</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	@</span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> 	// 2.测试有返回值的方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> 	// 返回字符串</span></span>
<span class="line"><span style="color:#C678DD;"> 	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> testSay</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;"> 		assertEquals</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试失败&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">hw</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">say</span><span style="color:#ABB2BF;">(), </span><span style="color:#98C379;">&quot;hello world!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	}</span></span>
<span class="line"><span style="color:#E06C75;"> 	</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	@</span><span style="color:#E5C07B;">Test</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> 	// 返回对象</span></span>
<span class="line"><span style="color:#C678DD;"> 	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> testObj</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;"> 		assertNull</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试对象不为空&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;"> 		assertNotNull</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试对象为空&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	}</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#ABB2BF;"> 	@</span><span style="color:#E5C07B;">After</span></span>
<span class="line"><span style="color:#C678DD;"> 	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> tearDown</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;"> 		hw </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> 	}</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),v={href:"https://blog.csdn.net/weixin_34043301/article/details/91799261",target:"_blank",rel:"noopener noreferrer"},E=e(`<h3 id="自定义注解和aop-通过切面实现解耦" tabindex="-1"><a class="header-anchor" href="#自定义注解和aop-通过切面实现解耦"><span><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%92%8Caop-%E9%80%9A%E8%BF%87%E5%88%87%E9%9D%A2%E5%AE%9E%E7%8E%B0%E8%A7%A3%E8%80%A6">#</a> 自定义注解和AOP - 通过切面实现解耦</span></a></h3><blockquote><p>最为常见的就是使用Spring AOP切面实现<strong>统一的操作日志管理</strong>，我这里找了一个开源项目中的例子（只展示主要代码），给你展示下如何通过注解实现解耦的。</p></blockquote><ul><li>自定义Log注解</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Target</span><span style="color:#E06C75;">({ </span><span style="color:#E5C07B;">ElementType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">PARAMETER</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> ElementType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">METHOD</span><span style="color:#E06C75;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Retention</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">RetentionPolicy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">RUNTIME</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Documented</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> @</span><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Log</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 模块 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> title</span><span style="color:#E06C75;">() </span><span style="color:#C678DD;">default</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 功能</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> BusinessType</span><span style="color:#61AFEF;"> businessType</span><span style="color:#E06C75;">() </span><span style="color:#C678DD;">default</span><span style="color:#E5C07B;"> BusinessType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">OTHER</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 操作人类别</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> OperatorType</span><span style="color:#61AFEF;"> operatorType</span><span style="color:#E06C75;">() </span><span style="color:#C678DD;">default</span><span style="color:#E5C07B;"> OperatorType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MANAGE</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 是否保存请求的参数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> isSaveRequestData</span><span style="color:#E06C75;">() </span><span style="color:#C678DD;">default</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实现日志的切面, 对自定义注解Log作切点进行拦截</li></ul><p>即对注解了@Log的方法进行切点拦截，</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Aspect</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Component</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> LogAspect</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Logger</span><span style="color:#E06C75;"> log </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> LoggerFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLogger</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">LogAspect</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 配置织入点 - 自定义注解的包路径</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Pointcut</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;@annotation(com.xxx.aspectj.lang.annotation.Log)&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> logPointCut</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 处理完请求后执行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> joinPoint</span><span style="color:#7F848E;font-style:italic;"> 切点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">AfterReturning</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">pointcut</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;logPointCut()&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> returning</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;jsonResult&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doAfterReturning</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JoinPoint</span><span style="color:#E06C75;font-style:italic;"> joinPoint</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;font-style:italic;"> jsonResult</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        handleLog</span><span style="color:#ABB2BF;">(joinPoint, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, jsonResult);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 拦截异常操作</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> joinPoint</span><span style="color:#7F848E;font-style:italic;"> 切点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#7F848E;font-style:italic;"> 异常</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">AfterThrowing</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;logPointCut()&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> throwing</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;e&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doAfterThrowing</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JoinPoint</span><span style="color:#E06C75;font-style:italic;"> joinPoint</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        handleLog</span><span style="color:#ABB2BF;">(joinPoint, e, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> handleLog</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">final</span><span style="color:#E5C07B;"> JoinPoint</span><span style="color:#E06C75;font-style:italic;"> joinPoint</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">final</span><span style="color:#E5C07B;"> Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;font-style:italic;"> jsonResult</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获得注解</span></span>
<span class="line"><span style="color:#E5C07B;">            Log</span><span style="color:#E06C75;"> controllerLog</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getAnnotationLog</span><span style="color:#ABB2BF;">(joinPoint);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (controllerLog </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取当前的用户</span></span>
<span class="line"><span style="color:#E5C07B;">            User</span><span style="color:#E06C75;"> currentUser</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ShiroUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSysUser</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // *========数据库日志=========*//</span></span>
<span class="line"><span style="color:#E5C07B;">            OperLog</span><span style="color:#E06C75;"> operLog</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> OperLog</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            operLog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setStatus</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">BusinessStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SUCCESS</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ordinal</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 请求的地址</span></span>
<span class="line"><span style="color:#E5C07B;">            String</span><span style="color:#E06C75;"> ip</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ShiroUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getIp</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            operLog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setOperIp</span><span style="color:#ABB2BF;">(ip);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 返回参数</span></span>
<span class="line"><span style="color:#E5C07B;">            operLog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setJsonResult</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSONObject</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toJSONString</span><span style="color:#ABB2BF;">(jsonResult));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">            operLog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setOperUrl</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ServletUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRequest</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getRequestURI</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (currentUser </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                operLog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setOperName</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">currentUser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLoginName</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isNotNull</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">currentUser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDept</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#56B6C2;">                        &amp;&amp;</span><span style="color:#E5C07B;"> StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isNotEmpty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">currentUser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDept</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getDeptName</span><span style="color:#ABB2BF;">())) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    operLog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setDeptName</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">currentUser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDept</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getDeptName</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (e </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                operLog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setStatus</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">BusinessStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">FAIL</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ordinal</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">                operLog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setErrorMsg</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">(), </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置方法名称</span></span>
<span class="line"><span style="color:#E5C07B;">            String</span><span style="color:#E06C75;"> className</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> joinPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getTarget</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getClass</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            String</span><span style="color:#E06C75;"> methodName</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> joinPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSignature</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            operLog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setMethod</span><span style="color:#ABB2BF;">(className </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;.&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> methodName </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;()&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置请求方式</span></span>
<span class="line"><span style="color:#E5C07B;">            operLog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setRequestMethod</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ServletUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRequest</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getMethod</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 处理设置注解上的参数</span></span>
<span class="line"><span style="color:#61AFEF;">            getControllerMethodDescription</span><span style="color:#ABB2BF;">(controllerLog, operLog);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 保存数据库</span></span>
<span class="line"><span style="color:#E5C07B;">            AsyncManager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">me</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">AsyncFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">recordOper</span><span style="color:#ABB2BF;">(operLog));</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> exp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 记录本地异常日志</span></span>
<span class="line"><span style="color:#E5C07B;">            log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;==前置通知异常==&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;异常信息:{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">exp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">            exp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 获取注解中对方法的描述信息 用于Controller层注解</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> log</span><span style="color:#7F848E;font-style:italic;"> 日志</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> operLog</span><span style="color:#7F848E;font-style:italic;"> 操作日志</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> Exception</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> getControllerMethodDescription</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Log</span><span style="color:#E06C75;font-style:italic;"> log</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">OperLog</span><span style="color:#E06C75;font-style:italic;"> operLog</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 设置action动作</span></span>
<span class="line"><span style="color:#E5C07B;">        operLog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setBusinessType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">businessType</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">ordinal</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 设置标题</span></span>
<span class="line"><span style="color:#E5C07B;">        operLog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setTitle</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">title</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 设置操作人类别</span></span>
<span class="line"><span style="color:#E5C07B;">        operLog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setOperatorType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">operatorType</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">ordinal</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 是否需要保存request，参数和值</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isSaveRequestData</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取参数的信息，传入到数据库中。</span></span>
<span class="line"><span style="color:#61AFEF;">            setRequestValue</span><span style="color:#ABB2BF;">(operLog);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 获取请求的参数，放到log中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> operLog</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> request</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> setRequestValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">OperLog</span><span style="color:#E06C75;font-style:italic;"> operLog</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[]&gt; </span><span style="color:#E06C75;">map</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ServletUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRequest</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getParameterMap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> params</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSONObject</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toJSONString</span><span style="color:#ABB2BF;">(map);</span></span>
<span class="line"><span style="color:#E5C07B;">        operLog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setOperParam</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(params, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 是否存在注解，如果存在就获取</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Log</span><span style="color:#61AFEF;"> getAnnotationLog</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JoinPoint</span><span style="color:#E06C75;font-style:italic;"> joinPoint</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Signature</span><span style="color:#E06C75;"> signature</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> joinPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSignature</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        MethodSignature</span><span style="color:#E06C75;"> methodSignature</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (MethodSignature) signature;</span></span>
<span class="line"><span style="color:#E5C07B;">        Method</span><span style="color:#E06C75;"> method</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> methodSignature</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMethod</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (method </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E5C07B;"> method</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAnnotation</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Log</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用@Log注解</li></ul><p>以一个简单的CRUD操作为例, 这里展示部分代码：每对“部门”进行操作就会产生一条操作日志存入数据库。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Controller</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">RequestMapping</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;/system/dept&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> DeptController</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> BaseController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> prefix </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;system/dept&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Autowired</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> IDeptService</span><span style="color:#E06C75;"> deptService</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 新增保存部门</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Log</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">title</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;部门管理&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> businessType</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> BusinessType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">INSERT</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">RequiresPermissions</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;system:dept:add&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">PostMapping</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;/add&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">ResponseBody</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> AjaxResult</span><span style="color:#61AFEF;"> addSave</span><span style="color:#ABB2BF;">(@</span><span style="color:#E5C07B;">Validated</span><span style="color:#E5C07B;"> Dept</span><span style="color:#E06C75;font-style:italic;"> dept</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">UserConstants</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">DEPT_NAME_NOT_UNIQUE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">deptService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkDeptNameUnique</span><span style="color:#ABB2BF;">(dept))) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#61AFEF;"> error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;新增部门&#39;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> dept</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeptName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;&#39;失败，部门名称已存在&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> toAjax</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">deptService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertDept</span><span style="color:#ABB2BF;">(dept));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 保存</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Log</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">title</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;部门管理&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> businessType</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> BusinessType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">UPDATE</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">RequiresPermissions</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;system:dept:edit&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">PostMapping</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;/edit&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">ResponseBody</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> AjaxResult</span><span style="color:#61AFEF;"> editSave</span><span style="color:#ABB2BF;">(@</span><span style="color:#E5C07B;">Validated</span><span style="color:#E5C07B;"> Dept</span><span style="color:#E06C75;font-style:italic;"> dept</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">UserConstants</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">DEPT_NAME_NOT_UNIQUE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">deptService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkDeptNameUnique</span><span style="color:#ABB2BF;">(dept))) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#61AFEF;"> error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;修改部门&#39;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> dept</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeptName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;&#39;失败，部门名称已存在&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dept</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getParentId</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dept</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeptId</span><span style="color:#ABB2BF;">())) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#61AFEF;"> error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;修改部门&#39;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> dept</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeptName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;&#39;失败，上级部门不能是自己&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> toAjax</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">deptService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">updateDept</span><span style="color:#ABB2BF;">(dept));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 删除</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Log</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">title</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;部门管理&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> businessType</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> BusinessType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">DELETE</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">RequiresPermissions</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;system:dept:remove&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">GetMapping</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;/remove/{deptId}&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">ResponseBody</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> AjaxResult</span><span style="color:#61AFEF;"> remove</span><span style="color:#ABB2BF;">(@</span><span style="color:#E5C07B;">PathVariable</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;deptId&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">Long</span><span style="color:#E06C75;font-style:italic;"> deptId</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">deptService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">selectDeptCount</span><span style="color:#ABB2BF;">(deptId) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E5C07B;"> AjaxResult</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">warn</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;存在下级部门,不允许删除&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">deptService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkDeptExistUser</span><span style="color:#ABB2BF;">(deptId)) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E5C07B;"> AjaxResult</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">warn</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;部门存在用户,不允许删除&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> toAjax</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">deptService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deleteDeptById</span><span style="color:#ABB2BF;">(deptId));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>同样的，你也可以看到权限管理也是通过类似的注解（<code>@RequiresPermissions</code>）机制来实现的。所以我们可以看到，通过注解+AOP最终的目标是为了实现模块的解耦。</p></blockquote>`,11);function A(u,F){const a=o("ExternalLinkIcon");return t(),c("div",null,[r,s("ul",null,[s("li",null,[s("a",B,[n("https://blog.csdn.net/qq_20009015/article/details/106038023"),l(a)])]),s("li",null,[s("a",y,[n("https://www.race604.com/annotation-processing/"),l(a)])])]),d,s("p",null,[n("这里我们发现通过注解的方式，我们实现单元测试时将更为优雅。如果你还期望了解Junit4是如何实现运行的呢？可以看这篇文章："),s("a",v,[n("JUnit4源码分析运行原理在新窗口打开"),l(a)]),n("。")]),E])}const b=p(i,[["render",A],["__file","Java 基础之注解机制.html.vue"]]),m=JSON.parse(`{"path":"/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3%E6%9C%BA%E5%88%B6.html","title":"Java 基础之注解机制","lang":"zh-CN","frontmatter":{"title":"Java 基础之注解机制","subtitle":"Java，Java开发，Java 体系","date":"2024-03-05T18:06:22.000Z","category":["Java"],"tag":["Java"],"order":5,"description":"注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它是框架学习和设计者必须掌握的基础。 Java 基础之注解机制 注解基础 Java内置注解 内置注解 - @Override 内置注解 - @Deprecated 内置注解 - @SuppressWarnings 元注解 元注解 - @...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"Java 基础之注解机制"}],["meta",{"property":"og:description","content":"注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它是框架学习和设计者必须掌握的基础。 Java 基础之注解机制 注解基础 Java内置注解 内置注解 - @Override 内置注解 - @Deprecated 内置注解 - @SuppressWarnings 元注解 元注解 - @..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T03:51:56.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-03-05T18:06:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T03:51:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 基础之注解机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-05T18:06:22.000Z\\",\\"dateModified\\":\\"2024-03-08T03:51:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 注解基础","slug":"注解基础","link":"#注解基础","children":[{"level":3,"title":"# Java内置注解","slug":"java内置注解","link":"#java内置注解","children":[]},{"level":3,"title":"# 元注解","slug":"元注解","link":"#元注解","children":[]},{"level":3,"title":"# 注解与反射接口","slug":"注解与反射接口","link":"#注解与反射接口","children":[]},{"level":3,"title":"# 自定义注解","slug":"自定义注解","link":"#自定义注解","children":[]}]},{"level":2,"title":"# 深入理解注解","slug":"深入理解注解","link":"#深入理解注解","children":[{"level":3,"title":"# Java8提供了哪些新的注解？","slug":"java8提供了哪些新的注解","link":"#java8提供了哪些新的注解","children":[]},{"level":3,"title":"# 注解支持继承吗？","slug":"注解支持继承吗","link":"#注解支持继承吗","children":[]},{"level":3,"title":"# 注解实现的原理？","slug":"注解实现的原理","link":"#注解实现的原理","children":[]}]},{"level":2,"title":"# 注解的应用场景","slug":"注解的应用场景","link":"#注解的应用场景","children":[{"level":3,"title":"# 配置化到注解化 - 框架的演进","slug":"配置化到注解化-框架的演进","link":"#配置化到注解化-框架的演进","children":[]},{"level":3,"title":"# 继承实现到注解实现 - Junit3到Junit4","slug":"继承实现到注解实现-junit3到junit4","link":"#继承实现到注解实现-junit3到junit4","children":[]},{"level":3,"title":"# 自定义注解和AOP - 通过切面实现解耦","slug":"自定义注解和aop-通过切面实现解耦","link":"#自定义注解和aop-通过切面实现解耦","children":[]}]}],"git":{"createdTime":1709869916000,"updatedTime":1709869916000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":19.31,"words":5793},"filePathRelative":"posts/Java/Foundation/Java 基础之注解机制.md","localizedDate":"2024年3月5日","excerpt":"<blockquote>\\n<p>注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它是框架学习和设计者必须掌握的基础。</p>\\n</blockquote>\\n<ul>\\n<li>Java 基础之注解机制\\n<ul>\\n<li>注解基础\\n<ul>\\n<li>Java内置注解\\n<ul>\\n<li><a href=\\"#%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3---override\\">内置注解 - @Override</a></li>\\n<li><a href=\\"#%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3---deprecated\\">内置注解 - @Deprecated</a></li>\\n<li><a href=\\"#%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3---suppresswarnings\\">内置注解 - @SuppressWarnings</a></li>\\n</ul>\\n</li>\\n<li>元注解\\n<ul>\\n<li><a href=\\"#%E5%85%83%E6%B3%A8%E8%A7%A3---target\\">元注解 - @Target</a></li>\\n<li><a href=\\"#%E5%85%83%E6%B3%A8%E8%A7%A3---retention--retentiontarget\\">元注解 - @Retention &amp; @RetentionTarget</a></li>\\n<li><a href=\\"#%E5%85%83%E6%B3%A8%E8%A7%A3---documented\\">元注解 - @Documented</a></li>\\n<li><a href=\\"#%E5%85%83%E6%B3%A8%E8%A7%A3---inherited\\">元注解 - @Inherited</a></li>\\n<li><a href=\\"#%E5%85%83%E6%B3%A8%E8%A7%A3---repeatable-java8\\">元注解 - @Repeatable (Java8)</a></li>\\n<li><a href=\\"#%E5%85%83%E6%B3%A8%E8%A7%A3---native-java8\\">元注解 - @Native (Java8)</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84%E6%8E%A5%E5%8F%A3\\">注解与反射接口</a></li>\\n<li><a href=\\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3\\">自定义注解</a></li>\\n</ul>\\n</li>\\n<li>深入理解注解\\n<ul>\\n<li><a href=\\"#java8%E6%8F%90%E4%BE%9B%E4%BA%86%E5%93%AA%E4%BA%9B%E6%96%B0%E7%9A%84%E6%B3%A8%E8%A7%A3\\">Java8提供了哪些新的注解？</a></li>\\n<li><a href=\\"#%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81%E7%BB%A7%E6%89%BF%E5%90%97\\">注解支持继承吗？</a></li>\\n<li><a href=\\"#%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8E%9F%E7%90%86\\">注解实现的原理？</a></li>\\n</ul>\\n</li>\\n<li>注解的应用场景\\n<ul>\\n<li><a href=\\"#%E9%85%8D%E7%BD%AE%E5%8C%96%E5%88%B0%E6%B3%A8%E8%A7%A3%E5%8C%96---%E6%A1%86%E6%9E%B6%E7%9A%84%E6%BC%94%E8%BF%9B\\">配置化到注解化 - 框架的演进</a></li>\\n<li><a href=\\"#%E7%BB%A7%E6%89%BF%E5%AE%9E%E7%8E%B0%E5%88%B0%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0---junit3%E5%88%B0junit4\\">继承实现到注解实现 - Junit3到Junit4</a></li>\\n<li><a href=\\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%92%8Caop---%E9%80%9A%E8%BF%87%E5%88%87%E9%9D%A2%E5%AE%9E%E7%8E%B0%E8%A7%A3%E8%80%A6\\">自定义注解和AOP - 通过切面实现解耦</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{b as comp,m as data};
