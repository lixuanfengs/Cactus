import{_ as e,c as l,a as i,o as t}from"./app-Dg1sn2Fv.js";const o={};function r(n,a){return t(),l("div",null,[...a[0]||(a[0]=[i('<blockquote><p>本系列将给大家构建JVM核心知识点全局知识体系。</p></blockquote><ul><li>JVM 相关知识体系详解 <ul><li><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">知识体系</a></li><li><a href="#%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9">学习要点</a></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="知识体系" tabindex="-1"><a class="header-anchor" href="#知识体系"><span><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">#</a> 知识体系</span></a></h2><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-overview.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="学习要点" tabindex="-1"><a class="header-anchor" href="#学习要点"><span><a href="#%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9">#</a> 学习要点</span></a></h2><blockquote><p>不同的虚拟机实现方式上也有差别，如果没有特别指出，这里的JVM指的是sun的HotSpot；不同的JDK版本略有差别，这里主要以1.8为主，具体差异请看各个章节中详解。下图主要表示的逻辑关系，用来将所有知识点放到一张图里，帮助你理解。</p></blockquote><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-overview.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p><strong>A. Java进阶 - JVM相关 知识体系</strong>： 首先按照上述<code>学习思路</code>，理解总体知识点在全局上与知识体系之间的对应关系。</p></blockquote><ul><li><a href="">JVM 相关知识体系</a></li></ul><blockquote><p><strong>B. Java进阶 - JVM相关 类加载</strong>： 然后理解类字节码和类的加载机制。</p></blockquote><ul><li>JVM基础 - 类字节码详解 <ul><li>源代码通过编译器编译为字节码，再通过类加载子系统进行加载到JVM中运行</li></ul></li><li>JVM基础 - 字节码的增强技术 <ul><li>在上文中，着重介绍了字节码的结构，这为我们了解字节码增强技术的实现打下了基础。字节码增强技术就是一类对现有字节码进行修改或者动态生成全新字节码文件的技术。接下来，我们将从最直接操纵字节码的实现方式开始深入进行剖析。</li></ul></li><li>JVM基础 - Java 类加载机制 <ul><li>这篇文章将带你深入理解Java 类加载机制</li></ul></li></ul><blockquote><p><strong>C. Java进阶 - JVM相关 内存结构</strong>： 因为类字节码是加载到JVM内存结构中的，所以紧接着理解JVM内存结构。</p></blockquote><ul><li>JVM基础 - JVM内存结构 <ul><li>本文主要对JVM 内存结构进行讲解，注意不要和Java内存模型混淆了</li></ul></li></ul><blockquote><p><strong>D. Java进阶 - JVM相关 JMM</strong>： 然后通过理解JVM与硬件之间的联系，理解Java 通过其内存模型保证数据线程安全等，这是JVM在并发上底层的支持。</p></blockquote><ul><li>JVM基础 - Java 内存模型引入 <ul><li>很多人都无法区分Java内存模型和JVM内存结构，以及Java内存模型与物理内存之间的关系。本文从堆栈角度引入JMM，然后介绍JMM和物理内存之间的关系, 为后面<code>JMM详解</code>, <code>JVM 内存结构详解</code>, <code>Java 对象模型详解</code>等铺垫。</li></ul></li><li>JVM基础 - Java 内存模型详解 <ul><li>本文主要转载自 Info 上<a href="https://www.infoq.cn/article/java_memory_model/" target="_blank" rel="noopener noreferrer">深入理解Java内存模型在新窗口打开</a>, 作者程晓明。这篇文章对JMM讲的很清楚了，大致分三部分：重排序与顺序一致性；三个同步原语（lock，volatile，final）的内存语义，重排序规则及在处理器中的实现；java 内存模型的设计，及其与处理器内存模型和顺序一致性内存模型的关系</li></ul></li></ul><blockquote><p><strong>E. Java进阶 - JVM相关 GC</strong>： 再者理解下Java GC机制，如何回收内存等。</p></blockquote><ul><li>GC - Java 垃圾回收基础知识 <ul><li>垃圾收集主要是针对堆和方法区进行；程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。</li></ul></li><li>GC - Java 垃圾回收器之G1详解 <ul><li>G1垃圾回收器是在Java7 update 4之后引入的一个新的垃圾回收器。同优秀的CMS垃圾回收器一样，G1也是关注最小时延的垃圾回收器，也同样适合大尺寸堆内存的垃圾收集，官方在ZGC还没有出现时也推荐使用G1来代替选择CMS。G1最大的特点是引入分区的思路，弱化了分代的概念，合理利用垃圾收集各个周期的资源，解决了其他收集器甚至CMS的众多缺陷。</li></ul></li><li>GC - Java 垃圾回收器之ZGC详解 <ul><li>ZGC（The Z Garbage Collector）是JDK 11中推出的一款低延迟垃圾回收器, 是JDK 11+ 最为重要的更新之一，适用于<strong>大内存低延迟</strong>服务的内存管理和回收。在梳理相关知识点时，发现美团技术团队分享的文章<a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html" target="_blank" rel="noopener noreferrer">新一代垃圾回收器ZGC的探索与实践在新窗口打开</a>比较完善（包含G1收集器停顿时间瓶颈，原理，优化等）, 这里分享给你，帮你构建ZGC相关的知识体系</li></ul></li><li>GC - Java 垃圾回收器之CMS GC问题分析与解决 <ul><li>本文整理自<a href="https://tech.meituan.com/2020/11/12/java-9-cms-gc.html" target="_blank" rel="noopener noreferrer">美团技术团队在新窗口打开</a>, 这篇文章将可以帮助你构建CMS GC相关问题解决的知识体系，分享给你。</li></ul></li></ul><blockquote><p><strong>F. Java进阶 - JVM相关 排错调优</strong>： 最后围绕着调试和排错，分析理解JVM调优参数，动态字节码技术及动态在线调试的原理；学会使用常用的调工具和在线动态调试工具等。</p></blockquote><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-debug.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>调试排错 - JVM 调优参数 <ul><li>本文对JVM涉及的常见的调优参数和垃圾回收参数进行阐述</li></ul></li><li>调试排错 - Java 内存分析之堆内存和MetaSpace内存 <ul><li>本文以两个简单的例子(<code>堆内存溢出</code>和<code>MetaSpace (元数据) 内存溢出</code>）解释Java 内存溢出的分析过程</li></ul></li><li>调试排错 - Java 内存分析之堆外内存 <ul><li>Java 堆外内存分析相对来说是复杂的，美团技术团队的<a href="https://tech.meituan.com/2019/01/03/spring-boot-native-memory-leak.html" target="_blank" rel="noopener noreferrer">Spring Boot引起的“堆外内存泄漏”排查及经验总结在新窗口打开</a>可以为很多Native Code内存泄漏/占用提供方向性指引。</li></ul></li><li>调试排错 - Java 线程分析之线程Dump分析 <ul><li>Thread Dump是非常有用的诊断Java应用问题的工具。</li></ul></li><li>调试排错 - Java 问题排查之Linux命令 <ul><li>Java 在线问题排查之通过linux常用命令排查。</li></ul></li><li>调试排错 - Java 问题排查之工具单 <ul><li>Java 在线问题排查之通过java调试/排查工具进行问题定位。</li></ul></li><li>调试排错 - Java 问题排查之JVM可视化工具 <ul><li>本文主要梳理常见的JVM可视化的分析工具，主要包括JConsole, Visual VM, Vusial GC, JProfile 和 MAT等。</li></ul></li><li>调试排错 - Java 问题排查之应用在线调试Arthas <ul><li>本文主要介绍Alibaba开源的Java诊断工具，开源到现在已经1.7万个点赞了，深受开发者喜爱。具体解决在线问题，比如：</li><li>这个类从哪个 jar 包加载的? 为什么会报各种类相关的 Exception?</li><li>我改的代码为什么没有执行到? 难道是我没 commit? 分支搞错了?</li><li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗?</li><li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li><li>是否有一个全局视角来查看系统的运行状况?</li><li>有什么办法可以监控到JVM的实时运行状态?</li></ul></li><li>调试排错 - Java 问题排查之使用IDEA本地调试和远程调试 <ul><li>Debug用来追踪代码的运行流程，通常在程序运行过程中出现异常，启用Debug模式可以分析定位异常发生的位置，以及在运行过程中参数的变化；并且在实际的排错过程中，还会用到Remote Debug。IDEA 相比 Eclipse/STS效率更高，本文主要介绍基于IDEA的Debug和Remote Debug的技巧。</li></ul></li><li>调试排错 - Java动态调试技术原理 <ul><li>本文转载自 美团技术团队胡健的<a href="https://tech.meituan.com/2019/11/07/java-dynamic-debugging-technology.html" target="_blank" rel="noopener noreferrer">Java 动态调试技术原理及实践在新窗口打开</a>, 通过学习java agent方式进行动态调试了解目前很多大厂开源的一些基于此的调试工具。</li></ul></li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span><a href="#%E5%AD%A6%E4%B9%A0%E6%96%87%E7%8C%AE">#</a> 参考文章</span></a></h2><ul><li><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5" target="_blank" rel="noopener noreferrer">Java虚拟机规范（Java SE 8）在新窗口打开</a></li><li><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf" target="_blank" rel="noopener noreferrer">JSR-133: JavaTM Memory Model and Thread Specification</a></li></ul>',22)])])}const c=e(o,[["render",r]]),p=JSON.parse(`{"path":"/backend/java/JVM/JVM%20%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html","title":"JVM 相关知识体系详解","lang":"zh-CN","frontmatter":{"title":"JVM 相关知识体系详解","subtitle":"Java，Java开发，Java 体系","date":"2024-03-17T16:07:34.000Z","category":["Java"],"tag":["Java","JVM"],"order":1,"description":"本系列将给大家构建JVM核心知识点全局知识体系。 JVM 相关知识体系详解 知识体系 学习要点 参考文章 # 知识体系 imgimg # 学习要点 不同的虚拟机实现方式上也有差别，如果没有特别指出，这里的JVM指的是sun的HotSpot；不同的JDK版本略有差别，这里主要以1.8为主，具体差异请看各个章节中详解。下图主要表示的逻辑关系，用来将所有知识...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/backend/java/JVM/JVM%20%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"JVM 相关知识体系详解"}],["meta",{"property":"og:description","content":"本系列将给大家构建JVM核心知识点全局知识体系。 JVM 相关知识体系详解 知识体系 学习要点 参考文章 # 知识体系 imgimg # 学习要点 不同的虚拟机实现方式上也有差别，如果没有特别指出，这里的JVM指的是sun的HotSpot；不同的JDK版本略有差别，这里主要以1.8为主，具体差异请看各个章节中详解。下图主要表示的逻辑关系，用来将所有知识..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/jvm-overview.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-18T09:49:26.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2024-03-17T16:07:34.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-18T09:49:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM 相关知识体系详解\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/jvm-overview.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-overview.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-debug.png\\"],\\"datePublished\\":\\"2024-03-17T16:07:34.000Z\\",\\"dateModified\\":\\"2025-08-18T09:49:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 知识体系","slug":"知识体系","link":"#知识体系","children":[]},{"level":2,"title":"# 学习要点","slug":"学习要点","link":"#学习要点","children":[]},{"level":2,"title":"# 参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1755510566000,"updatedTime":1755510566000,"contributors":[{"name":"Dell","username":"Dell","email":"1183895890@qq.com","commits":1,"url":"https://github.com/Dell"}]},"readingTime":{"minutes":7.14,"words":2142},"filePathRelative":"backend/java/JVM/JVM 相关知识体系详解.md","localizedDate":"2024年3月17日","excerpt":"<blockquote>\\n<p>本系列将给大家构建JVM核心知识点全局知识体系。</p>\\n</blockquote>\\n<ul>\\n<li>JVM 相关知识体系详解\\n<ul>\\n<li><a href=\\"#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB\\">知识体系</a></li>\\n<li><a href=\\"#%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9\\">学习要点</a></li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{c as comp,p as data};
