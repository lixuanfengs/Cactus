import{_ as s,o as n,c as a,h as l}from"./app-Cpl0HuRl.js";const p={},e=l(`<blockquote><p>Phaser是JDK 7新增的一个同步辅助类，它可以实现CyclicBarrier和CountDownLatch类似的功能，而且它支持对任务的动态调整，并支持分层结构来达到更高的吞吐量。</p></blockquote><ul><li>JUC 工具类之 Phaser 详解 <ul><li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3phaser%E5%B7%A5%E5%85%B7">带着BAT大厂的面试问题去理解Phaser工具</a></li><li><a href="#phaser%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6">Phaser运行机制</a></li><li>Phaser源码详解 <ul><li><a href="#%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0">核心参数</a></li><li><a href="#%E5%87%BD%E6%95%B0%E5%88%97%E8%A1%A8">函数列表</a></li><li><a href="#%E6%96%B9%E6%B3%95---register">方法 - register()</a></li><li><a href="#%E6%96%B9%E6%B3%95---arrive">方法 - arrive()</a></li><li><a href="#%E6%96%B9%E6%B3%95---arriveandawaitadvance">方法 - arriveAndAwaitAdvance()</a></li><li><a href="#%E6%96%B9%E6%B3%95---awaitadvanceint-phase">方法 - awaitAdvance(int phase)</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="带着bat大厂的面试问题去理解phaser工具" tabindex="-1"><a class="header-anchor" href="#带着bat大厂的面试问题去理解phaser工具"><span><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3phaser%E5%B7%A5%E5%85%B7">#</a> 带着BAT大厂的面试问题去理解Phaser工具</span></a></h2><p>提示</p><p>请带着这些问题继续后文，会很大程度上帮助你更好的理解Phaser工具。@pdai</p><ul><li>Phaser主要用来解决什么问题?</li><li>Phaser与CyclicBarrier和CountDownLatch的区别是什么?</li><li>如果用CountDownLatch来实现Phaser的功能应该怎么实现?</li><li>Phaser运行机制是什么样的?</li><li>给一个Phaser使用的示例?</li></ul><h2 id="phaser运行机制" tabindex="-1"><a class="header-anchor" href="#phaser运行机制"><span><a href="#phaser%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6">#</a> Phaser运行机制</span></a></h2><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-phaser-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li><strong>Registration(注册)</strong></li></ul><p>跟其他barrier不同，在phaser上注册的parties会随着时间的变化而变化。任务可以随时注册(使用方法register,bulkRegister注册，或者由构造器确定初始parties)，并且在任何抵达点可以随意地撤销注册(方法arriveAndDeregister)。就像大多数基本的同步结构一样，注册和撤销只影响内部count；不会创建更深的内部记录，所以任务不能查询他们是否已经注册。(不过，可以通过继承来实现类似的记录)</p><ul><li><strong>Synchronization(同步机制)</strong></li></ul><p>和CyclicBarrier一样，Phaser也可以重复await。方法arriveAndAwaitAdvance的效果类似CyclicBarrier.await。phaser的每一代都有一个相关的phase number，初始值为0，当所有注册的任务都到达phaser时phase+1，到达最大值(Integer.MAX_VALUE)之后清零。使用phase number可以独立控制 到达phaser 和 等待其他线程 的动作，通过下面两种类型的方法:</p><blockquote><ul><li><strong>Arrival(到达机制)</strong> arrive和arriveAndDeregister方法记录到达状态。这些方法不会阻塞，但是会返回一个相关的arrival phase number；也就是说，phase number用来确定到达状态。当所有任务都到达给定phase时，可以执行一个可选的函数，这个函数通过重写onAdvance方法实现，通常可以用来控制终止状态。重写此方法类似于为CyclicBarrier提供一个barrierAction，但比它更灵活。</li><li><strong>Waiting(等待机制)</strong> awaitAdvance方法需要一个表示arrival phase number的参数，并且在phaser前进到与给定phase不同的phase时返回。和CyclicBarrier不同，即使等待线程已经被中断，awaitAdvance方法也会一直等待。中断状态和超时时间同样可用，但是当任务等待中断或超时后未改变phaser的状态时会遭遇异常。如果有必要，在方法forceTermination之后可以执行这些异常的相关的handler进行恢复操作，Phaser也可能被ForkJoinPool中的任务使用，这样在其他任务阻塞等待一个phase时可以保证足够的并行度来执行任务。</li></ul></blockquote><ul><li><strong>Termination(终止机制)</strong> :</li></ul><p>可以用isTerminated方法检查phaser的终止状态。在终止时，所有同步方法立刻返回一个负值。在终止时尝试注册也没有效果。当调用onAdvance返回true时Termination被触发。当deregistration操作使已注册的parties变为0时，onAdvance的默认实现就会返回true。也可以重写onAdvance方法来定义终止动作。forceTermination方法也可以释放等待线程并且允许它们终止。</p><ul><li><strong>Tiering(分层结构)</strong> :</li></ul><p>Phaser支持分层结构(树状构造)来减少竞争。注册了大量parties的Phaser可能会因为同步竞争消耗很高的成本， 因此可以设置一些子Phaser来共享一个通用的parent。这样的话即使每个操作消耗了更多的开销，但是会提高整体吞吐量。 在一个分层结构的phaser里，子节点phaser的注册和取消注册都通过父节点管理。子节点phaser通过构造或方法register、bulkRegister进行首次注册时，在其父节点上注册。子节点phaser通过调用arriveAndDeregister进行最后一次取消注册时，也在其父节点上取消注册。</p><ul><li><strong>Monitoring(状态监控)</strong> :</li></ul><p>由于同步方法可能只被已注册的parties调用，所以phaser的当前状态也可能被任何调用者监控。在任何时候，可以通过getRegisteredParties获取parties数，其中getArrivedParties方法返回已经到达当前phase的parties数。当剩余的parties(通过方法getUnarrivedParties获取)到达时，phase进入下一代。这些方法返回的值可能只表示短暂的状态，所以一般来说在同步结构里并没有啥卵用。</p><h2 id="phaser源码详解" tabindex="-1"><a class="header-anchor" href="#phaser源码详解"><span><a href="#phaser%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3">#</a> Phaser源码详解</span></a></h2><h3 id="核心参数" tabindex="-1"><a class="header-anchor" href="#核心参数"><span><a href="#%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0">#</a> 核心参数</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * The parent of this phaser, or null if none</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Phaser</span><span style="color:#E06C75;"> parent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * The root of phaser tree. Equals this if not in a tree.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Phaser</span><span style="color:#E06C75;"> root</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//等待线程的栈顶元素，根据phase取模定义为一个奇数header和一个偶数header</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> AtomicReference</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">QNode</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> evenQ</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> AtomicReference</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">QNode</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> oddQ</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>state状态说明:</p><p>Phaser使用一个long型state值来标识内部状态:</p><ul><li>低0-15位表示未到达parties数；</li><li>中16-31位表示等待的parties数；</li><li>中32-62位表示phase当前代；</li><li>高63位表示当前phaser的终止状态。</li></ul><p>注意: 子Phaser的phase在没有被真正使用之前，允许滞后于它的root节点。这里在后面源码分析的reconcileState方法里会讲解。 Qnode是Phaser定义的内部等待队列，用于在阻塞时记录等待线程及相关信息。实现了ForkJoinPool的一个内部接口ManagedBlocker，上面已经说过，Phaser也可能被ForkJoinPool中的任务使用，这样在其他任务阻塞等待一个phase时可以保证足够的并行度来执行任务(通过内部实现方法isReleasable和block)。</p><h3 id="函数列表" tabindex="-1"><a class="header-anchor" href="#函数列表"><span><a href="#%E5%87%BD%E6%95%B0%E5%88%97%E8%A1%A8">#</a> 函数列表</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//构造方法</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> Phaser</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> Phaser</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> parties) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> parties)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> Phaser</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Phaser</span><span style="color:#E06C75;"> parent) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#E06C75;">(parent</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> Phaser</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Phaser</span><span style="color:#E06C75;"> parent</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> parties)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//注册一个新的party</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> register</span><span style="color:#E06C75;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//批量注册</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> bulkRegister</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> parties)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//使当前线程到达phaser，不等待其他任务到达。返回arrival phase number</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> arrive</span><span style="color:#E06C75;">() </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//使当前线程到达phaser并撤销注册，返回arrival phase number</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> arriveAndDeregister</span><span style="color:#E06C75;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 使当前线程到达phaser并等待其他任务到达，等价于awaitAdvance(arrive())。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 如果需要等待中断或超时，可以使用awaitAdvance方法完成一个类似的构造。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 如果需要在到达后取消注册，可以使用awaitAdvance(arriveAndDeregister())。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> arriveAndAwaitAdvance</span><span style="color:#E06C75;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//等待给定phase数，返回下一个 arrival phase number</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> awaitAdvance</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> phase)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//阻塞等待，直到phase前进到下一代，返回下一代的phase number</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> awaitAdvance</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> phase) </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//响应中断版awaitAdvance</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> awaitAdvanceInterruptibly</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> phase) throws </span><span style="color:#E5C07B;">InterruptedException</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> awaitAdvanceInterruptibly</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> phase</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> timeout</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> TimeUnit</span><span style="color:#E06C75;"> unit)</span></span>
<span class="line"><span style="color:#E06C75;">    throws InterruptedException</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> TimeoutException</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//使当前phaser进入终止状态，已注册的parties不受影响，如果是分层结构，则终止所有phaser</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> forceTermination</span><span style="color:#E06C75;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法-register" tabindex="-1"><a class="header-anchor" href="#方法-register"><span><a href="#%E6%96%B9%E6%B3%95-register">#</a> 方法 - register()</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//注册一个新的party</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> register</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> doRegister</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> doRegister</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> registrations) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // adjustment to state</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> adjust </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> ((</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;">)registrations </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#E06C75;"> PARTIES_SHIFT) </span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;"> registrations</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#E5C07B;"> Phaser</span><span style="color:#E06C75;"> parent </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> phase</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (parent </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> state </span><span style="color:#C678DD;">:</span><span style="color:#61AFEF;"> reconcileState</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> counts </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)s</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> parties </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> counts </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#E06C75;"> PARTIES_SHIFT</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//获取已注册parties数</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> unarrived </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> counts </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> UNARRIVED_MASK</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//未到达数</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (registrations </span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> MAX_PARTIES </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> parties)</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalStateException</span><span style="color:#E06C75;">(</span><span style="color:#61AFEF;">badRegister</span><span style="color:#E06C75;">(s))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        phase </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)(s </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#E06C75;"> PHASE_SHIFT)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//获取当前代</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (phase </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">            break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (counts </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> EMPTY) {                  </span><span style="color:#7F848E;font-style:italic;">// not 1st registration</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (parent </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#61AFEF;"> reconcileState</span><span style="color:#E06C75;">() </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> s) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (unarrived </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)             </span><span style="color:#7F848E;font-style:italic;">// wait out advance</span></span>
<span class="line"><span style="color:#E5C07B;">                    root</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">internalAwaitAdvance</span><span style="color:#ABB2BF;">(phase, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//等待其他任务到达</span></span>
<span class="line"><span style="color:#C678DD;">                else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapLong</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, stateOffset,</span></span>
<span class="line"><span style="color:#ABB2BF;">                                                   s, s </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> adjust)</span><span style="color:#E06C75;">)</span><span style="color:#7F848E;font-style:italic;">//更新注册的parties数</span></span>
<span class="line"><span style="color:#C678DD;">                    break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (parent </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {              </span><span style="color:#7F848E;font-style:italic;">// 1st root registration</span></span>
<span class="line"><span style="color:#C678DD;">            long</span><span style="color:#E06C75;"> next </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> ((</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;">)phase </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#E06C75;"> PHASE_SHIFT) </span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;"> adjust</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapLong</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, stateOffset, s, next)</span><span style="color:#E06C75;">)</span><span style="color:#7F848E;font-style:italic;">//更新phase</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //分层结构，子phaser首次注册用父节点管理</span></span>
<span class="line"><span style="color:#C678DD;">            synchronized</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#E06C75;">) {               </span><span style="color:#7F848E;font-style:italic;">// 1st sub registration</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (state </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> s) {               </span><span style="color:#7F848E;font-style:italic;">// recheck under lock</span></span>
<span class="line"><span style="color:#E06C75;">                    phase </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doRegister</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//分层结构，使用父节点注册</span></span>
<span class="line"><span style="color:#C678DD;">                    if</span><span style="color:#E06C75;"> (phase </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                        break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // finish registration whenever parent registration</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // succeeded, even when racing with termination,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // since these are part of the same &quot;transaction&quot;.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    //由于在同一个事务里，即使phaser已终止，也会完成注册</span></span>
<span class="line"><span style="color:#C678DD;">                    while</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">compareAndSwapLong</span></span>
<span class="line"><span style="color:#E06C75;">                           (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> stateOffset</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> s</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                            ((</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;">)phase </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#E06C75;"> PHASE_SHIFT) </span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;"> adjust)) {</span><span style="color:#7F848E;font-style:italic;">//更新phase</span></span>
<span class="line"><span style="color:#E06C75;">                        s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                        phase </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)(</span><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#56B6C2;"> &gt;&gt;&gt;</span><span style="color:#E06C75;"> PHASE_SHIFT)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                        // assert (int)s == EMPTY;</span></span>
<span class="line"><span style="color:#E06C75;">                    }</span></span>
<span class="line"><span style="color:#C678DD;">                    break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> phase</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: register方法为phaser添加一个新的party，如果onAdvance正在运行，那么这个方法会等待它运行结束再返回结果。如果当前phaser有父节点，并且当前phaser上没有已注册的party，那么就会交给父节点注册。</p><p>register和bulkRegister都由doRegister实现，大概流程如下:</p><ul><li>如果当前操作不是首次注册，那么直接在当前phaser上更新注册parties数</li><li>如果是首次注册，并且当前phaser没有父节点，说明是root节点注册，直接更新phase</li><li>如果当前操作是首次注册，并且当前phaser由父节点，则注册操作交由父节点，并更新当前phaser的phase</li><li>上面说过，子Phaser的phase在没有被真正使用之前，允许滞后于它的root节点。非首次注册时，如果Phaser有父节点，则调用reconcileState()方法解决root节点的phase延迟传递问题， 源码如下:</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> reconcileState</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#E5C07B;"> Phaser</span><span style="color:#E06C75;"> root </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (root </span><span style="color:#56B6C2;">!=</span><span style="color:#E5C07B;"> this</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> phase</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // CAS to root phase with current parties, tripping unarrived</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#E06C75;"> ((phase </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)(</span><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#56B6C2;"> &gt;&gt;&gt;</span><span style="color:#E06C75;"> PHASE_SHIFT)) </span><span style="color:#56B6C2;">!=</span></span>
<span class="line"><span style="color:#E06C75;">               (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)(s </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#E06C75;"> PHASE_SHIFT) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#56B6C2;">               !</span><span style="color:#E5C07B;">UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">compareAndSwapLong</span></span>
<span class="line"><span style="color:#E06C75;">               (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> stateOffset</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> s</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (((</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;">)phase </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#E06C75;"> PHASE_SHIFT) </span><span style="color:#56B6C2;">|</span></span>
<span class="line"><span style="color:#E06C75;">                     ((phase </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> (s </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> COUNTS_MASK) </span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#E06C75;">                      (((p </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)s </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#E06C75;"> PARTIES_SHIFT) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> EMPTY </span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#E06C75;">                       ((s </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> PARTIES_MASK) </span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;"> p))))))</span></span>
<span class="line"><span style="color:#E06C75;">            s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> s</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当root节点的phase已经advance到下一代，但是子节点phaser还没有，这种情况下它们必须通过更新未到达parties数 完成它们自己的advance操作(如果parties为0，重置为EMPTY状态)。</p><p>回到register方法的第一步，如果当前未到达数为0，说明上一代phase正在进行到达操作，此时调用internalAwaitAdvance()方法等待其他任务完成到达操作，源码如下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//阻塞等待phase到下一代</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> internalAwaitAdvance</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> phase</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> QNode</span><span style="color:#E06C75;"> node) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // assert root == this;</span></span>
<span class="line"><span style="color:#61AFEF;">    releaseWaiters</span><span style="color:#E06C75;">(phase</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">          // ensure old queue clean</span></span>
<span class="line"><span style="color:#C678DD;">    boolean</span><span style="color:#E06C75;"> queued </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">           // true when node is enqueued</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> lastUnarrived </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">            // to increase spins upon change</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> spins </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> SPINS_PER_ARRIVAL</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> s</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#E06C75;"> ((p </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)((s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> state) </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#E06C75;"> PHASE_SHIFT)) </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> phase) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (node </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {           </span><span style="color:#7F848E;font-style:italic;">// spinning in noninterruptible mode</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> unarrived </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)s </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> UNARRIVED_MASK</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//未到达数</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (unarrived </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> lastUnarrived </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">                (lastUnarrived </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> unarrived) </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> NCPU)</span></span>
<span class="line"><span style="color:#E06C75;">                spins </span><span style="color:#56B6C2;">+=</span><span style="color:#E06C75;"> SPINS_PER_ARRIVAL</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            boolean</span><span style="color:#E06C75;"> interrupted </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interrupted</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (interrupted </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> --</span><span style="color:#E06C75;">spins </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// need node to record intr</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                //使用node记录中断状态</span></span>
<span class="line"><span style="color:#E06C75;">                node </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> QNode</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> phase</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 0L</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">                node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">wasInterrupted</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> interrupted</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isReleasable</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// done or aborted</span></span>
<span class="line"><span style="color:#C678DD;">            break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">queued) {           </span><span style="color:#7F848E;font-style:italic;">// push onto queue</span></span>
<span class="line"><span style="color:#E5C07B;">            AtomicReference</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">QNode</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> head </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (phase </span><span style="color:#56B6C2;">&amp;</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> evenQ </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> oddQ</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            QNode</span><span style="color:#E06C75;"> q </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> head</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> ((q </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> q</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">phase</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> phase) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">                (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)(state </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#E06C75;"> PHASE_SHIFT) </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> phase) </span><span style="color:#7F848E;font-style:italic;">// avoid stale enq</span></span>
<span class="line"><span style="color:#E06C75;">                queued </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> head</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSet</span><span style="color:#ABB2BF;">(q, node);</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                ForkJoinPool</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">managedBlock</span><span style="color:#ABB2BF;">(node);</span><span style="color:#7F848E;font-style:italic;">//阻塞给定node</span></span>
<span class="line"><span style="color:#E06C75;">            } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> ie</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">wasInterrupted</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (node </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">thread</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">            node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">thread</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">       // avoid need for unpark()</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">wasInterrupted</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">interruptible</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">interrupt</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (p </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> phase </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E06C75;"> (p </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)(state </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#E06C75;"> PHASE_SHIFT)) </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> phase)</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#61AFEF;"> abortWait</span><span style="color:#E06C75;">(phase)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // possibly clean up on abort</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    releaseWaiters</span><span style="color:#E06C75;">(phase)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单介绍下第二个参数node，如果不为空，则说明等待线程需要追踪中断状态或超时状态。以doRegister中的调用为例，不考虑线程争用，internalAwaitAdvance大概流程如下:</p><ul><li>首先调用releaseWaiters唤醒上一代所有等待线程，确保旧队列中没有遗留的等待线程。</li><li>循环SPINS_PER_ARRIVAL指定的次数或者当前线程被中断，创建node记录等待线程及相关信息。</li><li>继续循环调用ForkJoinPool.managedBlock运行被阻塞的任务</li><li>继续循环，阻塞任务运行成功被释放，跳出循环</li><li>最后唤醒当前phase的线程</li></ul><h3 id="方法-arrive" tabindex="-1"><a class="header-anchor" href="#方法-arrive"><span><a href="#%E6%96%B9%E6%B3%95-arrive">#</a> 方法 - arrive()</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//使当前线程到达phaser，不等待其他任务到达。返回arrival phase number</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> arrive</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> doArrive</span><span style="color:#E06C75;">(ONE_ARRIVAL)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> doArrive</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> adjust) {</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#E5C07B;"> Phaser</span><span style="color:#E06C75;"> root </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (root </span><span style="color:#56B6C2;">==</span><span style="color:#E5C07B;"> this</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> state </span><span style="color:#C678DD;">:</span><span style="color:#61AFEF;"> reconcileState</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> phase </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)(s </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#E06C75;"> PHASE_SHIFT)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (phase </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> phase</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> counts </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)s</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //获取未到达数</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> unarrived </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (counts </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> EMPTY) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> (counts </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> UNARRIVED_MASK)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (unarrived </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalStateException</span><span style="color:#E06C75;">(</span><span style="color:#61AFEF;">badArrive</span><span style="color:#E06C75;">(s))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapLong</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, stateOffset, s, s</span><span style="color:#56B6C2;">-=</span><span style="color:#ABB2BF;">adjust)</span><span style="color:#E06C75;">) {</span><span style="color:#7F848E;font-style:italic;">//更新state</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (unarrived </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">) {</span><span style="color:#7F848E;font-style:italic;">//当前为最后一个未到达的任务</span></span>
<span class="line"><span style="color:#C678DD;">                long</span><span style="color:#E06C75;"> n </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> PARTIES_MASK</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">  // base of next state</span></span>
<span class="line"><span style="color:#C678DD;">                int</span><span style="color:#E06C75;"> nextUnarrived </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)n </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#E06C75;"> PARTIES_SHIFT</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (root </span><span style="color:#56B6C2;">==</span><span style="color:#E5C07B;"> this</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                    if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">onAdvance</span><span style="color:#E06C75;">(phase</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> nextUnarrived))</span><span style="color:#7F848E;font-style:italic;">//检查是否需要终止phaser</span></span>
<span class="line"><span style="color:#E06C75;">                        n </span><span style="color:#56B6C2;">|=</span><span style="color:#E06C75;"> TERMINATION_BIT</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                    else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (nextUnarrived </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">                        n </span><span style="color:#56B6C2;">|=</span><span style="color:#E06C75;"> EMPTY</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                    else</span></span>
<span class="line"><span style="color:#E06C75;">                        n </span><span style="color:#56B6C2;">|=</span><span style="color:#E06C75;"> nextUnarrived</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                    int</span><span style="color:#E06C75;"> nextPhase </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (phase </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> MAX_PHASE</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                    n </span><span style="color:#56B6C2;">|=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;">)nextPhase </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#E06C75;"> PHASE_SHIFT</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">                    UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapLong</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, stateOffset, s, n);</span></span>
<span class="line"><span style="color:#61AFEF;">                    releaseWaiters</span><span style="color:#E06C75;">(phase)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//释放等待phase的线程</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                //分层结构，使用父节点管理arrive</span></span>
<span class="line"><span style="color:#C678DD;">                else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (nextUnarrived </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">//propagate deregistration</span></span>
<span class="line"><span style="color:#E06C75;">                    phase </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doArrive</span><span style="color:#ABB2BF;">(ONE_DEREGISTER);</span></span>
<span class="line"><span style="color:#E5C07B;">                    UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapLong</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, stateOffset,</span></span>
<span class="line"><span style="color:#ABB2BF;">                                              s, s </span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> EMPTY);</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#C678DD;">                else</span></span>
<span class="line"><span style="color:#E06C75;">                    phase </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doArrive</span><span style="color:#ABB2BF;">(ONE_ARRIVAL);</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> phase</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: arrive方法手动调整到达数，使当前线程到达phaser。arrive和arriveAndDeregister都调用了doArrive实现，大概流程如下:</p><ul><li>首先更新state(state - adjust)；</li><li>如果当前不是最后一个未到达的任务，直接返回phase</li><li>如果当前是最后一个未到达的任务: <ul><li>如果当前是root节点，判断是否需要终止phaser，CAS更新phase，最后释放等待的线程；</li><li>如果是分层结构，并且已经没有下一代未到达的parties，则交由父节点处理doArrive逻辑，然后更新state为EMPTY。</li></ul></li></ul><h3 id="方法-arriveandawaitadvance" tabindex="-1"><a class="header-anchor" href="#方法-arriveandawaitadvance"><span><a href="#%E6%96%B9%E6%B3%95-arriveandawaitadvance">#</a> 方法 - arriveAndAwaitAdvance()</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> arriveAndAwaitAdvance</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Specialization of doArrive+awaitAdvance eliminating some reads/paths</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#E5C07B;"> Phaser</span><span style="color:#E06C75;"> root </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (root </span><span style="color:#56B6C2;">==</span><span style="color:#E5C07B;"> this</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> state </span><span style="color:#C678DD;">:</span><span style="color:#61AFEF;"> reconcileState</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> phase </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)(s </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#E06C75;"> PHASE_SHIFT)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (phase </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> phase</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> counts </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)s</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> unarrived </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (counts </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> EMPTY) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> (counts </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> UNARRIVED_MASK)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//获取未到达数</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (unarrived </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalStateException</span><span style="color:#E06C75;">(</span><span style="color:#61AFEF;">badArrive</span><span style="color:#E06C75;">(s))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapLong</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, stateOffset, s,</span></span>
<span class="line"><span style="color:#ABB2BF;">                                      s </span><span style="color:#56B6C2;">-=</span><span style="color:#ABB2BF;"> ONE_ARRIVAL)</span><span style="color:#E06C75;">) {</span><span style="color:#7F848E;font-style:italic;">//更新state</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (unarrived </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E5C07B;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">internalAwaitAdvance</span><span style="color:#ABB2BF;">(phase, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//阻塞等待其他任务</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (root </span><span style="color:#56B6C2;">!=</span><span style="color:#E5C07B;"> this</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E5C07B;"> parent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arriveAndAwaitAdvance</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//子Phaser交给父节点处理</span></span>
<span class="line"><span style="color:#C678DD;">            long</span><span style="color:#E06C75;"> n </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> PARTIES_MASK</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">  // base of next state</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> nextUnarrived </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)n </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#E06C75;"> PARTIES_SHIFT</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">onAdvance</span><span style="color:#E06C75;">(phase</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> nextUnarrived))</span><span style="color:#7F848E;font-style:italic;">//全部到达，检查是否可销毁</span></span>
<span class="line"><span style="color:#E06C75;">                n </span><span style="color:#56B6C2;">|=</span><span style="color:#E06C75;"> TERMINATION_BIT</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (nextUnarrived </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">                n </span><span style="color:#56B6C2;">|=</span><span style="color:#E06C75;"> EMPTY</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            else</span></span>
<span class="line"><span style="color:#E06C75;">                n </span><span style="color:#56B6C2;">|=</span><span style="color:#E06C75;"> nextUnarrived</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> nextPhase </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (phase </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> MAX_PHASE</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//计算下一代phase</span></span>
<span class="line"><span style="color:#E06C75;">            n </span><span style="color:#56B6C2;">|=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;">)nextPhase </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#E06C75;"> PHASE_SHIFT</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapLong</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, stateOffset, s, n)</span><span style="color:#E06C75;">)</span><span style="color:#7F848E;font-style:italic;">//更新state</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)(state </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#E06C75;"> PHASE_SHIFT)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // terminated</span></span>
<span class="line"><span style="color:#61AFEF;">            releaseWaiters</span><span style="color:#E06C75;">(phase)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//释放等待phase的线程</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> nextPhase</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 使当前线程到达phaser并等待其他任务到达，等价于awaitAdvance(arrive())。如果需要等待中断或超时，可以使用awaitAdvance方法完成一个类似的构造。如果需要在到达后取消注册，可以使用awaitAdvance(arriveAndDeregister())。效果类似于CyclicBarrier.await。大概流程如下:</p><ul><li>更新state(state - 1)；</li><li>如果未到达数大于1，调用internalAwaitAdvance阻塞等待其他任务到达，返回当前phase</li><li>如果为分层结构，则交由父节点处理arriveAndAwaitAdvance逻辑</li><li>如果未到达数&lt;=1，判断phaser终止状态，CAS更新phase到下一代，最后释放等待当前phase的线程，并返回下一代phase。</li></ul><h3 id="方法-awaitadvance-int-phase" tabindex="-1"><a class="header-anchor" href="#方法-awaitadvance-int-phase"><span><a href="#%E6%96%B9%E6%B3%95-awaitadvance-int-phase">#</a> 方法 - awaitAdvance(int phase)</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> awaitAdvance</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> phase) {</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#E5C07B;"> Phaser</span><span style="color:#E06C75;"> root </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (root </span><span style="color:#56B6C2;">==</span><span style="color:#E5C07B;"> this</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> state </span><span style="color:#C678DD;">:</span><span style="color:#61AFEF;"> reconcileState</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> p </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)(s </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#E06C75;"> PHASE_SHIFT)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (phase </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> phase</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (p </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> phase)</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">internalAwaitAdvance</span><span style="color:#ABB2BF;">(phase, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//响应中断版awaitAdvance</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> awaitAdvanceInterruptibly</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> phase)</span></span>
<span class="line"><span style="color:#E06C75;">    throws InterruptedException {</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#E5C07B;"> Phaser</span><span style="color:#E06C75;"> root </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (root </span><span style="color:#56B6C2;">==</span><span style="color:#E5C07B;"> this</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> state </span><span style="color:#C678DD;">:</span><span style="color:#61AFEF;"> reconcileState</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> p </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)(s </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#E06C75;"> PHASE_SHIFT)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (phase </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> phase</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (p </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> phase) {</span></span>
<span class="line"><span style="color:#E5C07B;">        QNode</span><span style="color:#E06C75;"> node </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> QNode</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> phase</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 0L</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        p </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">internalAwaitAdvance</span><span style="color:#ABB2BF;">(phase, node);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">wasInterrupted</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InterruptedException</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: awaitAdvance用于阻塞等待线程到达，直到phase前进到下一代，返回下一代的phase number。方法很简单，不多赘述。awaitAdvanceInterruptibly方法是响应中断版的awaitAdvance，不同之处在于，调用阻塞时会记录线程的中断状态。</p>`,50),o=[e];function t(r,c){return n(),a("div",null,o)}const y=s(p,[["render",t],["__file","JUC 工具类之 Phaser 详解.html.vue"]]),C=JSON.parse(`{"path":"/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Phaser%20%E8%AF%A6%E8%A7%A3.html","title":"JUC 工具类之 Phaser 详解","lang":"zh-CN","frontmatter":{"title":"JUC 工具类之 Phaser 详解","subtitle":"Java，Java开发，Java 体系","date":"2024-03-07T10:15:26.000Z","category":["Java"],"tag":["Java","Thread","concurrency"],"order":25,"description":"Phaser是JDK 7新增的一个同步辅助类，它可以实现CyclicBarrier和CountDownLatch类似的功能，而且它支持对任务的动态调整，并支持分层结构来达到更高的吞吐量。 JUC 工具类之 Phaser 详解 带着BAT大厂的面试问题去理解Phaser工具 Phaser运行机制 Phaser源码详解 核心参数 函数列表 方法 - reg...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Phaser%20%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"JUC 工具类之 Phaser 详解"}],["meta",{"property":"og:description","content":"Phaser是JDK 7新增的一个同步辅助类，它可以实现CyclicBarrier和CountDownLatch类似的功能，而且它支持对任务的动态调整，并支持分层结构来达到更高的吞吐量。 JUC 工具类之 Phaser 详解 带着BAT大厂的面试问题去理解Phaser工具 Phaser运行机制 Phaser源码详解 核心参数 函数列表 方法 - reg..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-phaser-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T03:51:56.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:tag","content":"concurrency"}],["meta",{"property":"article:published_time","content":"2024-03-07T10:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T03:51:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC 工具类之 Phaser 详解\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-phaser-1.png\\"],\\"datePublished\\":\\"2024-03-07T10:15:26.000Z\\",\\"dateModified\\":\\"2024-03-08T03:51:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 带着BAT大厂的面试问题去理解Phaser工具","slug":"带着bat大厂的面试问题去理解phaser工具","link":"#带着bat大厂的面试问题去理解phaser工具","children":[]},{"level":2,"title":"# Phaser运行机制","slug":"phaser运行机制","link":"#phaser运行机制","children":[]},{"level":2,"title":"# Phaser源码详解","slug":"phaser源码详解","link":"#phaser源码详解","children":[{"level":3,"title":"# 核心参数","slug":"核心参数","link":"#核心参数","children":[]},{"level":3,"title":"# 函数列表","slug":"函数列表","link":"#函数列表","children":[]},{"level":3,"title":"# 方法 - register()","slug":"方法-register","link":"#方法-register","children":[]},{"level":3,"title":"# 方法 - arrive()","slug":"方法-arrive","link":"#方法-arrive","children":[]},{"level":3,"title":"# 方法 - arriveAndAwaitAdvance()","slug":"方法-arriveandawaitadvance","link":"#方法-arriveandawaitadvance","children":[]},{"level":3,"title":"# 方法 - awaitAdvance(int phase)","slug":"方法-awaitadvance-int-phase","link":"#方法-awaitadvance-int-phase","children":[]}]}],"git":{"createdTime":1709869916000,"updatedTime":1709869916000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":12.99,"words":3898},"filePathRelative":"posts/Java/ThreadConcurrency/JUC 工具类之 Phaser 详解.md","localizedDate":"2024年3月7日","excerpt":"<blockquote>\\n<p>Phaser是JDK 7新增的一个同步辅助类，它可以实现CyclicBarrier和CountDownLatch类似的功能，而且它支持对任务的动态调整，并支持分层结构来达到更高的吞吐量。</p>\\n</blockquote>\\n<ul>\\n<li>JUC 工具类之 Phaser 详解\\n<ul>\\n<li><a href=\\"#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3phaser%E5%B7%A5%E5%85%B7\\">带着BAT大厂的面试问题去理解Phaser工具</a></li>\\n<li><a href=\\"#phaser%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6\\">Phaser运行机制</a></li>\\n<li>Phaser源码详解\\n<ul>\\n<li><a href=\\"#%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0\\">核心参数</a></li>\\n<li><a href=\\"#%E5%87%BD%E6%95%B0%E5%88%97%E8%A1%A8\\">函数列表</a></li>\\n<li><a href=\\"#%E6%96%B9%E6%B3%95---register\\">方法 - register()</a></li>\\n<li><a href=\\"#%E6%96%B9%E6%B3%95---arrive\\">方法 - arrive()</a></li>\\n<li><a href=\\"#%E6%96%B9%E6%B3%95---arriveandawaitadvance\\">方法 - arriveAndAwaitAdvance()</a></li>\\n<li><a href=\\"#%E6%96%B9%E6%B3%95---awaitadvanceint-phase\\">方法 - awaitAdvance(int phase)</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{y as comp,C as data};
